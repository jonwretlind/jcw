webpackHotUpdate("jcw",{

/***/ "./node_modules/core-js/internals/flatten-into-array.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/internals/flatten-into-array.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar isArray = __webpack_require__(/*! ../internals/is-array */ \"./node_modules/core-js/internals/is-array.js\");\nvar toLength = __webpack_require__(/*! ../internals/to-length */ \"./node_modules/core-js/internals/to-length.js\");\nvar bind = __webpack_require__(/*! ../internals/function-bind-context */ \"./node_modules/core-js/internals/function-bind-context.js\");\n\n// `FlattenIntoArray` abstract operation\n// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray\nvar flattenIntoArray = function (target, original, source, sourceLen, start, depth, mapper, thisArg) {\n  var targetIndex = start;\n  var sourceIndex = 0;\n  var mapFn = mapper ? bind(mapper, thisArg, 3) : false;\n  var element;\n\n  while (sourceIndex < sourceLen) {\n    if (sourceIndex in source) {\n      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];\n\n      if (depth > 0 && isArray(element)) {\n        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;\n      } else {\n        if (targetIndex >= 0x1FFFFFFFFFFFFF) throw TypeError('Exceed the acceptable array length');\n        target[targetIndex] = element;\n      }\n\n      targetIndex++;\n    }\n    sourceIndex++;\n  }\n  return targetIndex;\n};\n\nmodule.exports = flattenIntoArray;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZmxhdHRlbi1pbnRvLWFycmF5LmpzP2EyYmYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixjQUFjLG1CQUFPLENBQUMsMkVBQXVCO0FBQzdDLGVBQWUsbUJBQU8sQ0FBQyw2RUFBd0I7QUFDL0MsV0FBVyxtQkFBTyxDQUFDLHFHQUFvQzs7QUFFdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mbGF0dGVuLWludG8tYXJyYXkuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG5cbi8vIGBGbGF0dGVuSW50b0FycmF5YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtZmxhdE1hcC8jc2VjLUZsYXR0ZW5JbnRvQXJyYXlcbnZhciBmbGF0dGVuSW50b0FycmF5ID0gZnVuY3Rpb24gKHRhcmdldCwgb3JpZ2luYWwsIHNvdXJjZSwgc291cmNlTGVuLCBzdGFydCwgZGVwdGgsIG1hcHBlciwgdGhpc0FyZykge1xuICB2YXIgdGFyZ2V0SW5kZXggPSBzdGFydDtcbiAgdmFyIHNvdXJjZUluZGV4ID0gMDtcbiAgdmFyIG1hcEZuID0gbWFwcGVyID8gYmluZChtYXBwZXIsIHRoaXNBcmcsIDMpIDogZmFsc2U7XG4gIHZhciBlbGVtZW50O1xuXG4gIHdoaWxlIChzb3VyY2VJbmRleCA8IHNvdXJjZUxlbikge1xuICAgIGlmIChzb3VyY2VJbmRleCBpbiBzb3VyY2UpIHtcbiAgICAgIGVsZW1lbnQgPSBtYXBGbiA/IG1hcEZuKHNvdXJjZVtzb3VyY2VJbmRleF0sIHNvdXJjZUluZGV4LCBvcmlnaW5hbCkgOiBzb3VyY2Vbc291cmNlSW5kZXhdO1xuXG4gICAgICBpZiAoZGVwdGggPiAwICYmIGlzQXJyYXkoZWxlbWVudCkpIHtcbiAgICAgICAgdGFyZ2V0SW5kZXggPSBmbGF0dGVuSW50b0FycmF5KHRhcmdldCwgb3JpZ2luYWwsIGVsZW1lbnQsIHRvTGVuZ3RoKGVsZW1lbnQubGVuZ3RoKSwgdGFyZ2V0SW5kZXgsIGRlcHRoIC0gMSkgLSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRhcmdldEluZGV4ID49IDB4MUZGRkZGRkZGRkZGRkYpIHRocm93IFR5cGVFcnJvcignRXhjZWVkIHRoZSBhY2NlcHRhYmxlIGFycmF5IGxlbmd0aCcpO1xuICAgICAgICB0YXJnZXRbdGFyZ2V0SW5kZXhdID0gZWxlbWVudDtcbiAgICAgIH1cblxuICAgICAgdGFyZ2V0SW5kZXgrKztcbiAgICB9XG4gICAgc291cmNlSW5kZXgrKztcbiAgfVxuICByZXR1cm4gdGFyZ2V0SW5kZXg7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZsYXR0ZW5JbnRvQXJyYXk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/core-js/internals/flatten-into-array.js\n");

/***/ }),

/***/ "./node_modules/core-js/modules/es.array.flat.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.flat.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar $ = __webpack_require__(/*! ../internals/export */ \"./node_modules/core-js/internals/export.js\");\nvar flattenIntoArray = __webpack_require__(/*! ../internals/flatten-into-array */ \"./node_modules/core-js/internals/flatten-into-array.js\");\nvar toObject = __webpack_require__(/*! ../internals/to-object */ \"./node_modules/core-js/internals/to-object.js\");\nvar toLength = __webpack_require__(/*! ../internals/to-length */ \"./node_modules/core-js/internals/to-length.js\");\nvar toInteger = __webpack_require__(/*! ../internals/to-integer */ \"./node_modules/core-js/internals/to-integer.js\");\nvar arraySpeciesCreate = __webpack_require__(/*! ../internals/array-species-create */ \"./node_modules/core-js/internals/array-species-create.js\");\n\n// `Array.prototype.flat` method\n// https://tc39.es/ecma262/#sec-array.prototype.flat\n$({ target: 'Array', proto: true }, {\n  flat: function flat(/* depthArg = 1 */) {\n    var depthArg = arguments.length ? arguments[0] : undefined;\n    var O = toObject(this);\n    var sourceLen = toLength(O.length);\n    var A = arraySpeciesCreate(O, 0);\n    A.length = flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));\n    return A;\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZsYXQuanM/MDQ4MSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLFFBQVEsbUJBQU8sQ0FBQyx1RUFBcUI7QUFDckMsdUJBQXVCLG1CQUFPLENBQUMsK0ZBQWlDO0FBQ2hFLGVBQWUsbUJBQU8sQ0FBQyw2RUFBd0I7QUFDL0MsZUFBZSxtQkFBTyxDQUFDLDZFQUF3QjtBQUMvQyxnQkFBZ0IsbUJBQU8sQ0FBQywrRUFBeUI7QUFDakQseUJBQXlCLG1CQUFPLENBQUMsbUdBQW1DOztBQUVwRTtBQUNBO0FBQ0EsR0FBRywrQkFBK0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZsYXQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmbGF0dGVuSW50b0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZsYXR0ZW4taW50by1hcnJheScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZmxhdGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mbGF0XG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSB9LCB7XG4gIGZsYXQ6IGZ1bmN0aW9uIGZsYXQoLyogZGVwdGhBcmcgPSAxICovKSB7XG4gICAgdmFyIGRlcHRoQXJnID0gYXJndW1lbnRzLmxlbmd0aCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBzb3VyY2VMZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIEEgPSBhcnJheVNwZWNpZXNDcmVhdGUoTywgMCk7XG4gICAgQS5sZW5ndGggPSBmbGF0dGVuSW50b0FycmF5KEEsIE8sIE8sIHNvdXJjZUxlbiwgMCwgZGVwdGhBcmcgPT09IHVuZGVmaW5lZCA/IDEgOiB0b0ludGVnZXIoZGVwdGhBcmcpKTtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/core-js/modules/es.array.flat.js\n");

/***/ }),

/***/ "./node_modules/jquery/dist/jquery.js":
/*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;__webpack_require__(/*! core-js/modules/es.array.flat.js */ \"./node_modules/core-js/modules/es.array.flat.js\");__webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ \"./node_modules/core-js/modules/es.regexp.to-string.js\");__webpack_require__(/*! core-js/modules/es.array.sort.js */ \"./node_modules/core-js/modules/es.array.sort.js\");__webpack_require__(/*! core-js/modules/es.string.replace.js */ \"./node_modules/core-js/modules/es.string.replace.js\");__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");__webpack_require__(/*! core-js/modules/es.string.split.js */ \"./node_modules/core-js/modules/es.string.split.js\");__webpack_require__(/*! core-js/modules/es.regexp.constructor.js */ \"./node_modules/core-js/modules/es.regexp.constructor.js\");__webpack_require__(/*! core-js/modules/es.string.match.js */ \"./node_modules/core-js/modules/es.string.match.js\");__webpack_require__(/*! core-js/modules/es.array.reverse.js */ \"./node_modules/core-js/modules/es.array.reverse.js\");__webpack_require__(/*! core-js/modules/es.string.trim.js */ \"./node_modules/core-js/modules/es.string.trim.js\");/*!\n * jQuery JavaScript Library v3.6.0\n * https://jquery.com/\n *\n * Includes Sizzle.js\n * https://sizzlejs.com/\n *\n * Copyright OpenJS Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2021-03-02T17:08Z\n */(function(global,factory){\"use strict\";if( true&&typeof module.exports===\"object\"){// For CommonJS and CommonJS-like environments where a proper `window`\n// is present, execute the factory and get jQuery.\n// For environments that do not have a `window` with a `document`\n// (such as Node.js), expose a factory as module.exports.\n// This accentuates the need for the creation of a real `window`.\n// e.g. var jQuery = require(\"jquery\")(window);\n// See ticket #14549 for more info.\nmodule.exports=global.document?factory(global,true):function(w){if(!w.document){throw new Error(\"jQuery requires a window with a document\");}return factory(w);};}else{factory(global);}// Pass this if window is not defined yet\n})(typeof window!==\"undefined\"?window:this,function(window,noGlobal){// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1\n// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode\n// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common\n// enough that all such attempts are guarded in a try block.\n\"use strict\";var arr=[];var getProto=Object.getPrototypeOf;var slice=arr.slice;var flat=arr.flat?function(array){return arr.flat.call(array);}:function(array){return arr.concat.apply([],array);};var push=arr.push;var indexOf=arr.indexOf;var class2type={};var toString=class2type.toString;var hasOwn=class2type.hasOwnProperty;var fnToString=hasOwn.toString;var ObjectFunctionString=fnToString.call(Object);var support={};var isFunction=function isFunction(obj){// Support: Chrome <=57, Firefox <=52\n// In some browsers, typeof returns \"function\" for HTML <object> elements\n// (i.e., `typeof document.createElement( \"object\" ) === \"function\"`).\n// We don't want to classify *any* DOM node as a function.\n// Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5\n// Plus for old WebKit, typeof returns \"function\" for HTML collections\n// (e.g., `typeof document.getElementsByTagName(\"div\") === \"function\"`). (gh-4756)\nreturn typeof obj===\"function\"&&typeof obj.nodeType!==\"number\"&&typeof obj.item!==\"function\";};var isWindow=function isWindow(obj){return obj!=null&&obj===obj.window;};var document=window.document;var preservedScriptAttributes={type:true,src:true,nonce:true,noModule:true};function DOMEval(code,node,doc){doc=doc||document;var i,val,script=doc.createElement(\"script\");script.text=code;if(node){for(i in preservedScriptAttributes){// Support: Firefox 64+, Edge 18+\n// Some browsers don't support the \"nonce\" property on scripts.\n// On the other hand, just using `getAttribute` is not enough as\n// the `nonce` attribute is reset to an empty string whenever it\n// becomes browsing-context connected.\n// See https://github.com/whatwg/html/issues/2369\n// See https://html.spec.whatwg.org/#nonce-attributes\n// The `node.getAttribute` check was added for the sake of\n// `jQuery.globalEval` so that it can fake a nonce-containing node\n// via an object.\nval=node[i]||node.getAttribute&&node.getAttribute(i);if(val){script.setAttribute(i,val);}}}doc.head.appendChild(script).parentNode.removeChild(script);}function toType(obj){if(obj==null){return obj+\"\";}// Support: Android <=2.3 only (functionish RegExp)\nreturn typeof obj===\"object\"||typeof obj===\"function\"?class2type[toString.call(obj)]||\"object\":typeof obj;}/* global Symbol */ // Defining this global in .eslintrc.json would create a danger of using the global\n// unguarded in another place, it seems safer to define global only for this module\nvar version=\"3.6.0\",// Define a local copy of jQuery\njQuery=function jQuery(selector,context){// The jQuery object is actually just the init constructor 'enhanced'\n// Need init if jQuery is called (just allow error to be thrown if not included)\nreturn new jQuery.fn.init(selector,context);};jQuery.fn=jQuery.prototype={// The current version of jQuery being used\njquery:version,constructor:jQuery,// The default length of a jQuery object is 0\nlength:0,toArray:function(){return slice.call(this);},// Get the Nth element in the matched element set OR\n// Get the whole matched element set as a clean array\nget:function(num){// Return all the elements in a clean array\nif(num==null){return slice.call(this);}// Return just the one element from the set\nreturn num<0?this[num+this.length]:this[num];},// Take an array of elements and push it onto the stack\n// (returning the new matched element set)\npushStack:function(elems){// Build a new jQuery matched element set\nvar ret=jQuery.merge(this.constructor(),elems);// Add the old object onto the stack (as a reference)\nret.prevObject=this;// Return the newly-formed element set\nreturn ret;},// Execute a callback for every element in the matched set.\neach:function(callback){return jQuery.each(this,callback);},map:function(callback){return this.pushStack(jQuery.map(this,function(elem,i){return callback.call(elem,i,elem);}));},slice:function(){return this.pushStack(slice.apply(this,arguments));},first:function(){return this.eq(0);},last:function(){return this.eq(-1);},even:function(){return this.pushStack(jQuery.grep(this,function(_elem,i){return(i+1)%2;}));},odd:function(){return this.pushStack(jQuery.grep(this,function(_elem,i){return i%2;}));},eq:function(i){var len=this.length,j=+i+(i<0?len:0);return this.pushStack(j>=0&&j<len?[this[j]]:[]);},end:function(){return this.prevObject||this.constructor();},// For internal use only.\n// Behaves like an Array's method, not like a jQuery method.\npush:push,sort:arr.sort,splice:arr.splice};jQuery.extend=jQuery.fn.extend=function(){var options,name,src,copy,copyIsArray,clone,target=arguments[0]||{},i=1,length=arguments.length,deep=false;// Handle a deep copy situation\nif(typeof target===\"boolean\"){deep=target;// Skip the boolean and the target\ntarget=arguments[i]||{};i++;}// Handle case when target is a string or something (possible in deep copy)\nif(typeof target!==\"object\"&&!isFunction(target)){target={};}// Extend jQuery itself if only one argument is passed\nif(i===length){target=this;i--;}for(;i<length;i++){// Only deal with non-null/undefined values\nif((options=arguments[i])!=null){// Extend the base object\nfor(name in options){copy=options[name];// Prevent Object.prototype pollution\n// Prevent never-ending loop\nif(name===\"__proto__\"||target===copy){continue;}// Recurse if we're merging plain objects or arrays\nif(deep&&copy&&(jQuery.isPlainObject(copy)||(copyIsArray=Array.isArray(copy)))){src=target[name];// Ensure proper type for the source value\nif(copyIsArray&&!Array.isArray(src)){clone=[];}else if(!copyIsArray&&!jQuery.isPlainObject(src)){clone={};}else{clone=src;}copyIsArray=false;// Never move original objects, clone them\ntarget[name]=jQuery.extend(deep,clone,copy);// Don't bring in undefined values\n}else if(copy!==undefined){target[name]=copy;}}}}// Return the modified object\nreturn target;};jQuery.extend({// Unique for each copy of jQuery on the page\nexpando:\"jQuery\"+(version+Math.random()).replace(/\\D/g,\"\"),// Assume jQuery is ready without the ready module\nisReady:true,error:function(msg){throw new Error(msg);},noop:function(){},isPlainObject:function(obj){var proto,Ctor;// Detect obvious negatives\n// Use toString instead of jQuery.type to catch host objects\nif(!obj||toString.call(obj)!==\"[object Object]\"){return false;}proto=getProto(obj);// Objects with no prototype (e.g., `Object.create( null )`) are plain\nif(!proto){return true;}// Objects with prototype are plain iff they were constructed by a global Object function\nCtor=hasOwn.call(proto,\"constructor\")&&proto.constructor;return typeof Ctor===\"function\"&&fnToString.call(Ctor)===ObjectFunctionString;},isEmptyObject:function(obj){var name;for(name in obj){return false;}return true;},// Evaluates a script in a provided context; falls back to the global one\n// if not specified.\nglobalEval:function(code,options,doc){DOMEval(code,{nonce:options&&options.nonce},doc);},each:function(obj,callback){var length,i=0;if(isArrayLike(obj)){length=obj.length;for(;i<length;i++){if(callback.call(obj[i],i,obj[i])===false){break;}}}else{for(i in obj){if(callback.call(obj[i],i,obj[i])===false){break;}}}return obj;},// results is for internal usage only\nmakeArray:function(arr,results){var ret=results||[];if(arr!=null){if(isArrayLike(Object(arr))){jQuery.merge(ret,typeof arr===\"string\"?[arr]:arr);}else{push.call(ret,arr);}}return ret;},inArray:function(elem,arr,i){return arr==null?-1:indexOf.call(arr,elem,i);},// Support: Android <=4.0 only, PhantomJS 1 only\n// push.apply(_, arraylike) throws on ancient WebKit\nmerge:function(first,second){var len=+second.length,j=0,i=first.length;for(;j<len;j++){first[i++]=second[j];}first.length=i;return first;},grep:function(elems,callback,invert){var callbackInverse,matches=[],i=0,length=elems.length,callbackExpect=!invert;// Go through the array, only saving the items\n// that pass the validator function\nfor(;i<length;i++){callbackInverse=!callback(elems[i],i);if(callbackInverse!==callbackExpect){matches.push(elems[i]);}}return matches;},// arg is for internal usage only\nmap:function(elems,callback,arg){var length,value,i=0,ret=[];// Go through the array, translating each of the items to their new values\nif(isArrayLike(elems)){length=elems.length;for(;i<length;i++){value=callback(elems[i],i,arg);if(value!=null){ret.push(value);}}// Go through every key on the object,\n}else{for(i in elems){value=callback(elems[i],i,arg);if(value!=null){ret.push(value);}}}// Flatten any nested arrays\nreturn flat(ret);},// A global GUID counter for objects\nguid:1,// jQuery.support is not used in Core but other projects attach their\n// properties to it so it needs to exist.\nsupport:support});if(typeof Symbol===\"function\"){jQuery.fn[Symbol.iterator]=arr[Symbol.iterator];}// Populate the class2type map\njQuery.each(\"Boolean Number String Function Array Date RegExp Object Error Symbol\".split(\" \"),function(_i,name){class2type[\"[object \"+name+\"]\"]=name.toLowerCase();});function isArrayLike(obj){// Support: real iOS 8.2 only (not reproducible in simulator)\n// `in` check used to prevent JIT error (gh-2145)\n// hasOwn isn't used here due to false negatives\n// regarding Nodelist length in IE\nvar length=!!obj&&\"length\"in obj&&obj.length,type=toType(obj);if(isFunction(obj)||isWindow(obj)){return false;}return type===\"array\"||length===0||typeof length===\"number\"&&length>0&&length-1 in obj;}var Sizzle=/*!\n * Sizzle CSS Selector Engine v2.3.6\n * https://sizzlejs.com/\n *\n * Copyright JS Foundation and other contributors\n * Released under the MIT license\n * https://js.foundation/\n *\n * Date: 2021-02-16\n */function(window){var i,support,Expr,getText,isXML,tokenize,compile,select,outermostContext,sortInput,hasDuplicate,// Local document vars\nsetDocument,document,docElem,documentIsHTML,rbuggyQSA,rbuggyMatches,matches,contains,// Instance-specific data\nexpando=\"sizzle\"+1*new Date(),preferredDoc=window.document,dirruns=0,done=0,classCache=createCache(),tokenCache=createCache(),compilerCache=createCache(),nonnativeSelectorCache=createCache(),_sortOrder=function sortOrder(a,b){if(a===b){hasDuplicate=true;}return 0;},// Instance methods\nhasOwn={}.hasOwnProperty,arr=[],pop=arr.pop,pushNative=arr.push,push=arr.push,slice=arr.slice,// Use a stripped-down indexOf as it's faster than native\n// https://jsperf.com/thor-indexof-vs-for/5\nindexOf=function indexOf(list,elem){var i=0,len=list.length;for(;i<len;i++){if(list[i]===elem){return i;}}return-1;},booleans=\"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|\"+\"ismap|loop|multiple|open|readonly|required|scoped\",// Regular expressions\n// http://www.w3.org/TR/css3-selectors/#whitespace\nwhitespace=\"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram\nidentifier=\"(?:\\\\\\\\[\\\\da-fA-F]{1,6}\"+whitespace+\"?|\\\\\\\\[^\\\\r\\\\n\\\\f]|[\\\\w-]|[^\\0-\\\\x7f])+\",// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\nattributes=\"\\\\[\"+whitespace+\"*(\"+identifier+\")(?:\"+whitespace+// Operator (capture 2)\n\"*([*^$|!~]?=)\"+whitespace+// \"Attribute values must be CSS identifiers [capture 5]\n// or strings [capture 3 or capture 4]\"\n\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\"+identifier+\"))|)\"+whitespace+\"*\\\\]\",pseudos=\":(\"+identifier+\")(?:\\\\((\"+// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n// 1. quoted (capture 3; capture 4 or capture 5)\n\"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\"+// 2. simple (capture 6)\n\"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\"+attributes+\")*)|\"+// 3. anything else (capture 2)\n\".*\"+\")\\\\)|)\",// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\nrwhitespace=new RegExp(whitespace+\"+\",\"g\"),rtrim=new RegExp(\"^\"+whitespace+\"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\"+whitespace+\"+$\",\"g\"),rcomma=new RegExp(\"^\"+whitespace+\"*,\"+whitespace+\"*\"),rcombinators=new RegExp(\"^\"+whitespace+\"*([>+~]|\"+whitespace+\")\"+whitespace+\"*\"),rdescend=new RegExp(whitespace+\"|>\"),rpseudo=new RegExp(pseudos),ridentifier=new RegExp(\"^\"+identifier+\"$\"),matchExpr={\"ID\":new RegExp(\"^#(\"+identifier+\")\"),\"CLASS\":new RegExp(\"^\\\\.(\"+identifier+\")\"),\"TAG\":new RegExp(\"^(\"+identifier+\"|[*])\"),\"ATTR\":new RegExp(\"^\"+attributes),\"PSEUDO\":new RegExp(\"^\"+pseudos),\"CHILD\":new RegExp(\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\"+whitespace+\"*(even|odd|(([+-]|)(\\\\d*)n|)\"+whitespace+\"*(?:([+-]|)\"+whitespace+\"*(\\\\d+)|))\"+whitespace+\"*\\\\)|)\",\"i\"),\"bool\":new RegExp(\"^(?:\"+booleans+\")$\",\"i\"),// For use in libraries implementing .is()\n// We use this for POS matching in `select`\n\"needsContext\":new RegExp(\"^\"+whitespace+\"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\"+whitespace+\"*((?:-\\\\d)?\\\\d*)\"+whitespace+\"*\\\\)|)(?=[^-]|$)\",\"i\")},rhtml=/HTML$/i,rinputs=/^(?:input|select|textarea|button)$/i,rheader=/^h\\d$/i,rnative=/^[^{]+\\{\\s*\\[native \\w/,// Easily-parseable/retrievable ID or TAG or CLASS selectors\nrquickExpr=/^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,rsibling=/[+~]/,// CSS escapes\n// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\nrunescape=new RegExp(\"\\\\\\\\[\\\\da-fA-F]{1,6}\"+whitespace+\"?|\\\\\\\\([^\\\\r\\\\n\\\\f])\",\"g\"),funescape=function funescape(escape,nonHex){var high=\"0x\"+escape.slice(1)-0x10000;return nonHex?// Strip the backslash prefix from a non-hex escape sequence\nnonHex:// Replace a hexadecimal escape sequence with the encoded Unicode code point\n// Support: IE <=11+\n// For values outside the Basic Multilingual Plane (BMP), manually construct a\n// surrogate pair\nhigh<0?String.fromCharCode(high+0x10000):String.fromCharCode(high>>10|0xD800,high&0x3FF|0xDC00);},// CSS string/identifier serialization\n// https://drafts.csswg.org/cssom/#common-serializing-idioms\nrcssescape=/([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,fcssescape=function fcssescape(ch,asCodePoint){if(asCodePoint){// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\nif(ch===\"\\0\"){return\"\\uFFFD\";}// Control characters and (dependent upon position) numbers get escaped as code points\nreturn ch.slice(0,-1)+\"\\\\\"+ch.charCodeAt(ch.length-1).toString(16)+\" \";}// Other potentially-special ASCII characters get backslash-escaped\nreturn\"\\\\\"+ch;},// Used for iframes\n// See setDocument()\n// Removing the function wrapper causes a \"Permission Denied\"\n// error in IE\nunloadHandler=function unloadHandler(){setDocument();},inDisabledFieldset=addCombinator(function(elem){return elem.disabled===true&&elem.nodeName.toLowerCase()===\"fieldset\";},{dir:\"parentNode\",next:\"legend\"});// Optimize for push.apply( _, NodeList )\ntry{push.apply(arr=slice.call(preferredDoc.childNodes),preferredDoc.childNodes);// Support: Android<4.0\n// Detect silently failing push.apply\n// eslint-disable-next-line no-unused-expressions\narr[preferredDoc.childNodes.length].nodeType;}catch(e){push={apply:arr.length?// Leverage slice if possible\nfunction(target,els){pushNative.apply(target,slice.call(els));}:// Support: IE<9\n// Otherwise append directly\nfunction(target,els){var j=target.length,i=0;// Can't trust NodeList.length\nwhile(target[j++]=els[i++]){}target.length=j-1;}};}function Sizzle(selector,context,results,seed){var m,i,elem,nid,match,groups,newSelector,newContext=context&&context.ownerDocument,// nodeType defaults to 9, since context defaults to document\nnodeType=context?context.nodeType:9;results=results||[];// Return early from calls with invalid selector or context\nif(typeof selector!==\"string\"||!selector||nodeType!==1&&nodeType!==9&&nodeType!==11){return results;}// Try to shortcut find operations (as opposed to filters) in HTML documents\nif(!seed){setDocument(context);context=context||document;if(documentIsHTML){// If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n// (excepting DocumentFragment context, where the methods don't exist)\nif(nodeType!==11&&(match=rquickExpr.exec(selector))){// ID selector\nif(m=match[1]){// Document context\nif(nodeType===9){if(elem=context.getElementById(m)){// Support: IE, Opera, Webkit\n// TODO: identify versions\n// getElementById can match elements by name instead of ID\nif(elem.id===m){results.push(elem);return results;}}else{return results;}// Element context\n}else{// Support: IE, Opera, Webkit\n// TODO: identify versions\n// getElementById can match elements by name instead of ID\nif(newContext&&(elem=newContext.getElementById(m))&&contains(context,elem)&&elem.id===m){results.push(elem);return results;}}// Type selector\n}else if(match[2]){push.apply(results,context.getElementsByTagName(selector));return results;// Class selector\n}else if((m=match[3])&&support.getElementsByClassName&&context.getElementsByClassName){push.apply(results,context.getElementsByClassName(m));return results;}}// Take advantage of querySelectorAll\nif(support.qsa&&!nonnativeSelectorCache[selector+\" \"]&&(!rbuggyQSA||!rbuggyQSA.test(selector))&&(// Support: IE 8 only\n// Exclude object elements\nnodeType!==1||context.nodeName.toLowerCase()!==\"object\")){newSelector=selector;newContext=context;// qSA considers elements outside a scoping root when evaluating child or\n// descendant combinators, which is not what we want.\n// In such cases, we work around the behavior by prefixing every selector in the\n// list with an ID selector referencing the scope context.\n// The technique has to be used as well when a leading combinator is used\n// as such selectors are not recognized by querySelectorAll.\n// Thanks to Andrew Dupont for this technique.\nif(nodeType===1&&(rdescend.test(selector)||rcombinators.test(selector))){// Expand context for sibling selectors\nnewContext=rsibling.test(selector)&&testContext(context.parentNode)||context;// We can use :scope instead of the ID hack if the browser\n// supports it & if we're not changing the context.\nif(newContext!==context||!support.scope){// Capture the context ID, setting it first if necessary\nif(nid=context.getAttribute(\"id\")){nid=nid.replace(rcssescape,fcssescape);}else{context.setAttribute(\"id\",nid=expando);}}// Prefix every selector in the list\ngroups=tokenize(selector);i=groups.length;while(i--){groups[i]=(nid?\"#\"+nid:\":scope\")+\" \"+toSelector(groups[i]);}newSelector=groups.join(\",\");}try{push.apply(results,newContext.querySelectorAll(newSelector));return results;}catch(qsaError){nonnativeSelectorCache(selector,true);}finally{if(nid===expando){context.removeAttribute(\"id\");}}}}}// All others\nreturn select(selector.replace(rtrim,\"$1\"),context,results,seed);}/**\n * Create key-value caches of limited size\n * @returns {function(string, object)} Returns the Object data after storing it on itself with\n *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n *\tdeleting the oldest entry\n */function createCache(){var keys=[];function cache(key,value){// Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\nif(keys.push(key+\" \")>Expr.cacheLength){// Only keep the most recent entries\ndelete cache[keys.shift()];}return cache[key+\" \"]=value;}return cache;}/**\n * Mark a function for special use by Sizzle\n * @param {Function} fn The function to mark\n */function markFunction(fn){fn[expando]=true;return fn;}/**\n * Support testing using an element\n * @param {Function} fn Passed the created element and returns a boolean result\n */function assert(fn){var el=document.createElement(\"fieldset\");try{return!!fn(el);}catch(e){return false;}finally{// Remove from its parent by default\nif(el.parentNode){el.parentNode.removeChild(el);}// release memory in IE\nel=null;}}/**\n * Adds the same handler for all of the specified attrs\n * @param {String} attrs Pipe-separated list of attributes\n * @param {Function} handler The method that will be applied\n */function addHandle(attrs,handler){var arr=attrs.split(\"|\"),i=arr.length;while(i--){Expr.attrHandle[arr[i]]=handler;}}/**\n * Checks document order of two siblings\n * @param {Element} a\n * @param {Element} b\n * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n */function siblingCheck(a,b){var cur=b&&a,diff=cur&&a.nodeType===1&&b.nodeType===1&&a.sourceIndex-b.sourceIndex;// Use IE sourceIndex if available on both nodes\nif(diff){return diff;}// Check if b follows a\nif(cur){while(cur=cur.nextSibling){if(cur===b){return-1;}}}return a?1:-1;}/**\n * Returns a function to use in pseudos for input types\n * @param {String} type\n */function createInputPseudo(type){return function(elem){var name=elem.nodeName.toLowerCase();return name===\"input\"&&elem.type===type;};}/**\n * Returns a function to use in pseudos for buttons\n * @param {String} type\n */function createButtonPseudo(type){return function(elem){var name=elem.nodeName.toLowerCase();return(name===\"input\"||name===\"button\")&&elem.type===type;};}/**\n * Returns a function to use in pseudos for :enabled/:disabled\n * @param {Boolean} disabled true for :disabled; false for :enabled\n */function createDisabledPseudo(disabled){// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\nreturn function(elem){// Only certain elements can match :enabled or :disabled\n// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\nif(\"form\"in elem){// Check for inherited disabledness on relevant non-disabled elements:\n// * listed form-associated elements in a disabled fieldset\n//   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n// * option elements in a disabled optgroup\n//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n// All such elements have a \"form\" property.\nif(elem.parentNode&&elem.disabled===false){// Option elements defer to a parent optgroup if present\nif(\"label\"in elem){if(\"label\"in elem.parentNode){return elem.parentNode.disabled===disabled;}else{return elem.disabled===disabled;}}// Support: IE 6 - 11\n// Use the isDisabled shortcut property to check for disabled fieldset ancestors\nreturn elem.isDisabled===disabled||// Where there is no isDisabled, check manually\n/* jshint -W018 */elem.isDisabled!==!disabled&&inDisabledFieldset(elem)===disabled;}return elem.disabled===disabled;// Try to winnow out elements that can't be disabled before trusting the disabled property.\n// Some victims get caught in our net (label, legend, menu, track), but it shouldn't\n// even exist on them, let alone have a boolean value.\n}else if(\"label\"in elem){return elem.disabled===disabled;}// Remaining elements are neither :enabled nor :disabled\nreturn false;};}/**\n * Returns a function to use in pseudos for positionals\n * @param {Function} fn\n */function createPositionalPseudo(fn){return markFunction(function(argument){argument=+argument;return markFunction(function(seed,matches){var j,matchIndexes=fn([],seed.length,argument),i=matchIndexes.length;// Match elements found at the specified indexes\nwhile(i--){if(seed[j=matchIndexes[i]]){seed[j]=!(matches[j]=seed[j]);}}});});}/**\n * Checks a node for validity as a Sizzle context\n * @param {Element|Object=} context\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n */function testContext(context){return context&&typeof context.getElementsByTagName!==\"undefined\"&&context;}// Expose support vars for convenience\nsupport=Sizzle.support={};/**\n * Detects XML nodes\n * @param {Element|Object} elem An element or a document\n * @returns {Boolean} True iff elem is a non-HTML XML node\n */isXML=Sizzle.isXML=function(elem){var namespace=elem&&elem.namespaceURI,docElem=elem&&(elem.ownerDocument||elem).documentElement;// Support: IE <=8\n// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes\n// https://bugs.jquery.com/ticket/4833\nreturn!rhtml.test(namespace||docElem&&docElem.nodeName||\"HTML\");};/**\n * Sets document-related variables once based on the current document\n * @param {Element|Object} [doc] An element or document object to use to set the document\n * @returns {Object} Returns the current document\n */setDocument=Sizzle.setDocument=function(node){var hasCompare,subWindow,doc=node?node.ownerDocument||node:preferredDoc;// Return early if doc is invalid or already selected\n// Support: IE 11+, Edge 17 - 18+\n// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n// two documents; shallow comparisons work.\n// eslint-disable-next-line eqeqeq\nif(doc==document||doc.nodeType!==9||!doc.documentElement){return document;}// Update global variables\ndocument=doc;docElem=document.documentElement;documentIsHTML=!isXML(document);// Support: IE 9 - 11+, Edge 12 - 18+\n// Accessing iframe documents after unload throws \"permission denied\" errors (jQuery #13936)\n// Support: IE 11+, Edge 17 - 18+\n// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n// two documents; shallow comparisons work.\n// eslint-disable-next-line eqeqeq\nif(preferredDoc!=document&&(subWindow=document.defaultView)&&subWindow.top!==subWindow){// Support: IE 11, Edge\nif(subWindow.addEventListener){subWindow.addEventListener(\"unload\",unloadHandler,false);// Support: IE 9 - 10 only\n}else if(subWindow.attachEvent){subWindow.attachEvent(\"onunload\",unloadHandler);}}// Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,\n// Safari 4 - 5 only, Opera <=11.6 - 12.x only\n// IE/Edge & older browsers don't support the :scope pseudo-class.\n// Support: Safari 6.0 only\n// Safari 6.0 supports :scope but it's an alias of :root there.\nsupport.scope=assert(function(el){docElem.appendChild(el).appendChild(document.createElement(\"div\"));return typeof el.querySelectorAll!==\"undefined\"&&!el.querySelectorAll(\":scope fieldset div\").length;});/* Attributes\n\t---------------------------------------------------------------------- */ // Support: IE<8\n// Verify that getAttribute really returns attributes and not properties\n// (excepting IE8 booleans)\nsupport.attributes=assert(function(el){el.className=\"i\";return!el.getAttribute(\"className\");});/* getElement(s)By*\n\t---------------------------------------------------------------------- */ // Check if getElementsByTagName(\"*\") returns only elements\nsupport.getElementsByTagName=assert(function(el){el.appendChild(document.createComment(\"\"));return!el.getElementsByTagName(\"*\").length;});// Support: IE<9\nsupport.getElementsByClassName=rnative.test(document.getElementsByClassName);// Support: IE<10\n// Check if getElementById returns elements by name\n// The broken getElementById methods don't pick up programmatically-set names,\n// so use a roundabout getElementsByName test\nsupport.getById=assert(function(el){docElem.appendChild(el).id=expando;return!document.getElementsByName||!document.getElementsByName(expando).length;});// ID filter and find\nif(support.getById){Expr.filter[\"ID\"]=function(id){var attrId=id.replace(runescape,funescape);return function(elem){return elem.getAttribute(\"id\")===attrId;};};Expr.find[\"ID\"]=function(id,context){if(typeof context.getElementById!==\"undefined\"&&documentIsHTML){var elem=context.getElementById(id);return elem?[elem]:[];}};}else{Expr.filter[\"ID\"]=function(id){var attrId=id.replace(runescape,funescape);return function(elem){var node=typeof elem.getAttributeNode!==\"undefined\"&&elem.getAttributeNode(\"id\");return node&&node.value===attrId;};};// Support: IE 6 - 7 only\n// getElementById is not reliable as a find shortcut\nExpr.find[\"ID\"]=function(id,context){if(typeof context.getElementById!==\"undefined\"&&documentIsHTML){var node,i,elems,elem=context.getElementById(id);if(elem){// Verify the id attribute\nnode=elem.getAttributeNode(\"id\");if(node&&node.value===id){return[elem];}// Fall back on getElementsByName\nelems=context.getElementsByName(id);i=0;while(elem=elems[i++]){node=elem.getAttributeNode(\"id\");if(node&&node.value===id){return[elem];}}}return[];}};}// Tag\nExpr.find[\"TAG\"]=support.getElementsByTagName?function(tag,context){if(typeof context.getElementsByTagName!==\"undefined\"){return context.getElementsByTagName(tag);// DocumentFragment nodes don't have gEBTN\n}else if(support.qsa){return context.querySelectorAll(tag);}}:function(tag,context){var elem,tmp=[],i=0,// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\nresults=context.getElementsByTagName(tag);// Filter out possible comments\nif(tag===\"*\"){while(elem=results[i++]){if(elem.nodeType===1){tmp.push(elem);}}return tmp;}return results;};// Class\nExpr.find[\"CLASS\"]=support.getElementsByClassName&&function(className,context){if(typeof context.getElementsByClassName!==\"undefined\"&&documentIsHTML){return context.getElementsByClassName(className);}};/* QSA/matchesSelector\n\t---------------------------------------------------------------------- */ // QSA and matchesSelector support\n// matchesSelector(:active) reports false when true (IE9/Opera 11.5)\nrbuggyMatches=[];// qSa(:focus) reports false when true (Chrome 21)\n// We allow this because of a bug in IE8/9 that throws an error\n// whenever `document.activeElement` is accessed on an iframe\n// So, we allow :focus to pass through QSA all the time to avoid the IE error\n// See https://bugs.jquery.com/ticket/13378\nrbuggyQSA=[];if(support.qsa=rnative.test(document.querySelectorAll)){// Build QSA regex\n// Regex strategy adopted from Diego Perini\nassert(function(el){var input;// Select is set to empty string on purpose\n// This is to test IE's treatment of not explicitly\n// setting a boolean content attribute,\n// since its presence should be enough\n// https://bugs.jquery.com/ticket/12359\ndocElem.appendChild(el).innerHTML=\"<a id='\"+expando+\"'></a>\"+\"<select id='\"+expando+\"-\\r\\\\' msallowcapture=''>\"+\"<option selected=''></option></select>\";// Support: IE8, Opera 11-12.16\n// Nothing should be selected when empty strings follow ^= or $= or *=\n// The test attribute must be unknown in Opera but \"safe\" for WinRT\n// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\nif(el.querySelectorAll(\"[msallowcapture^='']\").length){rbuggyQSA.push(\"[*^$]=\"+whitespace+\"*(?:''|\\\"\\\")\");}// Support: IE8\n// Boolean attributes and \"value\" are not treated correctly\nif(!el.querySelectorAll(\"[selected]\").length){rbuggyQSA.push(\"\\\\[\"+whitespace+\"*(?:value|\"+booleans+\")\");}// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\nif(!el.querySelectorAll(\"[id~=\"+expando+\"-]\").length){rbuggyQSA.push(\"~=\");}// Support: IE 11+, Edge 15 - 18+\n// IE 11/Edge don't find elements on a `[name='']` query in some cases.\n// Adding a temporary attribute to the document before the selection works\n// around the issue.\n// Interestingly, IE 10 & older don't seem to have the issue.\ninput=document.createElement(\"input\");input.setAttribute(\"name\",\"\");el.appendChild(input);if(!el.querySelectorAll(\"[name='']\").length){rbuggyQSA.push(\"\\\\[\"+whitespace+\"*name\"+whitespace+\"*=\"+whitespace+\"*(?:''|\\\"\\\")\");}// Webkit/Opera - :checked should return selected option elements\n// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n// IE8 throws error here and will not see later tests\nif(!el.querySelectorAll(\":checked\").length){rbuggyQSA.push(\":checked\");}// Support: Safari 8+, iOS 8+\n// https://bugs.webkit.org/show_bug.cgi?id=136851\n// In-page `selector#id sibling-combinator selector` fails\nif(!el.querySelectorAll(\"a#\"+expando+\"+*\").length){rbuggyQSA.push(\".#.+[+~]\");}// Support: Firefox <=3.6 - 5 only\n// Old Firefox doesn't throw on a badly-escaped identifier.\nel.querySelectorAll(\"\\\\\\f\");rbuggyQSA.push(\"[\\\\r\\\\n\\\\f]\");});assert(function(el){el.innerHTML=\"<a href='' disabled='disabled'></a>\"+\"<select disabled='disabled'><option/></select>\";// Support: Windows 8 Native Apps\n// The type and name attributes are restricted during .innerHTML assignment\nvar input=document.createElement(\"input\");input.setAttribute(\"type\",\"hidden\");el.appendChild(input).setAttribute(\"name\",\"D\");// Support: IE8\n// Enforce case-sensitivity of name attribute\nif(el.querySelectorAll(\"[name=d]\").length){rbuggyQSA.push(\"name\"+whitespace+\"*[*^$|!~]?=\");}// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n// IE8 throws error here and will not see later tests\nif(el.querySelectorAll(\":enabled\").length!==2){rbuggyQSA.push(\":enabled\",\":disabled\");}// Support: IE9-11+\n// IE's :disabled selector does not pick up the children of disabled fieldsets\ndocElem.appendChild(el).disabled=true;if(el.querySelectorAll(\":disabled\").length!==2){rbuggyQSA.push(\":enabled\",\":disabled\");}// Support: Opera 10 - 11 only\n// Opera 10-11 does not throw on post-comma invalid pseudos\nel.querySelectorAll(\"*,:x\");rbuggyQSA.push(\",.*:\");});}if(support.matchesSelector=rnative.test(matches=docElem.matches||docElem.webkitMatchesSelector||docElem.mozMatchesSelector||docElem.oMatchesSelector||docElem.msMatchesSelector)){assert(function(el){// Check to see if it's possible to do matchesSelector\n// on a disconnected node (IE 9)\nsupport.disconnectedMatch=matches.call(el,\"*\");// This should fail with an exception\n// Gecko does not error, returns false instead\nmatches.call(el,\"[s!='']:x\");rbuggyMatches.push(\"!=\",pseudos);});}rbuggyQSA=rbuggyQSA.length&&new RegExp(rbuggyQSA.join(\"|\"));rbuggyMatches=rbuggyMatches.length&&new RegExp(rbuggyMatches.join(\"|\"));/* Contains\n\t---------------------------------------------------------------------- */hasCompare=rnative.test(docElem.compareDocumentPosition);// Element contains another\n// Purposefully self-exclusive\n// As in, an element does not contain itself\ncontains=hasCompare||rnative.test(docElem.contains)?function(a,b){var adown=a.nodeType===9?a.documentElement:a,bup=b&&b.parentNode;return a===bup||!!(bup&&bup.nodeType===1&&(adown.contains?adown.contains(bup):a.compareDocumentPosition&&a.compareDocumentPosition(bup)&16));}:function(a,b){if(b){while(b=b.parentNode){if(b===a){return true;}}}return false;};/* Sorting\n\t---------------------------------------------------------------------- */ // Document order sorting\n_sortOrder=hasCompare?function(a,b){// Flag for duplicate removal\nif(a===b){hasDuplicate=true;return 0;}// Sort on method existence if only one input has compareDocumentPosition\nvar compare=!a.compareDocumentPosition-!b.compareDocumentPosition;if(compare){return compare;}// Calculate position if both inputs belong to the same document\n// Support: IE 11+, Edge 17 - 18+\n// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n// two documents; shallow comparisons work.\n// eslint-disable-next-line eqeqeq\ncompare=(a.ownerDocument||a)==(b.ownerDocument||b)?a.compareDocumentPosition(b):// Otherwise we know they are disconnected\n1;// Disconnected nodes\nif(compare&1||!support.sortDetached&&b.compareDocumentPosition(a)===compare){// Choose the first element that is related to our preferred document\n// Support: IE 11+, Edge 17 - 18+\n// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n// two documents; shallow comparisons work.\n// eslint-disable-next-line eqeqeq\nif(a==document||a.ownerDocument==preferredDoc&&contains(preferredDoc,a)){return-1;}// Support: IE 11+, Edge 17 - 18+\n// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n// two documents; shallow comparisons work.\n// eslint-disable-next-line eqeqeq\nif(b==document||b.ownerDocument==preferredDoc&&contains(preferredDoc,b)){return 1;}// Maintain original order\nreturn sortInput?indexOf(sortInput,a)-indexOf(sortInput,b):0;}return compare&4?-1:1;}:function(a,b){// Exit early if the nodes are identical\nif(a===b){hasDuplicate=true;return 0;}var cur,i=0,aup=a.parentNode,bup=b.parentNode,ap=[a],bp=[b];// Parentless nodes are either documents or disconnected\nif(!aup||!bup){// Support: IE 11+, Edge 17 - 18+\n// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n// two documents; shallow comparisons work.\n/* eslint-disable eqeqeq */return a==document?-1:b==document?1:/* eslint-enable eqeqeq */aup?-1:bup?1:sortInput?indexOf(sortInput,a)-indexOf(sortInput,b):0;// If the nodes are siblings, we can do a quick check\n}else if(aup===bup){return siblingCheck(a,b);}// Otherwise we need full lists of their ancestors for comparison\ncur=a;while(cur=cur.parentNode){ap.unshift(cur);}cur=b;while(cur=cur.parentNode){bp.unshift(cur);}// Walk down the tree looking for a discrepancy\nwhile(ap[i]===bp[i]){i++;}return i?// Do a sibling check if the nodes have a common ancestor\nsiblingCheck(ap[i],bp[i]):// Otherwise nodes in our document sort first\n// Support: IE 11+, Edge 17 - 18+\n// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n// two documents; shallow comparisons work.\n/* eslint-disable eqeqeq */ap[i]==preferredDoc?-1:bp[i]==preferredDoc?1:/* eslint-enable eqeqeq */0;};return document;};Sizzle.matches=function(expr,elements){return Sizzle(expr,null,null,elements);};Sizzle.matchesSelector=function(elem,expr){setDocument(elem);if(support.matchesSelector&&documentIsHTML&&!nonnativeSelectorCache[expr+\" \"]&&(!rbuggyMatches||!rbuggyMatches.test(expr))&&(!rbuggyQSA||!rbuggyQSA.test(expr))){try{var ret=matches.call(elem,expr);// IE 9's matchesSelector returns false on disconnected nodes\nif(ret||support.disconnectedMatch||// As well, disconnected nodes are said to be in a document\n// fragment in IE 9\nelem.document&&elem.document.nodeType!==11){return ret;}}catch(e){nonnativeSelectorCache(expr,true);}}return Sizzle(expr,document,null,[elem]).length>0;};Sizzle.contains=function(context,elem){// Set document vars if needed\n// Support: IE 11+, Edge 17 - 18+\n// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n// two documents; shallow comparisons work.\n// eslint-disable-next-line eqeqeq\nif((context.ownerDocument||context)!=document){setDocument(context);}return contains(context,elem);};Sizzle.attr=function(elem,name){// Set document vars if needed\n// Support: IE 11+, Edge 17 - 18+\n// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n// two documents; shallow comparisons work.\n// eslint-disable-next-line eqeqeq\nif((elem.ownerDocument||elem)!=document){setDocument(elem);}var fn=Expr.attrHandle[name.toLowerCase()],// Don't get fooled by Object.prototype properties (jQuery #13807)\nval=fn&&hasOwn.call(Expr.attrHandle,name.toLowerCase())?fn(elem,name,!documentIsHTML):undefined;return val!==undefined?val:support.attributes||!documentIsHTML?elem.getAttribute(name):(val=elem.getAttributeNode(name))&&val.specified?val.value:null;};Sizzle.escape=function(sel){return(sel+\"\").replace(rcssescape,fcssescape);};Sizzle.error=function(msg){throw new Error(\"Syntax error, unrecognized expression: \"+msg);};/**\n * Document sorting and removing duplicates\n * @param {ArrayLike} results\n */Sizzle.uniqueSort=function(results){var elem,duplicates=[],j=0,i=0;// Unless we *know* we can detect duplicates, assume their presence\nhasDuplicate=!support.detectDuplicates;sortInput=!support.sortStable&&results.slice(0);results.sort(_sortOrder);if(hasDuplicate){while(elem=results[i++]){if(elem===results[i]){j=duplicates.push(i);}}while(j--){results.splice(duplicates[j],1);}}// Clear input after sorting to release objects\n// See https://github.com/jquery/sizzle/pull/225\nsortInput=null;return results;};/**\n * Utility function for retrieving the text value of an array of DOM nodes\n * @param {Array|Element} elem\n */getText=Sizzle.getText=function(elem){var node,ret=\"\",i=0,nodeType=elem.nodeType;if(!nodeType){// If no nodeType, this is expected to be an array\nwhile(node=elem[i++]){// Do not traverse comment nodes\nret+=getText(node);}}else if(nodeType===1||nodeType===9||nodeType===11){// Use textContent for elements\n// innerText usage removed for consistency of new lines (jQuery #11153)\nif(typeof elem.textContent===\"string\"){return elem.textContent;}else{// Traverse its children\nfor(elem=elem.firstChild;elem;elem=elem.nextSibling){ret+=getText(elem);}}}else if(nodeType===3||nodeType===4){return elem.nodeValue;}// Do not include comment or processing instruction nodes\nreturn ret;};Expr=Sizzle.selectors={// Can be adjusted by the user\ncacheLength:50,createPseudo:markFunction,match:matchExpr,attrHandle:{},find:{},relative:{\">\":{dir:\"parentNode\",first:true},\" \":{dir:\"parentNode\"},\"+\":{dir:\"previousSibling\",first:true},\"~\":{dir:\"previousSibling\"}},preFilter:{\"ATTR\":function(match){match[1]=match[1].replace(runescape,funescape);// Move the given value to match[3] whether quoted or unquoted\nmatch[3]=(match[3]||match[4]||match[5]||\"\").replace(runescape,funescape);if(match[2]===\"~=\"){match[3]=\" \"+match[3]+\" \";}return match.slice(0,4);},\"CHILD\":function(match){/* matches from matchExpr[\"CHILD\"]\n\t\t\t\t1 type (only|nth|...)\n\t\t\t\t2 what (child|of-type)\n\t\t\t\t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n\t\t\t\t4 xn-component of xn+y argument ([+-]?\\d*n|)\n\t\t\t\t5 sign of xn-component\n\t\t\t\t6 x of xn-component\n\t\t\t\t7 sign of y-component\n\t\t\t\t8 y of y-component\n\t\t\t*/match[1]=match[1].toLowerCase();if(match[1].slice(0,3)===\"nth\"){// nth-* requires argument\nif(!match[3]){Sizzle.error(match[0]);}// numeric x and y parameters for Expr.filter.CHILD\n// remember that false/true cast respectively to 0/1\nmatch[4]=+(match[4]?match[5]+(match[6]||1):2*(match[3]===\"even\"||match[3]===\"odd\"));match[5]=+(match[7]+match[8]||match[3]===\"odd\");// other types prohibit arguments\n}else if(match[3]){Sizzle.error(match[0]);}return match;},\"PSEUDO\":function(match){var excess,unquoted=!match[6]&&match[2];if(matchExpr[\"CHILD\"].test(match[0])){return null;}// Accept quoted arguments as-is\nif(match[3]){match[2]=match[4]||match[5]||\"\";// Strip excess characters from unquoted arguments\n}else if(unquoted&&rpseudo.test(unquoted)&&(// Get excess from tokenize (recursively)\nexcess=tokenize(unquoted,true))&&(// advance to the next closing parenthesis\nexcess=unquoted.indexOf(\")\",unquoted.length-excess)-unquoted.length)){// excess is a negative index\nmatch[0]=match[0].slice(0,excess);match[2]=unquoted.slice(0,excess);}// Return only captures needed by the pseudo filter method (type and argument)\nreturn match.slice(0,3);}},filter:{\"TAG\":function(nodeNameSelector){var nodeName=nodeNameSelector.replace(runescape,funescape).toLowerCase();return nodeNameSelector===\"*\"?function(){return true;}:function(elem){return elem.nodeName&&elem.nodeName.toLowerCase()===nodeName;};},\"CLASS\":function(className){var pattern=classCache[className+\" \"];return pattern||(pattern=new RegExp(\"(^|\"+whitespace+\")\"+className+\"(\"+whitespace+\"|$)\"))&&classCache(className,function(elem){return pattern.test(typeof elem.className===\"string\"&&elem.className||typeof elem.getAttribute!==\"undefined\"&&elem.getAttribute(\"class\")||\"\");});},\"ATTR\":function(name,operator,check){return function(elem){var result=Sizzle.attr(elem,name);if(result==null){return operator===\"!=\";}if(!operator){return true;}result+=\"\";/* eslint-disable max-len */return operator===\"=\"?result===check:operator===\"!=\"?result!==check:operator===\"^=\"?check&&result.indexOf(check)===0:operator===\"*=\"?check&&result.indexOf(check)>-1:operator===\"$=\"?check&&result.slice(-check.length)===check:operator===\"~=\"?(\" \"+result.replace(rwhitespace,\" \")+\" \").indexOf(check)>-1:operator===\"|=\"?result===check||result.slice(0,check.length+1)===check+\"-\":false;/* eslint-enable max-len */};},\"CHILD\":function(type,what,_argument,first,last){var simple=type.slice(0,3)!==\"nth\",forward=type.slice(-4)!==\"last\",ofType=what===\"of-type\";return first===1&&last===0?// Shortcut for :nth-*(n)\nfunction(elem){return!!elem.parentNode;}:function(elem,_context,xml){var cache,uniqueCache,outerCache,node,nodeIndex,start,dir=simple!==forward?\"nextSibling\":\"previousSibling\",parent=elem.parentNode,name=ofType&&elem.nodeName.toLowerCase(),useCache=!xml&&!ofType,diff=false;if(parent){// :(first|last|only)-(child|of-type)\nif(simple){while(dir){node=elem;while(node=node[dir]){if(ofType?node.nodeName.toLowerCase()===name:node.nodeType===1){return false;}}// Reverse direction for :only-* (if we haven't yet done so)\nstart=dir=type===\"only\"&&!start&&\"nextSibling\";}return true;}start=[forward?parent.firstChild:parent.lastChild];// non-xml :nth-child(...) stores cache data on `parent`\nif(forward&&useCache){// Seek `elem` from a previously-cached index\n// ...in a gzip-friendly way\nnode=parent;outerCache=node[expando]||(node[expando]={});// Support: IE <9 only\n// Defend against cloned attroperties (jQuery gh-1709)\nuniqueCache=outerCache[node.uniqueID]||(outerCache[node.uniqueID]={});cache=uniqueCache[type]||[];nodeIndex=cache[0]===dirruns&&cache[1];diff=nodeIndex&&cache[2];node=nodeIndex&&parent.childNodes[nodeIndex];while(node=++nodeIndex&&node&&node[dir]||(// Fallback to seeking `elem` from the start\ndiff=nodeIndex=0)||start.pop()){// When found, cache indexes on `parent` and break\nif(node.nodeType===1&&++diff&&node===elem){uniqueCache[type]=[dirruns,nodeIndex,diff];break;}}}else{// Use previously-cached element index if available\nif(useCache){// ...in a gzip-friendly way\nnode=elem;outerCache=node[expando]||(node[expando]={});// Support: IE <9 only\n// Defend against cloned attroperties (jQuery gh-1709)\nuniqueCache=outerCache[node.uniqueID]||(outerCache[node.uniqueID]={});cache=uniqueCache[type]||[];nodeIndex=cache[0]===dirruns&&cache[1];diff=nodeIndex;}// xml :nth-child(...)\n// or :nth-last-child(...) or :nth(-last)?-of-type(...)\nif(diff===false){// Use the same loop as above to seek `elem` from the start\nwhile(node=++nodeIndex&&node&&node[dir]||(diff=nodeIndex=0)||start.pop()){if((ofType?node.nodeName.toLowerCase()===name:node.nodeType===1)&&++diff){// Cache the index of each encountered element\nif(useCache){outerCache=node[expando]||(node[expando]={});// Support: IE <9 only\n// Defend against cloned attroperties (jQuery gh-1709)\nuniqueCache=outerCache[node.uniqueID]||(outerCache[node.uniqueID]={});uniqueCache[type]=[dirruns,diff];}if(node===elem){break;}}}}}// Incorporate the offset, then check against cycle size\ndiff-=last;return diff===first||diff%first===0&&diff/first>=0;}};},\"PSEUDO\":function(pseudo,argument){// pseudo-class names are case-insensitive\n// http://www.w3.org/TR/selectors/#pseudo-classes\n// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n// Remember that setFilters inherits from pseudos\nvar args,fn=Expr.pseudos[pseudo]||Expr.setFilters[pseudo.toLowerCase()]||Sizzle.error(\"unsupported pseudo: \"+pseudo);// The user may use createPseudo to indicate that\n// arguments are needed to create the filter function\n// just as Sizzle does\nif(fn[expando]){return fn(argument);}// But maintain support for old signatures\nif(fn.length>1){args=[pseudo,pseudo,\"\",argument];return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase())?markFunction(function(seed,matches){var idx,matched=fn(seed,argument),i=matched.length;while(i--){idx=indexOf(seed,matched[i]);seed[idx]=!(matches[idx]=matched[i]);}}):function(elem){return fn(elem,0,args);};}return fn;}},pseudos:{// Potentially complex pseudos\n\"not\":markFunction(function(selector){// Trim the selector passed to compile\n// to avoid treating leading and trailing\n// spaces as combinators\nvar input=[],results=[],matcher=compile(selector.replace(rtrim,\"$1\"));return matcher[expando]?markFunction(function(seed,matches,_context,xml){var elem,unmatched=matcher(seed,null,xml,[]),i=seed.length;// Match elements unmatched by `matcher`\nwhile(i--){if(elem=unmatched[i]){seed[i]=!(matches[i]=elem);}}}):function(elem,_context,xml){input[0]=elem;matcher(input,null,xml,results);// Don't keep the element (issue #299)\ninput[0]=null;return!results.pop();};}),\"has\":markFunction(function(selector){return function(elem){return Sizzle(selector,elem).length>0;};}),\"contains\":markFunction(function(text){text=text.replace(runescape,funescape);return function(elem){return(elem.textContent||getText(elem)).indexOf(text)>-1;};}),// \"Whether an element is represented by a :lang() selector\n// is based solely on the element's language value\n// being equal to the identifier C,\n// or beginning with the identifier C immediately followed by \"-\".\n// The matching of C against the element's language value is performed case-insensitively.\n// The identifier C does not have to be a valid language name.\"\n// http://www.w3.org/TR/selectors/#lang-pseudo\n\"lang\":markFunction(function(lang){// lang value must be a valid identifier\nif(!ridentifier.test(lang||\"\")){Sizzle.error(\"unsupported lang: \"+lang);}lang=lang.replace(runescape,funescape).toLowerCase();return function(elem){var elemLang;do{if(elemLang=documentIsHTML?elem.lang:elem.getAttribute(\"xml:lang\")||elem.getAttribute(\"lang\")){elemLang=elemLang.toLowerCase();return elemLang===lang||elemLang.indexOf(lang+\"-\")===0;}}while((elem=elem.parentNode)&&elem.nodeType===1);return false;};}),// Miscellaneous\n\"target\":function(elem){var hash=window.location&&window.location.hash;return hash&&hash.slice(1)===elem.id;},\"root\":function(elem){return elem===docElem;},\"focus\":function(elem){return elem===document.activeElement&&(!document.hasFocus||document.hasFocus())&&!!(elem.type||elem.href||~elem.tabIndex);},// Boolean properties\n\"enabled\":createDisabledPseudo(false),\"disabled\":createDisabledPseudo(true),\"checked\":function(elem){// In CSS3, :checked should return both checked and selected elements\n// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\nvar nodeName=elem.nodeName.toLowerCase();return nodeName===\"input\"&&!!elem.checked||nodeName===\"option\"&&!!elem.selected;},\"selected\":function(elem){// Accessing this property makes selected-by-default\n// options in Safari work properly\nif(elem.parentNode){// eslint-disable-next-line no-unused-expressions\nelem.parentNode.selectedIndex;}return elem.selected===true;},// Contents\n\"empty\":function(elem){// http://www.w3.org/TR/selectors/#empty-pseudo\n// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n//   but not by others (comment: 8; processing instruction: 7; etc.)\n// nodeType < 6 works because attributes (2) do not appear as children\nfor(elem=elem.firstChild;elem;elem=elem.nextSibling){if(elem.nodeType<6){return false;}}return true;},\"parent\":function(elem){return!Expr.pseudos[\"empty\"](elem);},// Element/input types\n\"header\":function(elem){return rheader.test(elem.nodeName);},\"input\":function(elem){return rinputs.test(elem.nodeName);},\"button\":function(elem){var name=elem.nodeName.toLowerCase();return name===\"input\"&&elem.type===\"button\"||name===\"button\";},\"text\":function(elem){var attr;return elem.nodeName.toLowerCase()===\"input\"&&elem.type===\"text\"&&(// Support: IE<8\n// New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"\n(attr=elem.getAttribute(\"type\"))==null||attr.toLowerCase()===\"text\");},// Position-in-collection\n\"first\":createPositionalPseudo(function(){return[0];}),\"last\":createPositionalPseudo(function(_matchIndexes,length){return[length-1];}),\"eq\":createPositionalPseudo(function(_matchIndexes,length,argument){return[argument<0?argument+length:argument];}),\"even\":createPositionalPseudo(function(matchIndexes,length){var i=0;for(;i<length;i+=2){matchIndexes.push(i);}return matchIndexes;}),\"odd\":createPositionalPseudo(function(matchIndexes,length){var i=1;for(;i<length;i+=2){matchIndexes.push(i);}return matchIndexes;}),\"lt\":createPositionalPseudo(function(matchIndexes,length,argument){var i=argument<0?argument+length:argument>length?length:argument;for(;--i>=0;){matchIndexes.push(i);}return matchIndexes;}),\"gt\":createPositionalPseudo(function(matchIndexes,length,argument){var i=argument<0?argument+length:argument;for(;++i<length;){matchIndexes.push(i);}return matchIndexes;})}};Expr.pseudos[\"nth\"]=Expr.pseudos[\"eq\"];// Add button/input type pseudos\nfor(i in{radio:true,checkbox:true,file:true,password:true,image:true}){Expr.pseudos[i]=createInputPseudo(i);}for(i in{submit:true,reset:true}){Expr.pseudos[i]=createButtonPseudo(i);}// Easy API for creating new setFilters\nfunction setFilters(){}setFilters.prototype=Expr.filters=Expr.pseudos;Expr.setFilters=new setFilters();tokenize=Sizzle.tokenize=function(selector,parseOnly){var matched,match,tokens,type,soFar,groups,preFilters,cached=tokenCache[selector+\" \"];if(cached){return parseOnly?0:cached.slice(0);}soFar=selector;groups=[];preFilters=Expr.preFilter;while(soFar){// Comma and first run\nif(!matched||(match=rcomma.exec(soFar))){if(match){// Don't consume trailing commas as valid\nsoFar=soFar.slice(match[0].length)||soFar;}groups.push(tokens=[]);}matched=false;// Combinators\nif(match=rcombinators.exec(soFar)){matched=match.shift();tokens.push({value:matched,// Cast descendant combinators to space\ntype:match[0].replace(rtrim,\" \")});soFar=soFar.slice(matched.length);}// Filters\nfor(type in Expr.filter){if((match=matchExpr[type].exec(soFar))&&(!preFilters[type]||(match=preFilters[type](match)))){matched=match.shift();tokens.push({value:matched,type:type,matches:match});soFar=soFar.slice(matched.length);}}if(!matched){break;}}// Return the length of the invalid excess\n// if we're just parsing\n// Otherwise, throw an error or return tokens\nreturn parseOnly?soFar.length:soFar?Sizzle.error(selector):// Cache the tokens\ntokenCache(selector,groups).slice(0);};function toSelector(tokens){var i=0,len=tokens.length,selector=\"\";for(;i<len;i++){selector+=tokens[i].value;}return selector;}function addCombinator(matcher,combinator,base){var dir=combinator.dir,skip=combinator.next,key=skip||dir,checkNonElements=base&&key===\"parentNode\",doneName=done++;return combinator.first?// Check against closest ancestor/preceding element\nfunction(elem,context,xml){while(elem=elem[dir]){if(elem.nodeType===1||checkNonElements){return matcher(elem,context,xml);}}return false;}:// Check against all ancestor/preceding elements\nfunction(elem,context,xml){var oldCache,uniqueCache,outerCache,newCache=[dirruns,doneName];// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\nif(xml){while(elem=elem[dir]){if(elem.nodeType===1||checkNonElements){if(matcher(elem,context,xml)){return true;}}}}else{while(elem=elem[dir]){if(elem.nodeType===1||checkNonElements){outerCache=elem[expando]||(elem[expando]={});// Support: IE <9 only\n// Defend against cloned attroperties (jQuery gh-1709)\nuniqueCache=outerCache[elem.uniqueID]||(outerCache[elem.uniqueID]={});if(skip&&skip===elem.nodeName.toLowerCase()){elem=elem[dir]||elem;}else if((oldCache=uniqueCache[key])&&oldCache[0]===dirruns&&oldCache[1]===doneName){// Assign to newCache so results back-propagate to previous elements\nreturn newCache[2]=oldCache[2];}else{// Reuse newcache so results back-propagate to previous elements\nuniqueCache[key]=newCache;// A match means we're done; a fail means we have to keep checking\nif(newCache[2]=matcher(elem,context,xml)){return true;}}}}}return false;};}function elementMatcher(matchers){return matchers.length>1?function(elem,context,xml){var i=matchers.length;while(i--){if(!matchers[i](elem,context,xml)){return false;}}return true;}:matchers[0];}function multipleContexts(selector,contexts,results){var i=0,len=contexts.length;for(;i<len;i++){Sizzle(selector,contexts[i],results);}return results;}function condense(unmatched,map,filter,context,xml){var elem,newUnmatched=[],i=0,len=unmatched.length,mapped=map!=null;for(;i<len;i++){if(elem=unmatched[i]){if(!filter||filter(elem,context,xml)){newUnmatched.push(elem);if(mapped){map.push(i);}}}}return newUnmatched;}function setMatcher(preFilter,selector,matcher,postFilter,postFinder,postSelector){if(postFilter&&!postFilter[expando]){postFilter=setMatcher(postFilter);}if(postFinder&&!postFinder[expando]){postFinder=setMatcher(postFinder,postSelector);}return markFunction(function(seed,results,context,xml){var temp,i,elem,preMap=[],postMap=[],preexisting=results.length,// Get initial elements from seed or context\nelems=seed||multipleContexts(selector||\"*\",context.nodeType?[context]:context,[]),// Prefilter to get matcher input, preserving a map for seed-results synchronization\nmatcherIn=preFilter&&(seed||!selector)?condense(elems,preMap,preFilter,context,xml):elems,matcherOut=matcher?// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\npostFinder||(seed?preFilter:preexisting||postFilter)?// ...intermediate processing is necessary\n[]:// ...otherwise use results directly\nresults:matcherIn;// Find primary matches\nif(matcher){matcher(matcherIn,matcherOut,context,xml);}// Apply postFilter\nif(postFilter){temp=condense(matcherOut,postMap);postFilter(temp,[],context,xml);// Un-match failing elements by moving them back to matcherIn\ni=temp.length;while(i--){if(elem=temp[i]){matcherOut[postMap[i]]=!(matcherIn[postMap[i]]=elem);}}}if(seed){if(postFinder||preFilter){if(postFinder){// Get the final matcherOut by condensing this intermediate into postFinder contexts\ntemp=[];i=matcherOut.length;while(i--){if(elem=matcherOut[i]){// Restore matcherIn since elem is not yet a final match\ntemp.push(matcherIn[i]=elem);}}postFinder(null,matcherOut=[],temp,xml);}// Move matched elements from seed to results to keep them synchronized\ni=matcherOut.length;while(i--){if((elem=matcherOut[i])&&(temp=postFinder?indexOf(seed,elem):preMap[i])>-1){seed[temp]=!(results[temp]=elem);}}}// Add elements to results, through postFinder if defined\n}else{matcherOut=condense(matcherOut===results?matcherOut.splice(preexisting,matcherOut.length):matcherOut);if(postFinder){postFinder(null,results,matcherOut,xml);}else{push.apply(results,matcherOut);}}});}function matcherFromTokens(tokens){var checkContext,matcher,j,len=tokens.length,leadingRelative=Expr.relative[tokens[0].type],implicitRelative=leadingRelative||Expr.relative[\" \"],i=leadingRelative?1:0,// The foundational matcher ensures that elements are reachable from top-level context(s)\nmatchContext=addCombinator(function(elem){return elem===checkContext;},implicitRelative,true),matchAnyContext=addCombinator(function(elem){return indexOf(checkContext,elem)>-1;},implicitRelative,true),matchers=[function(elem,context,xml){var ret=!leadingRelative&&(xml||context!==outermostContext)||((checkContext=context).nodeType?matchContext(elem,context,xml):matchAnyContext(elem,context,xml));// Avoid hanging onto element (issue #299)\ncheckContext=null;return ret;}];for(;i<len;i++){if(matcher=Expr.relative[tokens[i].type]){matchers=[addCombinator(elementMatcher(matchers),matcher)];}else{matcher=Expr.filter[tokens[i].type].apply(null,tokens[i].matches);// Return special upon seeing a positional matcher\nif(matcher[expando]){// Find the next relative operator (if any) for proper handling\nj=++i;for(;j<len;j++){if(Expr.relative[tokens[j].type]){break;}}return setMatcher(i>1&&elementMatcher(matchers),i>1&&toSelector(// If the preceding token was a descendant combinator, insert an implicit any-element `*`\ntokens.slice(0,i-1).concat({value:tokens[i-2].type===\" \"?\"*\":\"\"})).replace(rtrim,\"$1\"),matcher,i<j&&matcherFromTokens(tokens.slice(i,j)),j<len&&matcherFromTokens(tokens=tokens.slice(j)),j<len&&toSelector(tokens));}matchers.push(matcher);}}return elementMatcher(matchers);}function matcherFromGroupMatchers(elementMatchers,setMatchers){var bySet=setMatchers.length>0,byElement=elementMatchers.length>0,superMatcher=function superMatcher(seed,context,xml,results,outermost){var elem,j,matcher,matchedCount=0,i=\"0\",unmatched=seed&&[],setMatched=[],contextBackup=outermostContext,// We must always have either seed elements or outermost context\nelems=seed||byElement&&Expr.find[\"TAG\"](\"*\",outermost),// Use integer dirruns iff this is the outermost matcher\ndirrunsUnique=dirruns+=contextBackup==null?1:Math.random()||0.1,len=elems.length;if(outermost){// Support: IE 11+, Edge 17 - 18+\n// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n// two documents; shallow comparisons work.\n// eslint-disable-next-line eqeqeq\noutermostContext=context==document||context||outermost;}// Add elements passing elementMatchers directly to results\n// Support: IE<9, Safari\n// Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\nfor(;i!==len&&(elem=elems[i])!=null;i++){if(byElement&&elem){j=0;// Support: IE 11+, Edge 17 - 18+\n// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n// two documents; shallow comparisons work.\n// eslint-disable-next-line eqeqeq\nif(!context&&elem.ownerDocument!=document){setDocument(elem);xml=!documentIsHTML;}while(matcher=elementMatchers[j++]){if(matcher(elem,context||document,xml)){results.push(elem);break;}}if(outermost){dirruns=dirrunsUnique;}}// Track unmatched elements for set filters\nif(bySet){// They will have gone through all possible matchers\nif(elem=!matcher&&elem){matchedCount--;}// Lengthen the array for every element, matched or not\nif(seed){unmatched.push(elem);}}}// `i` is now the count of elements visited above, and adding it to `matchedCount`\n// makes the latter nonnegative.\nmatchedCount+=i;// Apply set filters to unmatched elements\n// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n// equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n// no element matchers and no seed.\n// Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n// case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n// numerically zero.\nif(bySet&&i!==matchedCount){j=0;while(matcher=setMatchers[j++]){matcher(unmatched,setMatched,context,xml);}if(seed){// Reintegrate element matches to eliminate the need for sorting\nif(matchedCount>0){while(i--){if(!(unmatched[i]||setMatched[i])){setMatched[i]=pop.call(results);}}}// Discard index placeholder values to get only actual matches\nsetMatched=condense(setMatched);}// Add matches to results\npush.apply(results,setMatched);// Seedless set matches succeeding multiple successful matchers stipulate sorting\nif(outermost&&!seed&&setMatched.length>0&&matchedCount+setMatchers.length>1){Sizzle.uniqueSort(results);}}// Override manipulation of globals by nested matchers\nif(outermost){dirruns=dirrunsUnique;outermostContext=contextBackup;}return unmatched;};return bySet?markFunction(superMatcher):superMatcher;}compile=Sizzle.compile=function(selector,match/* Internal Use Only */){var i,setMatchers=[],elementMatchers=[],cached=compilerCache[selector+\" \"];if(!cached){// Generate a function of recursive functions that can be used to check each element\nif(!match){match=tokenize(selector);}i=match.length;while(i--){cached=matcherFromTokens(match[i]);if(cached[expando]){setMatchers.push(cached);}else{elementMatchers.push(cached);}}// Cache the compiled function\ncached=compilerCache(selector,matcherFromGroupMatchers(elementMatchers,setMatchers));// Save selector and tokenization\ncached.selector=selector;}return cached;};/**\n * A low-level selection function that works with Sizzle's compiled\n *  selector functions\n * @param {String|Function} selector A selector or a pre-compiled\n *  selector function built with Sizzle.compile\n * @param {Element} context\n * @param {Array} [results]\n * @param {Array} [seed] A set of elements to match against\n */select=Sizzle.select=function(selector,context,results,seed){var i,tokens,token,type,find,compiled=typeof selector===\"function\"&&selector,match=!seed&&tokenize(selector=compiled.selector||selector);results=results||[];// Try to minimize operations if there is only one selector in the list and no seed\n// (the latter of which guarantees us context)\nif(match.length===1){// Reduce context if the leading compound selector is an ID\ntokens=match[0]=match[0].slice(0);if(tokens.length>2&&(token=tokens[0]).type===\"ID\"&&context.nodeType===9&&documentIsHTML&&Expr.relative[tokens[1].type]){context=(Expr.find[\"ID\"](token.matches[0].replace(runescape,funescape),context)||[])[0];if(!context){return results;// Precompiled matchers will still verify ancestry, so step up a level\n}else if(compiled){context=context.parentNode;}selector=selector.slice(tokens.shift().value.length);}// Fetch a seed set for right-to-left matching\ni=matchExpr[\"needsContext\"].test(selector)?0:tokens.length;while(i--){token=tokens[i];// Abort if we hit a combinator\nif(Expr.relative[type=token.type]){break;}if(find=Expr.find[type]){// Search, expanding context for leading sibling combinators\nif(seed=find(token.matches[0].replace(runescape,funescape),rsibling.test(tokens[0].type)&&testContext(context.parentNode)||context)){// If seed is empty or no tokens remain, we can return early\ntokens.splice(i,1);selector=seed.length&&toSelector(tokens);if(!selector){push.apply(results,seed);return results;}break;}}}}// Compile and execute a filtering function if one is not provided\n// Provide `match` to avoid retokenization if we modified the selector above\n(compiled||compile(selector,match))(seed,context,!documentIsHTML,results,!context||rsibling.test(selector)&&testContext(context.parentNode)||context);return results;};// One-time assignments\n// Sort stability\nsupport.sortStable=expando.split(\"\").sort(_sortOrder).join(\"\")===expando;// Support: Chrome 14-35+\n// Always assume duplicates if they aren't passed to the comparison function\nsupport.detectDuplicates=!!hasDuplicate;// Initialize against the default document\nsetDocument();// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n// Detached nodes confoundingly follow *each other*\nsupport.sortDetached=assert(function(el){// Should return 1, but returns 4 (following)\nreturn el.compareDocumentPosition(document.createElement(\"fieldset\"))&1;});// Support: IE<8\n// Prevent attribute/property \"interpolation\"\n// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\nif(!assert(function(el){el.innerHTML=\"<a href='#'></a>\";return el.firstChild.getAttribute(\"href\")===\"#\";})){addHandle(\"type|href|height|width\",function(elem,name,isXML){if(!isXML){return elem.getAttribute(name,name.toLowerCase()===\"type\"?1:2);}});}// Support: IE<9\n// Use defaultValue in place of getAttribute(\"value\")\nif(!support.attributes||!assert(function(el){el.innerHTML=\"<input/>\";el.firstChild.setAttribute(\"value\",\"\");return el.firstChild.getAttribute(\"value\")===\"\";})){addHandle(\"value\",function(elem,_name,isXML){if(!isXML&&elem.nodeName.toLowerCase()===\"input\"){return elem.defaultValue;}});}// Support: IE<9\n// Use getAttributeNode to fetch booleans when getAttribute lies\nif(!assert(function(el){return el.getAttribute(\"disabled\")==null;})){addHandle(booleans,function(elem,name,isXML){var val;if(!isXML){return elem[name]===true?name.toLowerCase():(val=elem.getAttributeNode(name))&&val.specified?val.value:null;}});}return Sizzle;}(window);jQuery.find=Sizzle;jQuery.expr=Sizzle.selectors;// Deprecated\njQuery.expr[\":\"]=jQuery.expr.pseudos;jQuery.uniqueSort=jQuery.unique=Sizzle.uniqueSort;jQuery.text=Sizzle.getText;jQuery.isXMLDoc=Sizzle.isXML;jQuery.contains=Sizzle.contains;jQuery.escapeSelector=Sizzle.escape;var dir=function dir(elem,dir,until){var matched=[],truncate=until!==undefined;while((elem=elem[dir])&&elem.nodeType!==9){if(elem.nodeType===1){if(truncate&&jQuery(elem).is(until)){break;}matched.push(elem);}}return matched;};var siblings=function siblings(n,elem){var matched=[];for(;n;n=n.nextSibling){if(n.nodeType===1&&n!==elem){matched.push(n);}}return matched;};var rneedsContext=jQuery.expr.match.needsContext;function nodeName(elem,name){return elem.nodeName&&elem.nodeName.toLowerCase()===name.toLowerCase();}var rsingleTag=/^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i;// Implement the identical functionality for filter and not\nfunction winnow(elements,qualifier,not){if(isFunction(qualifier)){return jQuery.grep(elements,function(elem,i){return!!qualifier.call(elem,i,elem)!==not;});}// Single element\nif(qualifier.nodeType){return jQuery.grep(elements,function(elem){return elem===qualifier!==not;});}// Arraylike of elements (jQuery, arguments, Array)\nif(typeof qualifier!==\"string\"){return jQuery.grep(elements,function(elem){return indexOf.call(qualifier,elem)>-1!==not;});}// Filtered directly for both simple and complex selectors\nreturn jQuery.filter(qualifier,elements,not);}jQuery.filter=function(expr,elems,not){var elem=elems[0];if(not){expr=\":not(\"+expr+\")\";}if(elems.length===1&&elem.nodeType===1){return jQuery.find.matchesSelector(elem,expr)?[elem]:[];}return jQuery.find.matches(expr,jQuery.grep(elems,function(elem){return elem.nodeType===1;}));};jQuery.fn.extend({find:function(selector){var i,ret,len=this.length,self=this;if(typeof selector!==\"string\"){return this.pushStack(jQuery(selector).filter(function(){for(i=0;i<len;i++){if(jQuery.contains(self[i],this)){return true;}}}));}ret=this.pushStack([]);for(i=0;i<len;i++){jQuery.find(selector,self[i],ret);}return len>1?jQuery.uniqueSort(ret):ret;},filter:function(selector){return this.pushStack(winnow(this,selector||[],false));},not:function(selector){return this.pushStack(winnow(this,selector||[],true));},is:function(selector){return!!winnow(this,// If this is a positional/relative selector, check membership in the returned set\n// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\ntypeof selector===\"string\"&&rneedsContext.test(selector)?jQuery(selector):selector||[],false).length;}});// Initialize a jQuery object\n// A central reference to the root jQuery(document)\nvar rootjQuery,// A simple way to check for HTML strings\n// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n// Strict HTML recognition (#11290: must start with <)\n// Shortcut simple #id case for speed\nrquickExpr=/^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,init=jQuery.fn.init=function(selector,context,root){var match,elem;// HANDLE: $(\"\"), $(null), $(undefined), $(false)\nif(!selector){return this;}// Method init() accepts an alternate rootjQuery\n// so migrate can support jQuery.sub (gh-2101)\nroot=root||rootjQuery;// Handle HTML strings\nif(typeof selector===\"string\"){if(selector[0]===\"<\"&&selector[selector.length-1]===\">\"&&selector.length>=3){// Assume that strings that start and end with <> are HTML and skip the regex check\nmatch=[null,selector,null];}else{match=rquickExpr.exec(selector);}// Match html or make sure no context is specified for #id\nif(match&&(match[1]||!context)){// HANDLE: $(html) -> $(array)\nif(match[1]){context=context instanceof jQuery?context[0]:context;// Option to run scripts is true for back-compat\n// Intentionally let the error be thrown if parseHTML is not present\njQuery.merge(this,jQuery.parseHTML(match[1],context&&context.nodeType?context.ownerDocument||context:document,true));// HANDLE: $(html, props)\nif(rsingleTag.test(match[1])&&jQuery.isPlainObject(context)){for(match in context){// Properties of context are called as methods if possible\nif(isFunction(this[match])){this[match](context[match]);// ...and otherwise set as attributes\n}else{this.attr(match,context[match]);}}}return this;// HANDLE: $(#id)\n}else{elem=document.getElementById(match[2]);if(elem){// Inject the element directly into the jQuery object\nthis[0]=elem;this.length=1;}return this;}// HANDLE: $(expr, $(...))\n}else if(!context||context.jquery){return(context||root).find(selector);// HANDLE: $(expr, context)\n// (which is just equivalent to: $(context).find(expr)\n}else{return this.constructor(context).find(selector);}// HANDLE: $(DOMElement)\n}else if(selector.nodeType){this[0]=selector;this.length=1;return this;// HANDLE: $(function)\n// Shortcut for document ready\n}else if(isFunction(selector)){return root.ready!==undefined?root.ready(selector):// Execute immediately if ready is not present\nselector(jQuery);}return jQuery.makeArray(selector,this);};// Give the init function the jQuery prototype for later instantiation\ninit.prototype=jQuery.fn;// Initialize central reference\nrootjQuery=jQuery(document);var rparentsprev=/^(?:parents|prev(?:Until|All))/,// Methods guaranteed to produce a unique set when starting from a unique set\nguaranteedUnique={children:true,contents:true,next:true,prev:true};jQuery.fn.extend({has:function(target){var targets=jQuery(target,this),l=targets.length;return this.filter(function(){var i=0;for(;i<l;i++){if(jQuery.contains(this,targets[i])){return true;}}});},closest:function(selectors,context){var cur,i=0,l=this.length,matched=[],targets=typeof selectors!==\"string\"&&jQuery(selectors);// Positional selectors never match, since there's no _selection_ context\nif(!rneedsContext.test(selectors)){for(;i<l;i++){for(cur=this[i];cur&&cur!==context;cur=cur.parentNode){// Always skip document fragments\nif(cur.nodeType<11&&(targets?targets.index(cur)>-1:// Don't pass non-elements to Sizzle\ncur.nodeType===1&&jQuery.find.matchesSelector(cur,selectors))){matched.push(cur);break;}}}}return this.pushStack(matched.length>1?jQuery.uniqueSort(matched):matched);},// Determine the position of an element within the set\nindex:function(elem){// No argument, return index in parent\nif(!elem){return this[0]&&this[0].parentNode?this.first().prevAll().length:-1;}// Index in selector\nif(typeof elem===\"string\"){return indexOf.call(jQuery(elem),this[0]);}// Locate the position of the desired element\nreturn indexOf.call(this,// If it receives a jQuery object, the first element is used\nelem.jquery?elem[0]:elem);},add:function(selector,context){return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(),jQuery(selector,context))));},addBack:function(selector){return this.add(selector==null?this.prevObject:this.prevObject.filter(selector));}});function sibling(cur,dir){while((cur=cur[dir])&&cur.nodeType!==1){}return cur;}jQuery.each({parent:function(elem){var parent=elem.parentNode;return parent&&parent.nodeType!==11?parent:null;},parents:function(elem){return dir(elem,\"parentNode\");},parentsUntil:function(elem,_i,until){return dir(elem,\"parentNode\",until);},next:function(elem){return sibling(elem,\"nextSibling\");},prev:function(elem){return sibling(elem,\"previousSibling\");},nextAll:function(elem){return dir(elem,\"nextSibling\");},prevAll:function(elem){return dir(elem,\"previousSibling\");},nextUntil:function(elem,_i,until){return dir(elem,\"nextSibling\",until);},prevUntil:function(elem,_i,until){return dir(elem,\"previousSibling\",until);},siblings:function(elem){return siblings((elem.parentNode||{}).firstChild,elem);},children:function(elem){return siblings(elem.firstChild);},contents:function(elem){if(elem.contentDocument!=null&&// Support: IE 11+\n// <object> elements with no `data` attribute has an object\n// `contentDocument` with a `null` prototype.\ngetProto(elem.contentDocument)){return elem.contentDocument;}// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only\n// Treat the template element as a regular one in browsers that\n// don't support it.\nif(nodeName(elem,\"template\")){elem=elem.content||elem;}return jQuery.merge([],elem.childNodes);}},function(name,fn){jQuery.fn[name]=function(until,selector){var matched=jQuery.map(this,fn,until);if(name.slice(-5)!==\"Until\"){selector=until;}if(selector&&typeof selector===\"string\"){matched=jQuery.filter(selector,matched);}if(this.length>1){// Remove duplicates\nif(!guaranteedUnique[name]){jQuery.uniqueSort(matched);}// Reverse order for parents* and prev-derivatives\nif(rparentsprev.test(name)){matched.reverse();}}return this.pushStack(matched);};});var rnothtmlwhite=/[^\\x20\\t\\r\\n\\f]+/g;// Convert String-formatted options into Object-formatted ones\nfunction createOptions(options){var object={};jQuery.each(options.match(rnothtmlwhite)||[],function(_,flag){object[flag]=true;});return object;}/*\n * Create a callback list using the following parameters:\n *\n *\toptions: an optional list of space-separated options that will change how\n *\t\t\tthe callback list behaves or a more traditional option object\n *\n * By default a callback list will act like an event callback list and can be\n * \"fired\" multiple times.\n *\n * Possible options:\n *\n *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n *\n *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n *\t\t\t\t\tvalues (like a Deferred)\n *\n *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n *\n *\tstopOnFalse:\tinterrupt callings when a callback returns false\n *\n */jQuery.Callbacks=function(options){// Convert options from String-formatted to Object-formatted if needed\n// (we check in cache first)\noptions=typeof options===\"string\"?createOptions(options):jQuery.extend({},options);var// Flag to know if list is currently firing\nfiring,// Last fire value for non-forgettable lists\nmemory,// Flag to know if list was already fired\nfired,// Flag to prevent firing\nlocked,// Actual callback list\nlist=[],// Queue of execution data for repeatable lists\nqueue=[],// Index of currently firing callback (modified by add/remove as needed)\nfiringIndex=-1,// Fire callbacks\nfire=function fire(){// Enforce single-firing\nlocked=locked||options.once;// Execute callbacks for all pending executions,\n// respecting firingIndex overrides and runtime changes\nfired=firing=true;for(;queue.length;firingIndex=-1){memory=queue.shift();while(++firingIndex<list.length){// Run callback and check for early termination\nif(list[firingIndex].apply(memory[0],memory[1])===false&&options.stopOnFalse){// Jump to end and forget the data so .add doesn't re-fire\nfiringIndex=list.length;memory=false;}}}// Forget the data if we're done with it\nif(!options.memory){memory=false;}firing=false;// Clean up if we're done firing for good\nif(locked){// Keep an empty list if we have data for future add calls\nif(memory){list=[];// Otherwise, this object is spent\n}else{list=\"\";}}},// Actual Callbacks object\nself={// Add a callback or a collection of callbacks to the list\nadd:function(){if(list){// If we have memory from a past run, we should fire after adding\nif(memory&&!firing){firingIndex=list.length-1;queue.push(memory);}(function add(args){jQuery.each(args,function(_,arg){if(isFunction(arg)){if(!options.unique||!self.has(arg)){list.push(arg);}}else if(arg&&arg.length&&toType(arg)!==\"string\"){// Inspect recursively\nadd(arg);}});})(arguments);if(memory&&!firing){fire();}}return this;},// Remove a callback from the list\nremove:function(){jQuery.each(arguments,function(_,arg){var index;while((index=jQuery.inArray(arg,list,index))>-1){list.splice(index,1);// Handle firing indexes\nif(index<=firingIndex){firingIndex--;}}});return this;},// Check if a given callback is in the list.\n// If no argument is given, return whether or not list has callbacks attached.\nhas:function(fn){return fn?jQuery.inArray(fn,list)>-1:list.length>0;},// Remove all callbacks from the list\nempty:function(){if(list){list=[];}return this;},// Disable .fire and .add\n// Abort any current/pending executions\n// Clear all callbacks and values\ndisable:function(){locked=queue=[];list=memory=\"\";return this;},disabled:function(){return!list;},// Disable .fire\n// Also disable .add unless we have memory (since it would have no effect)\n// Abort any pending executions\nlock:function(){locked=queue=[];if(!memory&&!firing){list=memory=\"\";}return this;},locked:function(){return!!locked;},// Call all callbacks with the given context and arguments\nfireWith:function(context,args){if(!locked){args=args||[];args=[context,args.slice?args.slice():args];queue.push(args);if(!firing){fire();}}return this;},// Call all the callbacks with the given arguments\nfire:function(){self.fireWith(this,arguments);return this;},// To know if the callbacks have already been called at least once\nfired:function(){return!!fired;}};return self;};function Identity(v){return v;}function Thrower(ex){throw ex;}function adoptValue(value,resolve,reject,noValue){var method;try{// Check for promise aspect first to privilege synchronous behavior\nif(value&&isFunction(method=value.promise)){method.call(value).done(resolve).fail(reject);// Other thenables\n}else if(value&&isFunction(method=value.then)){method.call(value,resolve,reject);// Other non-thenables\n}else{// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:\n// * false: [ value ].slice( 0 ) => resolve( value )\n// * true: [ value ].slice( 1 ) => resolve()\nresolve.apply(undefined,[value].slice(noValue));}// For Promises/A+, convert exceptions into rejections\n// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in\n// Deferred#then to conditionally suppress rejection.\n}catch(value){// Support: Android 4.0 only\n// Strict mode functions invoked without .call/.apply get global-object context\nreject.apply(undefined,[value]);}}jQuery.extend({Deferred:function(func){var tuples=[// action, add listener, callbacks,\n// ... .then handlers, argument index, [final state]\n[\"notify\",\"progress\",jQuery.Callbacks(\"memory\"),jQuery.Callbacks(\"memory\"),2],[\"resolve\",\"done\",jQuery.Callbacks(\"once memory\"),jQuery.Callbacks(\"once memory\"),0,\"resolved\"],[\"reject\",\"fail\",jQuery.Callbacks(\"once memory\"),jQuery.Callbacks(\"once memory\"),1,\"rejected\"]],state=\"pending\",promise={state:function(){return state;},always:function(){deferred.done(arguments).fail(arguments);return this;},\"catch\":function(fn){return promise.then(null,fn);},// Keep pipe for back-compat\npipe:function()/* fnDone, fnFail, fnProgress */{var fns=arguments;return jQuery.Deferred(function(newDefer){jQuery.each(tuples,function(_i,tuple){// Map tuples (progress, done, fail) to arguments (done, fail, progress)\nvar fn=isFunction(fns[tuple[4]])&&fns[tuple[4]];// deferred.progress(function() { bind to newDefer or newDefer.notify })\n// deferred.done(function() { bind to newDefer or newDefer.resolve })\n// deferred.fail(function() { bind to newDefer or newDefer.reject })\ndeferred[tuple[1]](function(){var returned=fn&&fn.apply(this,arguments);if(returned&&isFunction(returned.promise)){returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);}else{newDefer[tuple[0]+\"With\"](this,fn?[returned]:arguments);}});});fns=null;}).promise();},then:function(onFulfilled,onRejected,onProgress){var maxDepth=0;function resolve(depth,deferred,handler,special){return function(){var that=this,args=arguments,mightThrow=function mightThrow(){var returned,then;// Support: Promises/A+ section 2.3.3.3.3\n// https://promisesaplus.com/#point-59\n// Ignore double-resolution attempts\nif(depth<maxDepth){return;}returned=handler.apply(that,args);// Support: Promises/A+ section 2.3.1\n// https://promisesaplus.com/#point-48\nif(returned===deferred.promise()){throw new TypeError(\"Thenable self-resolution\");}// Support: Promises/A+ sections 2.3.3.1, 3.5\n// https://promisesaplus.com/#point-54\n// https://promisesaplus.com/#point-75\n// Retrieve `then` only once\nthen=returned&&(// Support: Promises/A+ section 2.3.4\n// https://promisesaplus.com/#point-64\n// Only check objects and functions for thenability\ntypeof returned===\"object\"||typeof returned===\"function\")&&returned.then;// Handle a returned thenable\nif(isFunction(then)){// Special processors (notify) just wait for resolution\nif(special){then.call(returned,resolve(maxDepth,deferred,Identity,special),resolve(maxDepth,deferred,Thrower,special));// Normal processors (resolve) also hook into progress\n}else{// ...and disregard older resolution values\nmaxDepth++;then.call(returned,resolve(maxDepth,deferred,Identity,special),resolve(maxDepth,deferred,Thrower,special),resolve(maxDepth,deferred,Identity,deferred.notifyWith));}// Handle all other returned values\n}else{// Only substitute handlers pass on context\n// and multiple values (non-spec behavior)\nif(handler!==Identity){that=undefined;args=[returned];}// Process the value(s)\n// Default process is resolve\n(special||deferred.resolveWith)(that,args);}},// Only normal processors (resolve) catch and reject exceptions\nprocess=special?mightThrow:function(){try{mightThrow();}catch(e){if(jQuery.Deferred.exceptionHook){jQuery.Deferred.exceptionHook(e,process.stackTrace);}// Support: Promises/A+ section 2.3.3.3.4.1\n// https://promisesaplus.com/#point-61\n// Ignore post-resolution exceptions\nif(depth+1>=maxDepth){// Only substitute handlers pass on context\n// and multiple values (non-spec behavior)\nif(handler!==Thrower){that=undefined;args=[e];}deferred.rejectWith(that,args);}}};// Support: Promises/A+ section 2.3.3.3.1\n// https://promisesaplus.com/#point-57\n// Re-resolve promises immediately to dodge false rejection from\n// subsequent errors\nif(depth){process();}else{// Call an optional hook to record the stack, in case of exception\n// since it's otherwise lost when execution goes async\nif(jQuery.Deferred.getStackHook){process.stackTrace=jQuery.Deferred.getStackHook();}window.setTimeout(process);}};}return jQuery.Deferred(function(newDefer){// progress_handlers.add( ... )\ntuples[0][3].add(resolve(0,newDefer,isFunction(onProgress)?onProgress:Identity,newDefer.notifyWith));// fulfilled_handlers.add( ... )\ntuples[1][3].add(resolve(0,newDefer,isFunction(onFulfilled)?onFulfilled:Identity));// rejected_handlers.add( ... )\ntuples[2][3].add(resolve(0,newDefer,isFunction(onRejected)?onRejected:Thrower));}).promise();},// Get a promise for this deferred\n// If obj is provided, the promise aspect is added to the object\npromise:function(obj){return obj!=null?jQuery.extend(obj,promise):promise;}},deferred={};// Add list-specific methods\njQuery.each(tuples,function(i,tuple){var list=tuple[2],stateString=tuple[5];// promise.progress = list.add\n// promise.done = list.add\n// promise.fail = list.add\npromise[tuple[1]]=list.add;// Handle state\nif(stateString){list.add(function(){// state = \"resolved\" (i.e., fulfilled)\n// state = \"rejected\"\nstate=stateString;},// rejected_callbacks.disable\n// fulfilled_callbacks.disable\ntuples[3-i][2].disable,// rejected_handlers.disable\n// fulfilled_handlers.disable\ntuples[3-i][3].disable,// progress_callbacks.lock\ntuples[0][2].lock,// progress_handlers.lock\ntuples[0][3].lock);}// progress_handlers.fire\n// fulfilled_handlers.fire\n// rejected_handlers.fire\nlist.add(tuple[3].fire);// deferred.notify = function() { deferred.notifyWith(...) }\n// deferred.resolve = function() { deferred.resolveWith(...) }\n// deferred.reject = function() { deferred.rejectWith(...) }\ndeferred[tuple[0]]=function(){deferred[tuple[0]+\"With\"](this===deferred?undefined:this,arguments);return this;};// deferred.notifyWith = list.fireWith\n// deferred.resolveWith = list.fireWith\n// deferred.rejectWith = list.fireWith\ndeferred[tuple[0]+\"With\"]=list.fireWith;});// Make the deferred a promise\npromise.promise(deferred);// Call given func if any\nif(func){func.call(deferred,deferred);}// All done!\nreturn deferred;},// Deferred helper\nwhen:function(singleValue){var// count of uncompleted subordinates\nremaining=arguments.length,// count of unprocessed arguments\ni=remaining,// subordinate fulfillment data\nresolveContexts=Array(i),resolveValues=slice.call(arguments),// the primary Deferred\nprimary=jQuery.Deferred(),// subordinate callback factory\nupdateFunc=function updateFunc(i){return function(value){resolveContexts[i]=this;resolveValues[i]=arguments.length>1?slice.call(arguments):value;if(! --remaining){primary.resolveWith(resolveContexts,resolveValues);}};};// Single- and empty arguments are adopted like Promise.resolve\nif(remaining<=1){adoptValue(singleValue,primary.done(updateFunc(i)).resolve,primary.reject,!remaining);// Use .then() to unwrap secondary thenables (cf. gh-3000)\nif(primary.state()===\"pending\"||isFunction(resolveValues[i]&&resolveValues[i].then)){return primary.then();}}// Multiple arguments are aggregated like Promise.all array elements\nwhile(i--){adoptValue(resolveValues[i],updateFunc(i),primary.reject);}return primary.promise();}});// These usually indicate a programmer mistake during development,\n// warn about them ASAP rather than swallowing them by default.\nvar rerrorNames=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;jQuery.Deferred.exceptionHook=function(error,stack){// Support: IE 8 - 9 only\n// Console exists when dev tools are open, which can happen at any time\nif(window.console&&window.console.warn&&error&&rerrorNames.test(error.name)){window.console.warn(\"jQuery.Deferred exception: \"+error.message,error.stack,stack);}};jQuery.readyException=function(error){window.setTimeout(function(){throw error;});};// The deferred used on DOM ready\nvar readyList=jQuery.Deferred();jQuery.fn.ready=function(fn){readyList.then(fn)// Wrap jQuery.readyException in a function so that the lookup\n// happens at the time of error handling instead of callback\n// registration.\n.catch(function(error){jQuery.readyException(error);});return this;};jQuery.extend({// Is the DOM ready to be used? Set to true once it occurs.\nisReady:false,// A counter to track how many items to wait for before\n// the ready event fires. See #6781\nreadyWait:1,// Handle when the DOM is ready\nready:function(wait){// Abort if there are pending holds or we're already ready\nif(wait===true?--jQuery.readyWait:jQuery.isReady){return;}// Remember that the DOM is ready\njQuery.isReady=true;// If a normal DOM Ready event fired, decrement, and wait if need be\nif(wait!==true&&--jQuery.readyWait>0){return;}// If there are functions bound, to execute\nreadyList.resolveWith(document,[jQuery]);}});jQuery.ready.then=readyList.then;// The ready event handler and self cleanup method\nfunction completed(){document.removeEventListener(\"DOMContentLoaded\",completed);window.removeEventListener(\"load\",completed);jQuery.ready();}// Catch cases where $(document).ready() is called\n// after the browser event has already occurred.\n// Support: IE <=9 - 10 only\n// Older IE sometimes signals \"interactive\" too soon\nif(document.readyState===\"complete\"||document.readyState!==\"loading\"&&!document.documentElement.doScroll){// Handle it asynchronously to allow scripts the opportunity to delay ready\nwindow.setTimeout(jQuery.ready);}else{// Use the handy event callback\ndocument.addEventListener(\"DOMContentLoaded\",completed);// A fallback to window.onload, that will always work\nwindow.addEventListener(\"load\",completed);}// Multifunctional method to get and set values of a collection\n// The value/s can optionally be executed if it's a function\nvar access=function access(elems,fn,key,value,chainable,emptyGet,raw){var i=0,len=elems.length,bulk=key==null;// Sets many values\nif(toType(key)===\"object\"){chainable=true;for(i in key){access(elems,fn,i,key[i],true,emptyGet,raw);}// Sets one value\n}else if(value!==undefined){chainable=true;if(!isFunction(value)){raw=true;}if(bulk){// Bulk operations run against the entire set\nif(raw){fn.call(elems,value);fn=null;// ...except when executing function values\n}else{bulk=fn;fn=function(elem,_key,value){return bulk.call(jQuery(elem),value);};}}if(fn){for(;i<len;i++){fn(elems[i],key,raw?value:value.call(elems[i],i,fn(elems[i],key)));}}}if(chainable){return elems;}// Gets\nif(bulk){return fn.call(elems);}return len?fn(elems[0],key):emptyGet;};// Matches dashed string for camelizing\nvar rmsPrefix=/^-ms-/,rdashAlpha=/-([a-z])/g;// Used by camelCase as callback to replace()\nfunction fcamelCase(_all,letter){return letter.toUpperCase();}// Convert dashed to camelCase; used by the css and data modules\n// Support: IE <=9 - 11, Edge 12 - 15\n// Microsoft forgot to hump their vendor prefix (#9572)\nfunction camelCase(string){return string.replace(rmsPrefix,\"ms-\").replace(rdashAlpha,fcamelCase);}var acceptData=function acceptData(owner){// Accepts only:\n//  - Node\n//    - Node.ELEMENT_NODE\n//    - Node.DOCUMENT_NODE\n//  - Object\n//    - Any\nreturn owner.nodeType===1||owner.nodeType===9||!+owner.nodeType;};function Data(){this.expando=jQuery.expando+Data.uid++;}Data.uid=1;Data.prototype={cache:function(owner){// Check if the owner object already has a cache\nvar value=owner[this.expando];// If not, create one\nif(!value){value={};// We can accept data for non-element nodes in modern browsers,\n// but we should not, see #8335.\n// Always return an empty object.\nif(acceptData(owner)){// If it is a node unlikely to be stringify-ed or looped over\n// use plain assignment\nif(owner.nodeType){owner[this.expando]=value;// Otherwise secure it in a non-enumerable property\n// configurable must be true to allow the property to be\n// deleted when data is removed\n}else{Object.defineProperty(owner,this.expando,{value:value,configurable:true});}}}return value;},set:function(owner,data,value){var prop,cache=this.cache(owner);// Handle: [ owner, key, value ] args\n// Always use camelCase key (gh-2257)\nif(typeof data===\"string\"){cache[camelCase(data)]=value;// Handle: [ owner, { properties } ] args\n}else{// Copy the properties one-by-one to the cache object\nfor(prop in data){cache[camelCase(prop)]=data[prop];}}return cache;},get:function(owner,key){return key===undefined?this.cache(owner):// Always use camelCase key (gh-2257)\nowner[this.expando]&&owner[this.expando][camelCase(key)];},access:function(owner,key,value){// In cases where either:\n//\n//   1. No key was specified\n//   2. A string key was specified, but no value provided\n//\n// Take the \"read\" path and allow the get method to determine\n// which value to return, respectively either:\n//\n//   1. The entire cache object\n//   2. The data stored at the key\n//\nif(key===undefined||key&&typeof key===\"string\"&&value===undefined){return this.get(owner,key);}// When the key is not a string, or both a key and value\n// are specified, set or extend (existing objects) with either:\n//\n//   1. An object of properties\n//   2. A key and value\n//\nthis.set(owner,key,value);// Since the \"set\" path can have two possible entry points\n// return the expected data based on which path was taken[*]\nreturn value!==undefined?value:key;},remove:function(owner,key){var i,cache=owner[this.expando];if(cache===undefined){return;}if(key!==undefined){// Support array or space separated string of keys\nif(Array.isArray(key)){// If key is an array of keys...\n// We always set camelCase keys, so remove that.\nkey=key.map(camelCase);}else{key=camelCase(key);// If a key with the spaces exists, use it.\n// Otherwise, create an array by matching non-whitespace\nkey=key in cache?[key]:key.match(rnothtmlwhite)||[];}i=key.length;while(i--){delete cache[key[i]];}}// Remove the expando if there's no more data\nif(key===undefined||jQuery.isEmptyObject(cache)){// Support: Chrome <=35 - 45\n// Webkit & Blink performance suffers when deleting properties\n// from DOM nodes, so set to undefined instead\n// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\nif(owner.nodeType){owner[this.expando]=undefined;}else{delete owner[this.expando];}}},hasData:function(owner){var cache=owner[this.expando];return cache!==undefined&&!jQuery.isEmptyObject(cache);}};var dataPriv=new Data();var dataUser=new Data();//\tImplementation Summary\n//\n//\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n//\t2. Improve the module's maintainability by reducing the storage\n//\t\tpaths to a single mechanism.\n//\t3. Use the same single mechanism to support \"private\" and \"user\" data.\n//\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\n//\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n//\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\nvar rbrace=/^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,rmultiDash=/[A-Z]/g;function getData(data){if(data===\"true\"){return true;}if(data===\"false\"){return false;}if(data===\"null\"){return null;}// Only convert to a number if it doesn't change the string\nif(data===+data+\"\"){return+data;}if(rbrace.test(data)){return JSON.parse(data);}return data;}function dataAttr(elem,key,data){var name;// If nothing was found internally, try to fetch any\n// data from the HTML5 data-* attribute\nif(data===undefined&&elem.nodeType===1){name=\"data-\"+key.replace(rmultiDash,\"-$&\").toLowerCase();data=elem.getAttribute(name);if(typeof data===\"string\"){try{data=getData(data);}catch(e){}// Make sure we set the data so it isn't changed later\ndataUser.set(elem,key,data);}else{data=undefined;}}return data;}jQuery.extend({hasData:function(elem){return dataUser.hasData(elem)||dataPriv.hasData(elem);},data:function(elem,name,data){return dataUser.access(elem,name,data);},removeData:function(elem,name){dataUser.remove(elem,name);},// TODO: Now that all calls to _data and _removeData have been replaced\n// with direct calls to dataPriv methods, these can be deprecated.\n_data:function(elem,name,data){return dataPriv.access(elem,name,data);},_removeData:function(elem,name){dataPriv.remove(elem,name);}});jQuery.fn.extend({data:function(key,value){var i,name,data,elem=this[0],attrs=elem&&elem.attributes;// Gets all values\nif(key===undefined){if(this.length){data=dataUser.get(elem);if(elem.nodeType===1&&!dataPriv.get(elem,\"hasDataAttrs\")){i=attrs.length;while(i--){// Support: IE 11 only\n// The attrs elements can be null (#14894)\nif(attrs[i]){name=attrs[i].name;if(name.indexOf(\"data-\")===0){name=camelCase(name.slice(5));dataAttr(elem,name,data[name]);}}}dataPriv.set(elem,\"hasDataAttrs\",true);}}return data;}// Sets multiple values\nif(typeof key===\"object\"){return this.each(function(){dataUser.set(this,key);});}return access(this,function(value){var data;// The calling jQuery object (element matches) is not empty\n// (and therefore has an element appears at this[ 0 ]) and the\n// `value` parameter was not undefined. An empty jQuery object\n// will result in `undefined` for elem = this[ 0 ] which will\n// throw an exception if an attempt to read a data cache is made.\nif(elem&&value===undefined){// Attempt to get data from the cache\n// The key will always be camelCased in Data\ndata=dataUser.get(elem,key);if(data!==undefined){return data;}// Attempt to \"discover\" the data in\n// HTML5 custom data-* attrs\ndata=dataAttr(elem,key);if(data!==undefined){return data;}// We tried really hard, but the data doesn't exist.\nreturn;}// Set the data...\nthis.each(function(){// We always store the camelCased key\ndataUser.set(this,key,value);});},null,value,arguments.length>1,null,true);},removeData:function(key){return this.each(function(){dataUser.remove(this,key);});}});jQuery.extend({queue:function(elem,type,data){var queue;if(elem){type=(type||\"fx\")+\"queue\";queue=dataPriv.get(elem,type);// Speed up dequeue by getting out quickly if this is just a lookup\nif(data){if(!queue||Array.isArray(data)){queue=dataPriv.access(elem,type,jQuery.makeArray(data));}else{queue.push(data);}}return queue||[];}},dequeue:function(elem,type){type=type||\"fx\";var queue=jQuery.queue(elem,type),startLength=queue.length,fn=queue.shift(),hooks=jQuery._queueHooks(elem,type),next=function next(){jQuery.dequeue(elem,type);};// If the fx queue is dequeued, always remove the progress sentinel\nif(fn===\"inprogress\"){fn=queue.shift();startLength--;}if(fn){// Add a progress sentinel to prevent the fx queue from being\n// automatically dequeued\nif(type===\"fx\"){queue.unshift(\"inprogress\");}// Clear up the last queue stop function\ndelete hooks.stop;fn.call(elem,next,hooks);}if(!startLength&&hooks){hooks.empty.fire();}},// Not public - generate a queueHooks object, or return the current one\n_queueHooks:function(elem,type){var key=type+\"queueHooks\";return dataPriv.get(elem,key)||dataPriv.access(elem,key,{empty:jQuery.Callbacks(\"once memory\").add(function(){dataPriv.remove(elem,[type+\"queue\",key]);})});}});jQuery.fn.extend({queue:function(type,data){var setter=2;if(typeof type!==\"string\"){data=type;type=\"fx\";setter--;}if(arguments.length<setter){return jQuery.queue(this[0],type);}return data===undefined?this:this.each(function(){var queue=jQuery.queue(this,type,data);// Ensure a hooks for this queue\njQuery._queueHooks(this,type);if(type===\"fx\"&&queue[0]!==\"inprogress\"){jQuery.dequeue(this,type);}});},dequeue:function(type){return this.each(function(){jQuery.dequeue(this,type);});},clearQueue:function(type){return this.queue(type||\"fx\",[]);},// Get a promise resolved when queues of a certain type\n// are emptied (fx is the type by default)\npromise:function(type,obj){var tmp,count=1,defer=jQuery.Deferred(),elements=this,i=this.length,resolve=function resolve(){if(! --count){defer.resolveWith(elements,[elements]);}};if(typeof type!==\"string\"){obj=type;type=undefined;}type=type||\"fx\";while(i--){tmp=dataPriv.get(elements[i],type+\"queueHooks\");if(tmp&&tmp.empty){count++;tmp.empty.add(resolve);}}resolve();return defer.promise(obj);}});var pnum=/[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source;var rcssNum=new RegExp(\"^(?:([+-])=|)(\"+pnum+\")([a-z%]*)$\",\"i\");var cssExpand=[\"Top\",\"Right\",\"Bottom\",\"Left\"];var documentElement=document.documentElement;var _isAttached=function isAttached(elem){return jQuery.contains(elem.ownerDocument,elem);},composed={composed:true};// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only\n// Check attachment across shadow DOM boundaries when possible (gh-3504)\n// Support: iOS 10.0-10.2 only\n// Early iOS 10 versions support `attachShadow` but not `getRootNode`,\n// leading to errors. We need to check for `getRootNode`.\nif(documentElement.getRootNode){_isAttached=function(elem){return jQuery.contains(elem.ownerDocument,elem)||elem.getRootNode(composed)===elem.ownerDocument;};}var isHiddenWithinTree=function isHiddenWithinTree(elem,el){// isHiddenWithinTree might be called from jQuery#filter function;\n// in that case, element will be second argument\nelem=el||elem;// Inline style trumps all\nreturn elem.style.display===\"none\"||elem.style.display===\"\"&&// Otherwise, check computed style\n// Support: Firefox <=43 - 45\n// Disconnected elements can have computed display: none, so first confirm that elem is\n// in the document.\n_isAttached(elem)&&jQuery.css(elem,\"display\")===\"none\";};function adjustCSS(elem,prop,valueParts,tween){var adjusted,scale,maxIterations=20,currentValue=tween?function(){return tween.cur();}:function(){return jQuery.css(elem,prop,\"\");},initial=currentValue(),unit=valueParts&&valueParts[3]||(jQuery.cssNumber[prop]?\"\":\"px\"),// Starting value computation is required for potential unit mismatches\ninitialInUnit=elem.nodeType&&(jQuery.cssNumber[prop]||unit!==\"px\"&&+initial)&&rcssNum.exec(jQuery.css(elem,prop));if(initialInUnit&&initialInUnit[3]!==unit){// Support: Firefox <=54\n// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)\ninitial=initial/2;// Trust units reported by jQuery.css\nunit=unit||initialInUnit[3];// Iteratively approximate from a nonzero starting point\ninitialInUnit=+initial||1;while(maxIterations--){// Evaluate and update our best guess (doubling guesses that zero out).\n// Finish if the scale equals or crosses 1 (making the old*new product non-positive).\njQuery.style(elem,prop,initialInUnit+unit);if((1-scale)*(1-(scale=currentValue()/initial||0.5))<=0){maxIterations=0;}initialInUnit=initialInUnit/scale;}initialInUnit=initialInUnit*2;jQuery.style(elem,prop,initialInUnit+unit);// Make sure we update the tween properties later on\nvalueParts=valueParts||[];}if(valueParts){initialInUnit=+initialInUnit||+initial||0;// Apply relative offset (+=/-=) if specified\nadjusted=valueParts[1]?initialInUnit+(valueParts[1]+1)*valueParts[2]:+valueParts[2];if(tween){tween.unit=unit;tween.start=initialInUnit;tween.end=adjusted;}}return adjusted;}var defaultDisplayMap={};function getDefaultDisplay(elem){var temp,doc=elem.ownerDocument,nodeName=elem.nodeName,display=defaultDisplayMap[nodeName];if(display){return display;}temp=doc.body.appendChild(doc.createElement(nodeName));display=jQuery.css(temp,\"display\");temp.parentNode.removeChild(temp);if(display===\"none\"){display=\"block\";}defaultDisplayMap[nodeName]=display;return display;}function showHide(elements,show){var display,elem,values=[],index=0,length=elements.length;// Determine new display value for elements that need to change\nfor(;index<length;index++){elem=elements[index];if(!elem.style){continue;}display=elem.style.display;if(show){// Since we force visibility upon cascade-hidden elements, an immediate (and slow)\n// check is required in this first loop unless we have a nonempty display value (either\n// inline or about-to-be-restored)\nif(display===\"none\"){values[index]=dataPriv.get(elem,\"display\")||null;if(!values[index]){elem.style.display=\"\";}}if(elem.style.display===\"\"&&isHiddenWithinTree(elem)){values[index]=getDefaultDisplay(elem);}}else{if(display!==\"none\"){values[index]=\"none\";// Remember what we're overwriting\ndataPriv.set(elem,\"display\",display);}}}// Set the display of the elements in a second loop to avoid constant reflow\nfor(index=0;index<length;index++){if(values[index]!=null){elements[index].style.display=values[index];}}return elements;}jQuery.fn.extend({show:function(){return showHide(this,true);},hide:function(){return showHide(this);},toggle:function(state){if(typeof state===\"boolean\"){return state?this.show():this.hide();}return this.each(function(){if(isHiddenWithinTree(this)){jQuery(this).show();}else{jQuery(this).hide();}});}});var rcheckableType=/^(?:checkbox|radio)$/i;var rtagName=/<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)/i;var rscriptType=/^$|^module$|\\/(?:java|ecma)script/i;(function(){var fragment=document.createDocumentFragment(),div=fragment.appendChild(document.createElement(\"div\")),input=document.createElement(\"input\");// Support: Android 4.0 - 4.3 only\n// Check state lost if the name is set (#11217)\n// Support: Windows Web Apps (WWA)\n// `name` and `type` must use .setAttribute for WWA (#14901)\ninput.setAttribute(\"type\",\"radio\");input.setAttribute(\"checked\",\"checked\");input.setAttribute(\"name\",\"t\");div.appendChild(input);// Support: Android <=4.1 only\n// Older WebKit doesn't clone checked state correctly in fragments\nsupport.checkClone=div.cloneNode(true).cloneNode(true).lastChild.checked;// Support: IE <=11 only\n// Make sure textarea (and checkbox) defaultValue is properly cloned\ndiv.innerHTML=\"<textarea>x</textarea>\";support.noCloneChecked=!!div.cloneNode(true).lastChild.defaultValue;// Support: IE <=9 only\n// IE <=9 replaces <option> tags with their contents when inserted outside of\n// the select element.\ndiv.innerHTML=\"<option></option>\";support.option=!!div.lastChild;})();// We have to close these tags to support XHTML (#13200)\nvar wrapMap={// XHTML parsers do not magically insert elements in the\n// same way that tag soup parsers do. So we cannot shorten\n// this by omitting <tbody> or other required elements.\nthead:[1,\"<table>\",\"</table>\"],col:[2,\"<table><colgroup>\",\"</colgroup></table>\"],tr:[2,\"<table><tbody>\",\"</tbody></table>\"],td:[3,\"<table><tbody><tr>\",\"</tr></tbody></table>\"],_default:[0,\"\",\"\"]};wrapMap.tbody=wrapMap.tfoot=wrapMap.colgroup=wrapMap.caption=wrapMap.thead;wrapMap.th=wrapMap.td;// Support: IE <=9 only\nif(!support.option){wrapMap.optgroup=wrapMap.option=[1,\"<select multiple='multiple'>\",\"</select>\"];}function getAll(context,tag){// Support: IE <=9 - 11 only\n// Use typeof to avoid zero-argument method invocation on host objects (#15151)\nvar ret;if(typeof context.getElementsByTagName!==\"undefined\"){ret=context.getElementsByTagName(tag||\"*\");}else if(typeof context.querySelectorAll!==\"undefined\"){ret=context.querySelectorAll(tag||\"*\");}else{ret=[];}if(tag===undefined||tag&&nodeName(context,tag)){return jQuery.merge([context],ret);}return ret;}// Mark scripts as having already been evaluated\nfunction setGlobalEval(elems,refElements){var i=0,l=elems.length;for(;i<l;i++){dataPriv.set(elems[i],\"globalEval\",!refElements||dataPriv.get(refElements[i],\"globalEval\"));}}var rhtml=/<|&#?\\w+;/;function buildFragment(elems,context,scripts,selection,ignored){var elem,tmp,tag,wrap,attached,j,fragment=context.createDocumentFragment(),nodes=[],i=0,l=elems.length;for(;i<l;i++){elem=elems[i];if(elem||elem===0){// Add nodes directly\nif(toType(elem)===\"object\"){// Support: Android <=4.0 only, PhantomJS 1 only\n// push.apply(_, arraylike) throws on ancient WebKit\njQuery.merge(nodes,elem.nodeType?[elem]:elem);// Convert non-html into a text node\n}else if(!rhtml.test(elem)){nodes.push(context.createTextNode(elem));// Convert html into DOM nodes\n}else{tmp=tmp||fragment.appendChild(context.createElement(\"div\"));// Deserialize a standard representation\ntag=(rtagName.exec(elem)||[\"\",\"\"])[1].toLowerCase();wrap=wrapMap[tag]||wrapMap._default;tmp.innerHTML=wrap[1]+jQuery.htmlPrefilter(elem)+wrap[2];// Descend through wrappers to the right content\nj=wrap[0];while(j--){tmp=tmp.lastChild;}// Support: Android <=4.0 only, PhantomJS 1 only\n// push.apply(_, arraylike) throws on ancient WebKit\njQuery.merge(nodes,tmp.childNodes);// Remember the top-level container\ntmp=fragment.firstChild;// Ensure the created nodes are orphaned (#12392)\ntmp.textContent=\"\";}}}// Remove wrapper from fragment\nfragment.textContent=\"\";i=0;while(elem=nodes[i++]){// Skip elements already in the context collection (trac-4087)\nif(selection&&jQuery.inArray(elem,selection)>-1){if(ignored){ignored.push(elem);}continue;}attached=_isAttached(elem);// Append to fragment\ntmp=getAll(fragment.appendChild(elem),\"script\");// Preserve script evaluation history\nif(attached){setGlobalEval(tmp);}// Capture executables\nif(scripts){j=0;while(elem=tmp[j++]){if(rscriptType.test(elem.type||\"\")){scripts.push(elem);}}}}return fragment;}var rtypenamespace=/^([^.]*)(?:\\.(.+)|)/;function returnTrue(){return true;}function returnFalse(){return false;}// Support: IE <=9 - 11+\n// focus() and blur() are asynchronous, except when they are no-op.\n// So expect focus to be synchronous when the element is already active,\n// and blur to be synchronous when the element is not already active.\n// (focus and blur are always synchronous in other supported browsers,\n// this just defines when we can count on it).\nfunction expectSync(elem,type){return elem===safeActiveElement()===(type===\"focus\");}// Support: IE <=9 only\n// Accessing document.activeElement can throw unexpectedly\n// https://bugs.jquery.com/ticket/13393\nfunction safeActiveElement(){try{return document.activeElement;}catch(err){}}function on(elem,types,selector,data,fn,one){var origFn,type;// Types can be a map of types/handlers\nif(typeof types===\"object\"){// ( types-Object, selector, data )\nif(typeof selector!==\"string\"){// ( types-Object, data )\ndata=data||selector;selector=undefined;}for(type in types){on(elem,type,selector,data,types[type],one);}return elem;}if(data==null&&fn==null){// ( types, fn )\nfn=selector;data=selector=undefined;}else if(fn==null){if(typeof selector===\"string\"){// ( types, selector, fn )\nfn=data;data=undefined;}else{// ( types, data, fn )\nfn=data;data=selector;selector=undefined;}}if(fn===false){fn=returnFalse;}else if(!fn){return elem;}if(one===1){origFn=fn;fn=function(event){// Can use an empty set, since event contains the info\njQuery().off(event);return origFn.apply(this,arguments);};// Use same guid so caller can remove using origFn\nfn.guid=origFn.guid||(origFn.guid=jQuery.guid++);}return elem.each(function(){jQuery.event.add(this,types,fn,data,selector);});}/*\n * Helper functions for managing events -- not part of the public interface.\n * Props to Dean Edwards' addEvent library for many of the ideas.\n */jQuery.event={global:{},add:function(elem,types,handler,data,selector){var handleObjIn,eventHandle,tmp,events,t,handleObj,special,handlers,type,namespaces,origType,elemData=dataPriv.get(elem);// Only attach events to objects that accept data\nif(!acceptData(elem)){return;}// Caller can pass in an object of custom data in lieu of the handler\nif(handler.handler){handleObjIn=handler;handler=handleObjIn.handler;selector=handleObjIn.selector;}// Ensure that invalid selectors throw exceptions at attach time\n// Evaluate against documentElement in case elem is a non-element node (e.g., document)\nif(selector){jQuery.find.matchesSelector(documentElement,selector);}// Make sure that the handler has a unique ID, used to find/remove it later\nif(!handler.guid){handler.guid=jQuery.guid++;}// Init the element's event structure and main handler, if this is the first\nif(!(events=elemData.events)){events=elemData.events=Object.create(null);}if(!(eventHandle=elemData.handle)){eventHandle=elemData.handle=function(e){// Discard the second event of a jQuery.event.trigger() and\n// when an event is called after a page has unloaded\nreturn typeof jQuery!==\"undefined\"&&jQuery.event.triggered!==e.type?jQuery.event.dispatch.apply(elem,arguments):undefined;};}// Handle multiple events separated by a space\ntypes=(types||\"\").match(rnothtmlwhite)||[\"\"];t=types.length;while(t--){tmp=rtypenamespace.exec(types[t])||[];type=origType=tmp[1];namespaces=(tmp[2]||\"\").split(\".\").sort();// There *must* be a type, no attaching namespace-only handlers\nif(!type){continue;}// If event changes its type, use the special event handlers for the changed type\nspecial=jQuery.event.special[type]||{};// If selector defined, determine special event api type, otherwise given type\ntype=(selector?special.delegateType:special.bindType)||type;// Update special based on newly reset type\nspecial=jQuery.event.special[type]||{};// handleObj is passed to all event handlers\nhandleObj=jQuery.extend({type:type,origType:origType,data:data,handler:handler,guid:handler.guid,selector:selector,needsContext:selector&&jQuery.expr.match.needsContext.test(selector),namespace:namespaces.join(\".\")},handleObjIn);// Init the event handler queue if we're the first\nif(!(handlers=events[type])){handlers=events[type]=[];handlers.delegateCount=0;// Only use addEventListener if the special events handler returns false\nif(!special.setup||special.setup.call(elem,data,namespaces,eventHandle)===false){if(elem.addEventListener){elem.addEventListener(type,eventHandle);}}}if(special.add){special.add.call(elem,handleObj);if(!handleObj.handler.guid){handleObj.handler.guid=handler.guid;}}// Add to the element's handler list, delegates in front\nif(selector){handlers.splice(handlers.delegateCount++,0,handleObj);}else{handlers.push(handleObj);}// Keep track of which events have ever been used, for event optimization\njQuery.event.global[type]=true;}},// Detach an event or set of events from an element\nremove:function(elem,types,handler,selector,mappedTypes){var j,origCount,tmp,events,t,handleObj,special,handlers,type,namespaces,origType,elemData=dataPriv.hasData(elem)&&dataPriv.get(elem);if(!elemData||!(events=elemData.events)){return;}// Once for each type.namespace in types; type may be omitted\ntypes=(types||\"\").match(rnothtmlwhite)||[\"\"];t=types.length;while(t--){tmp=rtypenamespace.exec(types[t])||[];type=origType=tmp[1];namespaces=(tmp[2]||\"\").split(\".\").sort();// Unbind all events (on this namespace, if provided) for the element\nif(!type){for(type in events){jQuery.event.remove(elem,type+types[t],handler,selector,true);}continue;}special=jQuery.event.special[type]||{};type=(selector?special.delegateType:special.bindType)||type;handlers=events[type]||[];tmp=tmp[2]&&new RegExp(\"(^|\\\\.)\"+namespaces.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\");// Remove matching events\norigCount=j=handlers.length;while(j--){handleObj=handlers[j];if((mappedTypes||origType===handleObj.origType)&&(!handler||handler.guid===handleObj.guid)&&(!tmp||tmp.test(handleObj.namespace))&&(!selector||selector===handleObj.selector||selector===\"**\"&&handleObj.selector)){handlers.splice(j,1);if(handleObj.selector){handlers.delegateCount--;}if(special.remove){special.remove.call(elem,handleObj);}}}// Remove generic event handler if we removed something and no more handlers exist\n// (avoids potential for endless recursion during removal of special event handlers)\nif(origCount&&!handlers.length){if(!special.teardown||special.teardown.call(elem,namespaces,elemData.handle)===false){jQuery.removeEvent(elem,type,elemData.handle);}delete events[type];}}// Remove data and the expando if it's no longer used\nif(jQuery.isEmptyObject(events)){dataPriv.remove(elem,\"handle events\");}},dispatch:function(nativeEvent){var i,j,ret,matched,handleObj,handlerQueue,args=new Array(arguments.length),// Make a writable jQuery.Event from the native event object\nevent=jQuery.event.fix(nativeEvent),handlers=(dataPriv.get(this,\"events\")||Object.create(null))[event.type]||[],special=jQuery.event.special[event.type]||{};// Use the fix-ed jQuery.Event rather than the (read-only) native event\nargs[0]=event;for(i=1;i<arguments.length;i++){args[i]=arguments[i];}event.delegateTarget=this;// Call the preDispatch hook for the mapped type, and let it bail if desired\nif(special.preDispatch&&special.preDispatch.call(this,event)===false){return;}// Determine handlers\nhandlerQueue=jQuery.event.handlers.call(this,event,handlers);// Run delegates first; they may want to stop propagation beneath us\ni=0;while((matched=handlerQueue[i++])&&!event.isPropagationStopped()){event.currentTarget=matched.elem;j=0;while((handleObj=matched.handlers[j++])&&!event.isImmediatePropagationStopped()){// If the event is namespaced, then each handler is only invoked if it is\n// specially universal or its namespaces are a superset of the event's.\nif(!event.rnamespace||handleObj.namespace===false||event.rnamespace.test(handleObj.namespace)){event.handleObj=handleObj;event.data=handleObj.data;ret=((jQuery.event.special[handleObj.origType]||{}).handle||handleObj.handler).apply(matched.elem,args);if(ret!==undefined){if((event.result=ret)===false){event.preventDefault();event.stopPropagation();}}}}}// Call the postDispatch hook for the mapped type\nif(special.postDispatch){special.postDispatch.call(this,event);}return event.result;},handlers:function(event,handlers){var i,handleObj,sel,matchedHandlers,matchedSelectors,handlerQueue=[],delegateCount=handlers.delegateCount,cur=event.target;// Find delegate handlers\nif(delegateCount&&// Support: IE <=9\n// Black-hole SVG <use> instance trees (trac-13180)\ncur.nodeType&&// Support: Firefox <=42\n// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)\n// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click\n// Support: IE 11 only\n// ...but not arrow key \"clicks\" of radio inputs, which can have `button` -1 (gh-2343)\n!(event.type===\"click\"&&event.button>=1)){for(;cur!==this;cur=cur.parentNode||this){// Don't check non-elements (#13208)\n// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)\nif(cur.nodeType===1&&!(event.type===\"click\"&&cur.disabled===true)){matchedHandlers=[];matchedSelectors={};for(i=0;i<delegateCount;i++){handleObj=handlers[i];// Don't conflict with Object.prototype properties (#13203)\nsel=handleObj.selector+\" \";if(matchedSelectors[sel]===undefined){matchedSelectors[sel]=handleObj.needsContext?jQuery(sel,this).index(cur)>-1:jQuery.find(sel,this,null,[cur]).length;}if(matchedSelectors[sel]){matchedHandlers.push(handleObj);}}if(matchedHandlers.length){handlerQueue.push({elem:cur,handlers:matchedHandlers});}}}}// Add the remaining (directly-bound) handlers\ncur=this;if(delegateCount<handlers.length){handlerQueue.push({elem:cur,handlers:handlers.slice(delegateCount)});}return handlerQueue;},addProp:function(name,hook){Object.defineProperty(jQuery.Event.prototype,name,{enumerable:true,configurable:true,get:isFunction(hook)?function(){if(this.originalEvent){return hook(this.originalEvent);}}:function(){if(this.originalEvent){return this.originalEvent[name];}},set:function(value){Object.defineProperty(this,name,{enumerable:true,configurable:true,writable:true,value:value});}});},fix:function(originalEvent){return originalEvent[jQuery.expando]?originalEvent:new jQuery.Event(originalEvent);},special:{load:{// Prevent triggered image.load events from bubbling to window.load\nnoBubble:true},click:{// Utilize native event to ensure correct state for checkable inputs\nsetup:function(data){// For mutual compressibility with _default, replace `this` access with a local var.\n// `|| data` is dead code meant only to preserve the variable through minification.\nvar el=this||data;// Claim the first handler\nif(rcheckableType.test(el.type)&&el.click&&nodeName(el,\"input\")){// dataPriv.set( el, \"click\", ... )\nleverageNative(el,\"click\",returnTrue);}// Return false to allow normal processing in the caller\nreturn false;},trigger:function(data){// For mutual compressibility with _default, replace `this` access with a local var.\n// `|| data` is dead code meant only to preserve the variable through minification.\nvar el=this||data;// Force setup before triggering a click\nif(rcheckableType.test(el.type)&&el.click&&nodeName(el,\"input\")){leverageNative(el,\"click\");}// Return non-false to allow normal event-path propagation\nreturn true;},// For cross-browser consistency, suppress native .click() on links\n// Also prevent it if we're currently inside a leveraged native-event stack\n_default:function(event){var target=event.target;return rcheckableType.test(target.type)&&target.click&&nodeName(target,\"input\")&&dataPriv.get(target,\"click\")||nodeName(target,\"a\");}},beforeunload:{postDispatch:function(event){// Support: Firefox 20+\n// Firefox doesn't alert if the returnValue field is not set.\nif(event.result!==undefined&&event.originalEvent){event.originalEvent.returnValue=event.result;}}}}};// Ensure the presence of an event listener that handles manually-triggered\n// synthetic events by interrupting progress until reinvoked in response to\n// *native* events that it fires directly, ensuring that state changes have\n// already occurred before other listeners are invoked.\nfunction leverageNative(el,type,expectSync){// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add\nif(!expectSync){if(dataPriv.get(el,type)===undefined){jQuery.event.add(el,type,returnTrue);}return;}// Register the controller as a special universal handler for all event namespaces\ndataPriv.set(el,type,false);jQuery.event.add(el,type,{namespace:false,handler:function(event){var notAsync,result,saved=dataPriv.get(this,type);if(event.isTrigger&1&&this[type]){// Interrupt processing of the outer synthetic .trigger()ed event\n// Saved data should be false in such cases, but might be a leftover capture object\n// from an async native handler (gh-4350)\nif(!saved.length){// Store arguments for use when handling the inner native event\n// There will always be at least one argument (an event object), so this array\n// will not be confused with a leftover capture object.\nsaved=slice.call(arguments);dataPriv.set(this,type,saved);// Trigger the native event and capture its result\n// Support: IE <=9 - 11+\n// focus() and blur() are asynchronous\nnotAsync=expectSync(this,type);this[type]();result=dataPriv.get(this,type);if(saved!==result||notAsync){dataPriv.set(this,type,false);}else{result={};}if(saved!==result){// Cancel the outer synthetic event\nevent.stopImmediatePropagation();event.preventDefault();// Support: Chrome 86+\n// In Chrome, if an element having a focusout handler is blurred by\n// clicking outside of it, it invokes the handler synchronously. If\n// that handler calls `.remove()` on the element, the data is cleared,\n// leaving `result` undefined. We need to guard against this.\nreturn result&&result.value;}// If this is an inner synthetic event for an event with a bubbling surrogate\n// (focus or blur), assume that the surrogate already propagated from triggering the\n// native event and prevent that from happening again here.\n// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the\n// bubbling surrogate propagates *after* the non-bubbling base), but that seems\n// less bad than duplication.\n}else if((jQuery.event.special[type]||{}).delegateType){event.stopPropagation();}// If this is a native event triggered above, everything is now in order\n// Fire an inner synthetic event with the original arguments\n}else if(saved.length){// ...and capture the result\ndataPriv.set(this,type,{value:jQuery.event.trigger(// Support: IE <=9 - 11+\n// Extend with the prototype to reset the above stopImmediatePropagation()\njQuery.extend(saved[0],jQuery.Event.prototype),saved.slice(1),this)});// Abort handling of the native event\nevent.stopImmediatePropagation();}}});}jQuery.removeEvent=function(elem,type,handle){// This \"if\" is needed for plain objects\nif(elem.removeEventListener){elem.removeEventListener(type,handle);}};jQuery.Event=function(src,props){// Allow instantiation without the 'new' keyword\nif(!(this instanceof jQuery.Event)){return new jQuery.Event(src,props);}// Event object\nif(src&&src.type){this.originalEvent=src;this.type=src.type;// Events bubbling up the document may have been marked as prevented\n// by a handler lower down the tree; reflect the correct value.\nthis.isDefaultPrevented=src.defaultPrevented||src.defaultPrevented===undefined&&// Support: Android <=2.3 only\nsrc.returnValue===false?returnTrue:returnFalse;// Create target properties\n// Support: Safari <=6 - 7 only\n// Target should not be a text node (#504, #13143)\nthis.target=src.target&&src.target.nodeType===3?src.target.parentNode:src.target;this.currentTarget=src.currentTarget;this.relatedTarget=src.relatedTarget;// Event type\n}else{this.type=src;}// Put explicitly provided properties onto the event object\nif(props){jQuery.extend(this,props);}// Create a timestamp if incoming event doesn't have one\nthis.timeStamp=src&&src.timeStamp||Date.now();// Mark it as fixed\nthis[jQuery.expando]=true;};// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\njQuery.Event.prototype={constructor:jQuery.Event,isDefaultPrevented:returnFalse,isPropagationStopped:returnFalse,isImmediatePropagationStopped:returnFalse,isSimulated:false,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=returnTrue;if(e&&!this.isSimulated){e.preventDefault();}},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=returnTrue;if(e&&!this.isSimulated){e.stopPropagation();}},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=returnTrue;if(e&&!this.isSimulated){e.stopImmediatePropagation();}this.stopPropagation();}};// Includes all common event props including KeyEvent and MouseEvent specific props\njQuery.each({altKey:true,bubbles:true,cancelable:true,changedTouches:true,ctrlKey:true,detail:true,eventPhase:true,metaKey:true,pageX:true,pageY:true,shiftKey:true,view:true,\"char\":true,code:true,charCode:true,key:true,keyCode:true,button:true,buttons:true,clientX:true,clientY:true,offsetX:true,offsetY:true,pointerId:true,pointerType:true,screenX:true,screenY:true,targetTouches:true,toElement:true,touches:true,which:true},jQuery.event.addProp);jQuery.each({focus:\"focusin\",blur:\"focusout\"},function(type,delegateType){jQuery.event.special[type]={// Utilize native event if possible so blur/focus sequence is correct\nsetup:function(){// Claim the first handler\n// dataPriv.set( this, \"focus\", ... )\n// dataPriv.set( this, \"blur\", ... )\nleverageNative(this,type,expectSync);// Return false to allow normal processing in the caller\nreturn false;},trigger:function(){// Force setup before trigger\nleverageNative(this,type);// Return non-false to allow normal event-path propagation\nreturn true;},// Suppress native focus or blur as it's already being fired\n// in leverageNative.\n_default:function(){return true;},delegateType:delegateType};});// Create mouseenter/leave events using mouseover/out and event-time checks\n// so that event delegation works in jQuery.\n// Do the same for pointerenter/pointerleave and pointerover/pointerout\n//\n// Support: Safari 7 only\n// Safari sends mouseenter too often; see:\n// https://bugs.chromium.org/p/chromium/issues/detail?id=470258\n// for the description of the bug (it existed in older Chrome versions as well).\njQuery.each({mouseenter:\"mouseover\",mouseleave:\"mouseout\",pointerenter:\"pointerover\",pointerleave:\"pointerout\"},function(orig,fix){jQuery.event.special[orig]={delegateType:fix,bindType:fix,handle:function(event){var ret,target=this,related=event.relatedTarget,handleObj=event.handleObj;// For mouseenter/leave call the handler if related is outside the target.\n// NB: No relatedTarget if the mouse left/entered the browser window\nif(!related||related!==target&&!jQuery.contains(target,related)){event.type=handleObj.origType;ret=handleObj.handler.apply(this,arguments);event.type=fix;}return ret;}};});jQuery.fn.extend({on:function(types,selector,data,fn){return on(this,types,selector,data,fn);},one:function(types,selector,data,fn){return on(this,types,selector,data,fn,1);},off:function(types,selector,fn){var handleObj,type;if(types&&types.preventDefault&&types.handleObj){// ( event )  dispatched jQuery.Event\nhandleObj=types.handleObj;jQuery(types.delegateTarget).off(handleObj.namespace?handleObj.origType+\".\"+handleObj.namespace:handleObj.origType,handleObj.selector,handleObj.handler);return this;}if(typeof types===\"object\"){// ( types-object [, selector] )\nfor(type in types){this.off(type,selector,types[type]);}return this;}if(selector===false||typeof selector===\"function\"){// ( types [, fn] )\nfn=selector;selector=undefined;}if(fn===false){fn=returnFalse;}return this.each(function(){jQuery.event.remove(this,types,fn,selector);});}});var// Support: IE <=10 - 11, Edge 12 - 13 only\n// In IE/Edge using regex groups here causes severe slowdowns.\n// See https://connect.microsoft.com/IE/feedback/details/1736512/\nrnoInnerhtml=/<script|<style|<link/i,// checked=\"checked\" or checked\nrchecked=/checked\\s*(?:[^=]|=\\s*.checked.)/i,rcleanScript=/^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g;// Prefer a tbody over its parent table for containing new rows\nfunction manipulationTarget(elem,content){if(nodeName(elem,\"table\")&&nodeName(content.nodeType!==11?content:content.firstChild,\"tr\")){return jQuery(elem).children(\"tbody\")[0]||elem;}return elem;}// Replace/restore the type attribute of script elements for safe DOM manipulation\nfunction disableScript(elem){elem.type=(elem.getAttribute(\"type\")!==null)+\"/\"+elem.type;return elem;}function restoreScript(elem){if((elem.type||\"\").slice(0,5)===\"true/\"){elem.type=elem.type.slice(5);}else{elem.removeAttribute(\"type\");}return elem;}function cloneCopyEvent(src,dest){var i,l,type,pdataOld,udataOld,udataCur,events;if(dest.nodeType!==1){return;}// 1. Copy private data: events, handlers, etc.\nif(dataPriv.hasData(src)){pdataOld=dataPriv.get(src);events=pdataOld.events;if(events){dataPriv.remove(dest,\"handle events\");for(type in events){for(i=0,l=events[type].length;i<l;i++){jQuery.event.add(dest,type,events[type][i]);}}}}// 2. Copy user data\nif(dataUser.hasData(src)){udataOld=dataUser.access(src);udataCur=jQuery.extend({},udataOld);dataUser.set(dest,udataCur);}}// Fix IE bugs, see support tests\nfunction fixInput(src,dest){var nodeName=dest.nodeName.toLowerCase();// Fails to persist the checked state of a cloned checkbox or radio button.\nif(nodeName===\"input\"&&rcheckableType.test(src.type)){dest.checked=src.checked;// Fails to return the selected option to the default selected state when cloning options\n}else if(nodeName===\"input\"||nodeName===\"textarea\"){dest.defaultValue=src.defaultValue;}}function domManip(collection,args,callback,ignored){// Flatten any nested arrays\nargs=flat(args);var fragment,first,scripts,hasScripts,node,doc,i=0,l=collection.length,iNoClone=l-1,value=args[0],valueIsFunction=isFunction(value);// We can't cloneNode fragments that contain checked, in WebKit\nif(valueIsFunction||l>1&&typeof value===\"string\"&&!support.checkClone&&rchecked.test(value)){return collection.each(function(index){var self=collection.eq(index);if(valueIsFunction){args[0]=value.call(this,index,self.html());}domManip(self,args,callback,ignored);});}if(l){fragment=buildFragment(args,collection[0].ownerDocument,false,collection,ignored);first=fragment.firstChild;if(fragment.childNodes.length===1){fragment=first;}// Require either new content or an interest in ignored elements to invoke the callback\nif(first||ignored){scripts=jQuery.map(getAll(fragment,\"script\"),disableScript);hasScripts=scripts.length;// Use the original fragment for the last item\n// instead of the first because it can end up\n// being emptied incorrectly in certain situations (#8070).\nfor(;i<l;i++){node=fragment;if(i!==iNoClone){node=jQuery.clone(node,true,true);// Keep references to cloned scripts for later restoration\nif(hasScripts){// Support: Android <=4.0 only, PhantomJS 1 only\n// push.apply(_, arraylike) throws on ancient WebKit\njQuery.merge(scripts,getAll(node,\"script\"));}}callback.call(collection[i],node,i);}if(hasScripts){doc=scripts[scripts.length-1].ownerDocument;// Reenable scripts\njQuery.map(scripts,restoreScript);// Evaluate executable scripts on first document insertion\nfor(i=0;i<hasScripts;i++){node=scripts[i];if(rscriptType.test(node.type||\"\")&&!dataPriv.access(node,\"globalEval\")&&jQuery.contains(doc,node)){if(node.src&&(node.type||\"\").toLowerCase()!==\"module\"){// Optional AJAX dependency, but won't run scripts if not present\nif(jQuery._evalUrl&&!node.noModule){jQuery._evalUrl(node.src,{nonce:node.nonce||node.getAttribute(\"nonce\")},doc);}}else{DOMEval(node.textContent.replace(rcleanScript,\"\"),node,doc);}}}}}}return collection;}function remove(elem,selector,keepData){var node,nodes=selector?jQuery.filter(selector,elem):elem,i=0;for(;(node=nodes[i])!=null;i++){if(!keepData&&node.nodeType===1){jQuery.cleanData(getAll(node));}if(node.parentNode){if(keepData&&_isAttached(node)){setGlobalEval(getAll(node,\"script\"));}node.parentNode.removeChild(node);}}return elem;}jQuery.extend({htmlPrefilter:function(html){return html;},clone:function(elem,dataAndEvents,deepDataAndEvents){var i,l,srcElements,destElements,clone=elem.cloneNode(true),inPage=_isAttached(elem);// Fix IE cloning issues\nif(!support.noCloneChecked&&(elem.nodeType===1||elem.nodeType===11)&&!jQuery.isXMLDoc(elem)){// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2\ndestElements=getAll(clone);srcElements=getAll(elem);for(i=0,l=srcElements.length;i<l;i++){fixInput(srcElements[i],destElements[i]);}}// Copy the events from the original to the clone\nif(dataAndEvents){if(deepDataAndEvents){srcElements=srcElements||getAll(elem);destElements=destElements||getAll(clone);for(i=0,l=srcElements.length;i<l;i++){cloneCopyEvent(srcElements[i],destElements[i]);}}else{cloneCopyEvent(elem,clone);}}// Preserve script evaluation history\ndestElements=getAll(clone,\"script\");if(destElements.length>0){setGlobalEval(destElements,!inPage&&getAll(elem,\"script\"));}// Return the cloned set\nreturn clone;},cleanData:function(elems){var data,elem,type,special=jQuery.event.special,i=0;for(;(elem=elems[i])!==undefined;i++){if(acceptData(elem)){if(data=elem[dataPriv.expando]){if(data.events){for(type in data.events){if(special[type]){jQuery.event.remove(elem,type);// This is a shortcut to avoid jQuery.event.remove's overhead\n}else{jQuery.removeEvent(elem,type,data.handle);}}}// Support: Chrome <=35 - 45+\n// Assign undefined instead of using delete, see Data#remove\nelem[dataPriv.expando]=undefined;}if(elem[dataUser.expando]){// Support: Chrome <=35 - 45+\n// Assign undefined instead of using delete, see Data#remove\nelem[dataUser.expando]=undefined;}}}}});jQuery.fn.extend({detach:function(selector){return remove(this,selector,true);},remove:function(selector){return remove(this,selector);},text:function(value){return access(this,function(value){return value===undefined?jQuery.text(this):this.empty().each(function(){if(this.nodeType===1||this.nodeType===11||this.nodeType===9){this.textContent=value;}});},null,value,arguments.length);},append:function(){return domManip(this,arguments,function(elem){if(this.nodeType===1||this.nodeType===11||this.nodeType===9){var target=manipulationTarget(this,elem);target.appendChild(elem);}});},prepend:function(){return domManip(this,arguments,function(elem){if(this.nodeType===1||this.nodeType===11||this.nodeType===9){var target=manipulationTarget(this,elem);target.insertBefore(elem,target.firstChild);}});},before:function(){return domManip(this,arguments,function(elem){if(this.parentNode){this.parentNode.insertBefore(elem,this);}});},after:function(){return domManip(this,arguments,function(elem){if(this.parentNode){this.parentNode.insertBefore(elem,this.nextSibling);}});},empty:function(){var elem,i=0;for(;(elem=this[i])!=null;i++){if(elem.nodeType===1){// Prevent memory leaks\njQuery.cleanData(getAll(elem,false));// Remove any remaining nodes\nelem.textContent=\"\";}}return this;},clone:function(dataAndEvents,deepDataAndEvents){dataAndEvents=dataAndEvents==null?false:dataAndEvents;deepDataAndEvents=deepDataAndEvents==null?dataAndEvents:deepDataAndEvents;return this.map(function(){return jQuery.clone(this,dataAndEvents,deepDataAndEvents);});},html:function(value){return access(this,function(value){var elem=this[0]||{},i=0,l=this.length;if(value===undefined&&elem.nodeType===1){return elem.innerHTML;}// See if we can take a shortcut and just use innerHTML\nif(typeof value===\"string\"&&!rnoInnerhtml.test(value)&&!wrapMap[(rtagName.exec(value)||[\"\",\"\"])[1].toLowerCase()]){value=jQuery.htmlPrefilter(value);try{for(;i<l;i++){elem=this[i]||{};// Remove element nodes and prevent memory leaks\nif(elem.nodeType===1){jQuery.cleanData(getAll(elem,false));elem.innerHTML=value;}}elem=0;// If using innerHTML throws an exception, use the fallback method\n}catch(e){}}if(elem){this.empty().append(value);}},null,value,arguments.length);},replaceWith:function(){var ignored=[];// Make the changes, replacing each non-ignored context element with the new content\nreturn domManip(this,arguments,function(elem){var parent=this.parentNode;if(jQuery.inArray(this,ignored)<0){jQuery.cleanData(getAll(this));if(parent){parent.replaceChild(elem,this);}}// Force callback invocation\n},ignored);}});jQuery.each({appendTo:\"append\",prependTo:\"prepend\",insertBefore:\"before\",insertAfter:\"after\",replaceAll:\"replaceWith\"},function(name,original){jQuery.fn[name]=function(selector){var elems,ret=[],insert=jQuery(selector),last=insert.length-1,i=0;for(;i<=last;i++){elems=i===last?this:this.clone(true);jQuery(insert[i])[original](elems);// Support: Android <=4.0 only, PhantomJS 1 only\n// .get() because push.apply(_, arraylike) throws on ancient WebKit\npush.apply(ret,elems.get());}return this.pushStack(ret);};});var rnumnonpx=new RegExp(\"^(\"+pnum+\")(?!px)[a-z%]+$\",\"i\");var getStyles=function getStyles(elem){// Support: IE <=11 only, Firefox <=30 (#15098, #14150)\n// IE throws on elements created in popups\n// FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\nvar view=elem.ownerDocument.defaultView;if(!view||!view.opener){view=window;}return view.getComputedStyle(elem);};var swap=function swap(elem,options,callback){var ret,name,old={};// Remember the old values, and insert the new ones\nfor(name in options){old[name]=elem.style[name];elem.style[name]=options[name];}ret=callback.call(elem);// Revert the old values\nfor(name in options){elem.style[name]=old[name];}return ret;};var rboxStyle=new RegExp(cssExpand.join(\"|\"),\"i\");(function(){// Executing both pixelPosition & boxSizingReliable tests require only one layout\n// so they're executed at the same time to save the second computation.\nfunction computeStyleTests(){// This is a singleton, we need to execute it only once\nif(!div){return;}container.style.cssText=\"position:absolute;left:-11111px;width:60px;\"+\"margin-top:1px;padding:0;border:0\";div.style.cssText=\"position:relative;display:block;box-sizing:border-box;overflow:scroll;\"+\"margin:auto;border:1px;padding:1px;\"+\"width:60%;top:1%\";documentElement.appendChild(container).appendChild(div);var divStyle=window.getComputedStyle(div);pixelPositionVal=divStyle.top!==\"1%\";// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44\nreliableMarginLeftVal=roundPixelMeasures(divStyle.marginLeft)===12;// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3\n// Some styles come back with percentage values, even though they shouldn't\ndiv.style.right=\"60%\";pixelBoxStylesVal=roundPixelMeasures(divStyle.right)===36;// Support: IE 9 - 11 only\n// Detect misreporting of content dimensions for box-sizing:border-box elements\nboxSizingReliableVal=roundPixelMeasures(divStyle.width)===36;// Support: IE 9 only\n// Detect overflow:scroll screwiness (gh-3699)\n// Support: Chrome <=64\n// Don't get tricked when zoom affects offsetWidth (gh-4029)\ndiv.style.position=\"absolute\";scrollboxSizeVal=roundPixelMeasures(div.offsetWidth/3)===12;documentElement.removeChild(container);// Nullify the div so it wouldn't be stored in the memory and\n// it will also be a sign that checks already performed\ndiv=null;}function roundPixelMeasures(measure){return Math.round(parseFloat(measure));}var pixelPositionVal,boxSizingReliableVal,scrollboxSizeVal,pixelBoxStylesVal,reliableTrDimensionsVal,reliableMarginLeftVal,container=document.createElement(\"div\"),div=document.createElement(\"div\");// Finish early in limited (non-browser) environments\nif(!div.style){return;}// Support: IE <=9 - 11 only\n// Style of cloned element affects source element cloned (#8908)\ndiv.style.backgroundClip=\"content-box\";div.cloneNode(true).style.backgroundClip=\"\";support.clearCloneStyle=div.style.backgroundClip===\"content-box\";jQuery.extend(support,{boxSizingReliable:function(){computeStyleTests();return boxSizingReliableVal;},pixelBoxStyles:function(){computeStyleTests();return pixelBoxStylesVal;},pixelPosition:function(){computeStyleTests();return pixelPositionVal;},reliableMarginLeft:function(){computeStyleTests();return reliableMarginLeftVal;},scrollboxSize:function(){computeStyleTests();return scrollboxSizeVal;},// Support: IE 9 - 11+, Edge 15 - 18+\n// IE/Edge misreport `getComputedStyle` of table rows with width/height\n// set in CSS while `offset*` properties report correct values.\n// Behavior in IE 9 is more subtle than in newer versions & it passes\n// some versions of this test; make sure not to make it pass there!\n//\n// Support: Firefox 70+\n// Only Firefox includes border widths\n// in computed dimensions. (gh-4529)\nreliableTrDimensions:function(){var table,tr,trChild,trStyle;if(reliableTrDimensionsVal==null){table=document.createElement(\"table\");tr=document.createElement(\"tr\");trChild=document.createElement(\"div\");table.style.cssText=\"position:absolute;left:-11111px;border-collapse:separate\";tr.style.cssText=\"border:1px solid\";// Support: Chrome 86+\n// Height set through cssText does not get applied.\n// Computed height then comes back as 0.\ntr.style.height=\"1px\";trChild.style.height=\"9px\";// Support: Android 8 Chrome 86+\n// In our bodyBackground.html iframe,\n// display for all div elements is set to \"inline\",\n// which causes a problem only in Android 8 Chrome 86.\n// Ensuring the div is display: block\n// gets around this issue.\ntrChild.style.display=\"block\";documentElement.appendChild(table).appendChild(tr).appendChild(trChild);trStyle=window.getComputedStyle(tr);reliableTrDimensionsVal=parseInt(trStyle.height,10)+parseInt(trStyle.borderTopWidth,10)+parseInt(trStyle.borderBottomWidth,10)===tr.offsetHeight;documentElement.removeChild(table);}return reliableTrDimensionsVal;}});})();function curCSS(elem,name,computed){var width,minWidth,maxWidth,ret,// Support: Firefox 51+\n// Retrieving style before computed somehow\n// fixes an issue with getting wrong values\n// on detached elements\nstyle=elem.style;computed=computed||getStyles(elem);// getPropertyValue is needed for:\n//   .css('filter') (IE 9 only, #12537)\n//   .css('--customProperty) (#3144)\nif(computed){ret=computed.getPropertyValue(name)||computed[name];if(ret===\"\"&&!_isAttached(elem)){ret=jQuery.style(elem,name);}// A tribute to the \"awesome hack by Dean Edwards\"\n// Android Browser returns percentage for some values,\n// but width seems to be reliably pixels.\n// This is against the CSSOM draft spec:\n// https://drafts.csswg.org/cssom/#resolved-values\nif(!support.pixelBoxStyles()&&rnumnonpx.test(ret)&&rboxStyle.test(name)){// Remember the original values\nwidth=style.width;minWidth=style.minWidth;maxWidth=style.maxWidth;// Put in the new values to get a computed value out\nstyle.minWidth=style.maxWidth=style.width=ret;ret=computed.width;// Revert the changed values\nstyle.width=width;style.minWidth=minWidth;style.maxWidth=maxWidth;}}return ret!==undefined?// Support: IE <=9 - 11 only\n// IE returns zIndex value as an integer.\nret+\"\":ret;}function addGetHookIf(conditionFn,hookFn){// Define the hook, we'll check on the first run if it's really needed.\nreturn{get:function(){if(conditionFn()){// Hook not needed (or it's not possible to use it due\n// to missing dependency), remove it.\ndelete this.get;return;}// Hook needed; redefine it so that the support test is not executed again.\nreturn(this.get=hookFn).apply(this,arguments);}};}var cssPrefixes=[\"Webkit\",\"Moz\",\"ms\"],emptyStyle=document.createElement(\"div\").style,vendorProps={};// Return a vendor-prefixed property or undefined\nfunction vendorPropName(name){// Check for vendor prefixed names\nvar capName=name[0].toUpperCase()+name.slice(1),i=cssPrefixes.length;while(i--){name=cssPrefixes[i]+capName;if(name in emptyStyle){return name;}}}// Return a potentially-mapped jQuery.cssProps or vendor prefixed property\nfunction finalPropName(name){var final=jQuery.cssProps[name]||vendorProps[name];if(final){return final;}if(name in emptyStyle){return name;}return vendorProps[name]=vendorPropName(name)||name;}var// Swappable if display is none or starts with table\n// except \"table\", \"table-cell\", or \"table-caption\"\n// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\nrdisplayswap=/^(none|table(?!-c[ea]).+)/,rcustomProp=/^--/,cssShow={position:\"absolute\",visibility:\"hidden\",display:\"block\"},cssNormalTransform={letterSpacing:\"0\",fontWeight:\"400\"};function setPositiveNumber(_elem,value,subtract){// Any relative (+/-) values have already been\n// normalized at this point\nvar matches=rcssNum.exec(value);return matches?// Guard against undefined \"subtract\", e.g., when used as in cssHooks\nMath.max(0,matches[2]-(subtract||0))+(matches[3]||\"px\"):value;}function boxModelAdjustment(elem,dimension,box,isBorderBox,styles,computedVal){var i=dimension===\"width\"?1:0,extra=0,delta=0;// Adjustment may not be necessary\nif(box===(isBorderBox?\"border\":\"content\")){return 0;}for(;i<4;i+=2){// Both box models exclude margin\nif(box===\"margin\"){delta+=jQuery.css(elem,box+cssExpand[i],true,styles);}// If we get here with a content-box, we're seeking \"padding\" or \"border\" or \"margin\"\nif(!isBorderBox){// Add padding\ndelta+=jQuery.css(elem,\"padding\"+cssExpand[i],true,styles);// For \"border\" or \"margin\", add border\nif(box!==\"padding\"){delta+=jQuery.css(elem,\"border\"+cssExpand[i]+\"Width\",true,styles);// But still keep track of it otherwise\n}else{extra+=jQuery.css(elem,\"border\"+cssExpand[i]+\"Width\",true,styles);}// If we get here with a border-box (content + padding + border), we're seeking \"content\" or\n// \"padding\" or \"margin\"\n}else{// For \"content\", subtract padding\nif(box===\"content\"){delta-=jQuery.css(elem,\"padding\"+cssExpand[i],true,styles);}// For \"content\" or \"padding\", subtract border\nif(box!==\"margin\"){delta-=jQuery.css(elem,\"border\"+cssExpand[i]+\"Width\",true,styles);}}}// Account for positive content-box scroll gutter when requested by providing computedVal\nif(!isBorderBox&&computedVal>=0){// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border\n// Assuming integer scroll gutter, subtract the rest and round down\ndelta+=Math.max(0,Math.ceil(elem[\"offset\"+dimension[0].toUpperCase()+dimension.slice(1)]-computedVal-delta-extra-0.5// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter\n// Use an explicit zero to avoid NaN (gh-3964)\n))||0;}return delta;}function getWidthOrHeight(elem,dimension,extra){// Start with computed style\nvar styles=getStyles(elem),// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).\n// Fake content-box until we know it's needed to know the true value.\nboxSizingNeeded=!support.boxSizingReliable()||extra,isBorderBox=boxSizingNeeded&&jQuery.css(elem,\"boxSizing\",false,styles)===\"border-box\",valueIsBorderBox=isBorderBox,val=curCSS(elem,dimension,styles),offsetProp=\"offset\"+dimension[0].toUpperCase()+dimension.slice(1);// Support: Firefox <=54\n// Return a confounding non-pixel value or feign ignorance, as appropriate.\nif(rnumnonpx.test(val)){if(!extra){return val;}val=\"auto\";}// Support: IE 9 - 11 only\n// Use offsetWidth/offsetHeight for when box sizing is unreliable.\n// In those cases, the computed value can be trusted to be border-box.\nif((!support.boxSizingReliable()&&isBorderBox||// Support: IE 10 - 11+, Edge 15 - 18+\n// IE/Edge misreport `getComputedStyle` of table rows with width/height\n// set in CSS while `offset*` properties report correct values.\n// Interestingly, in some cases IE 9 doesn't suffer from this issue.\n!support.reliableTrDimensions()&&nodeName(elem,\"tr\")||// Fall back to offsetWidth/offsetHeight when value is \"auto\"\n// This happens for inline elements with no explicit setting (gh-3571)\nval===\"auto\"||// Support: Android <=4.1 - 4.3 only\n// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)\n!parseFloat(val)&&jQuery.css(elem,\"display\",false,styles)===\"inline\")&&// Make sure the element is visible & connected\nelem.getClientRects().length){isBorderBox=jQuery.css(elem,\"boxSizing\",false,styles)===\"border-box\";// Where available, offsetWidth/offsetHeight approximate border box dimensions.\n// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the\n// retrieved value as a content box dimension.\nvalueIsBorderBox=offsetProp in elem;if(valueIsBorderBox){val=elem[offsetProp];}}// Normalize \"\" and auto\nval=parseFloat(val)||0;// Adjust for the element's box model\nreturn val+boxModelAdjustment(elem,dimension,extra||(isBorderBox?\"border\":\"content\"),valueIsBorderBox,styles,// Provide the current computed size to request scroll gutter calculation (gh-3589)\nval)+\"px\";}jQuery.extend({// Add in style property hooks for overriding the default\n// behavior of getting and setting a style property\ncssHooks:{opacity:{get:function(elem,computed){if(computed){// We should always get a number back from opacity\nvar ret=curCSS(elem,\"opacity\");return ret===\"\"?\"1\":ret;}}}},// Don't automatically add \"px\" to these possibly-unitless properties\ncssNumber:{\"animationIterationCount\":true,\"columnCount\":true,\"fillOpacity\":true,\"flexGrow\":true,\"flexShrink\":true,\"fontWeight\":true,\"gridArea\":true,\"gridColumn\":true,\"gridColumnEnd\":true,\"gridColumnStart\":true,\"gridRow\":true,\"gridRowEnd\":true,\"gridRowStart\":true,\"lineHeight\":true,\"opacity\":true,\"order\":true,\"orphans\":true,\"widows\":true,\"zIndex\":true,\"zoom\":true},// Add in properties whose names you wish to fix before\n// setting or getting the value\ncssProps:{},// Get and set the style property on a DOM Node\nstyle:function(elem,name,value,extra){// Don't set styles on text and comment nodes\nif(!elem||elem.nodeType===3||elem.nodeType===8||!elem.style){return;}// Make sure that we're working with the right name\nvar ret,type,hooks,origName=camelCase(name),isCustomProp=rcustomProp.test(name),style=elem.style;// Make sure that we're working with the right name. We don't\n// want to query the value if it is a CSS custom property\n// since they are user-defined.\nif(!isCustomProp){name=finalPropName(origName);}// Gets hook for the prefixed version, then unprefixed version\nhooks=jQuery.cssHooks[name]||jQuery.cssHooks[origName];// Check if we're setting a value\nif(value!==undefined){type=typeof value;// Convert \"+=\" or \"-=\" to relative numbers (#7345)\nif(type===\"string\"&&(ret=rcssNum.exec(value))&&ret[1]){value=adjustCSS(elem,name,ret);// Fixes bug #9237\ntype=\"number\";}// Make sure that null and NaN values aren't set (#7116)\nif(value==null||value!==value){return;}// If a number was passed in, add the unit (except for certain CSS properties)\n// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append\n// \"px\" to a few hardcoded values.\nif(type===\"number\"&&!isCustomProp){value+=ret&&ret[3]||(jQuery.cssNumber[origName]?\"\":\"px\");}// background-* props affect original clone's values\nif(!support.clearCloneStyle&&value===\"\"&&name.indexOf(\"background\")===0){style[name]=\"inherit\";}// If a hook was provided, use that value, otherwise just set the specified value\nif(!hooks||!(\"set\"in hooks)||(value=hooks.set(elem,value,extra))!==undefined){if(isCustomProp){style.setProperty(name,value);}else{style[name]=value;}}}else{// If a hook was provided get the non-computed value from there\nif(hooks&&\"get\"in hooks&&(ret=hooks.get(elem,false,extra))!==undefined){return ret;}// Otherwise just get the value from the style object\nreturn style[name];}},css:function(elem,name,extra,styles){var val,num,hooks,origName=camelCase(name),isCustomProp=rcustomProp.test(name);// Make sure that we're working with the right name. We don't\n// want to modify the value if it is a CSS custom property\n// since they are user-defined.\nif(!isCustomProp){name=finalPropName(origName);}// Try prefixed name followed by the unprefixed name\nhooks=jQuery.cssHooks[name]||jQuery.cssHooks[origName];// If a hook was provided get the computed value from there\nif(hooks&&\"get\"in hooks){val=hooks.get(elem,true,extra);}// Otherwise, if a way to get the computed value exists, use that\nif(val===undefined){val=curCSS(elem,name,styles);}// Convert \"normal\" to computed value\nif(val===\"normal\"&&name in cssNormalTransform){val=cssNormalTransform[name];}// Make numeric if forced or a qualifier was provided and val looks numeric\nif(extra===\"\"||extra){num=parseFloat(val);return extra===true||isFinite(num)?num||0:val;}return val;}});jQuery.each([\"height\",\"width\"],function(_i,dimension){jQuery.cssHooks[dimension]={get:function(elem,computed,extra){if(computed){// Certain elements can have dimension info if we invisibly show them\n// but it must have a current display style that would benefit\nreturn rdisplayswap.test(jQuery.css(elem,\"display\"))&&(// Support: Safari 8+\n// Table columns in Safari have non-zero offsetWidth & zero\n// getBoundingClientRect().width unless display is changed.\n// Support: IE <=11 only\n// Running getBoundingClientRect on a disconnected node\n// in IE throws an error.\n!elem.getClientRects().length||!elem.getBoundingClientRect().width)?swap(elem,cssShow,function(){return getWidthOrHeight(elem,dimension,extra);}):getWidthOrHeight(elem,dimension,extra);}},set:function(elem,value,extra){var matches,styles=getStyles(elem),// Only read styles.position if the test has a chance to fail\n// to avoid forcing a reflow.\nscrollboxSizeBuggy=!support.scrollboxSize()&&styles.position===\"absolute\",// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)\nboxSizingNeeded=scrollboxSizeBuggy||extra,isBorderBox=boxSizingNeeded&&jQuery.css(elem,\"boxSizing\",false,styles)===\"border-box\",subtract=extra?boxModelAdjustment(elem,dimension,extra,isBorderBox,styles):0;// Account for unreliable border-box dimensions by comparing offset* to computed and\n// faking a content-box to get border and padding (gh-3699)\nif(isBorderBox&&scrollboxSizeBuggy){subtract-=Math.ceil(elem[\"offset\"+dimension[0].toUpperCase()+dimension.slice(1)]-parseFloat(styles[dimension])-boxModelAdjustment(elem,dimension,\"border\",false,styles)-0.5);}// Convert to pixels if value adjustment is needed\nif(subtract&&(matches=rcssNum.exec(value))&&(matches[3]||\"px\")!==\"px\"){elem.style[dimension]=value;value=jQuery.css(elem,dimension);}return setPositiveNumber(elem,value,subtract);}};});jQuery.cssHooks.marginLeft=addGetHookIf(support.reliableMarginLeft,function(elem,computed){if(computed){return(parseFloat(curCSS(elem,\"marginLeft\"))||elem.getBoundingClientRect().left-swap(elem,{marginLeft:0},function(){return elem.getBoundingClientRect().left;}))+\"px\";}});// These hooks are used by animate to expand properties\njQuery.each({margin:\"\",padding:\"\",border:\"Width\"},function(prefix,suffix){jQuery.cssHooks[prefix+suffix]={expand:function(value){var i=0,expanded={},// Assumes a single number if not a string\nparts=typeof value===\"string\"?value.split(\" \"):[value];for(;i<4;i++){expanded[prefix+cssExpand[i]+suffix]=parts[i]||parts[i-2]||parts[0];}return expanded;}};if(prefix!==\"margin\"){jQuery.cssHooks[prefix+suffix].set=setPositiveNumber;}});jQuery.fn.extend({css:function(name,value){return access(this,function(elem,name,value){var styles,len,map={},i=0;if(Array.isArray(name)){styles=getStyles(elem);len=name.length;for(;i<len;i++){map[name[i]]=jQuery.css(elem,name[i],false,styles);}return map;}return value!==undefined?jQuery.style(elem,name,value):jQuery.css(elem,name);},name,value,arguments.length>1);}});function Tween(elem,options,prop,end,easing){return new Tween.prototype.init(elem,options,prop,end,easing);}jQuery.Tween=Tween;Tween.prototype={constructor:Tween,init:function(elem,options,prop,end,easing,unit){this.elem=elem;this.prop=prop;this.easing=easing||jQuery.easing._default;this.options=options;this.start=this.now=this.cur();this.end=end;this.unit=unit||(jQuery.cssNumber[prop]?\"\":\"px\");},cur:function(){var hooks=Tween.propHooks[this.prop];return hooks&&hooks.get?hooks.get(this):Tween.propHooks._default.get(this);},run:function(percent){var eased,hooks=Tween.propHooks[this.prop];if(this.options.duration){this.pos=eased=jQuery.easing[this.easing](percent,this.options.duration*percent,0,1,this.options.duration);}else{this.pos=eased=percent;}this.now=(this.end-this.start)*eased+this.start;if(this.options.step){this.options.step.call(this.elem,this.now,this);}if(hooks&&hooks.set){hooks.set(this);}else{Tween.propHooks._default.set(this);}return this;}};Tween.prototype.init.prototype=Tween.prototype;Tween.propHooks={_default:{get:function(tween){var result;// Use a property on the element directly when it is not a DOM element,\n// or when there is no matching style property that exists.\nif(tween.elem.nodeType!==1||tween.elem[tween.prop]!=null&&tween.elem.style[tween.prop]==null){return tween.elem[tween.prop];}// Passing an empty string as a 3rd parameter to .css will automatically\n// attempt a parseFloat and fallback to a string if the parse fails.\n// Simple values such as \"10px\" are parsed to Float;\n// complex values such as \"rotate(1rad)\" are returned as-is.\nresult=jQuery.css(tween.elem,tween.prop,\"\");// Empty strings, null, undefined and \"auto\" are converted to 0.\nreturn!result||result===\"auto\"?0:result;},set:function(tween){// Use step hook for back compat.\n// Use cssHook if its there.\n// Use .style if available and use plain properties where available.\nif(jQuery.fx.step[tween.prop]){jQuery.fx.step[tween.prop](tween);}else if(tween.elem.nodeType===1&&(jQuery.cssHooks[tween.prop]||tween.elem.style[finalPropName(tween.prop)]!=null)){jQuery.style(tween.elem,tween.prop,tween.now+tween.unit);}else{tween.elem[tween.prop]=tween.now;}}}};// Support: IE <=9 only\n// Panic based approach to setting things on disconnected nodes\nTween.propHooks.scrollTop=Tween.propHooks.scrollLeft={set:function(tween){if(tween.elem.nodeType&&tween.elem.parentNode){tween.elem[tween.prop]=tween.now;}}};jQuery.easing={linear:function(p){return p;},swing:function(p){return 0.5-Math.cos(p*Math.PI)/2;},_default:\"swing\"};jQuery.fx=Tween.prototype.init;// Back compat <1.8 extension point\njQuery.fx.step={};var fxNow,inProgress,rfxtypes=/^(?:toggle|show|hide)$/,rrun=/queueHooks$/;function schedule(){if(inProgress){if(document.hidden===false&&window.requestAnimationFrame){window.requestAnimationFrame(schedule);}else{window.setTimeout(schedule,jQuery.fx.interval);}jQuery.fx.tick();}}// Animations created synchronously will run synchronously\nfunction createFxNow(){window.setTimeout(function(){fxNow=undefined;});return fxNow=Date.now();}// Generate parameters to create a standard animation\nfunction genFx(type,includeWidth){var which,i=0,attrs={height:type};// If we include width, step value is 1 to do all cssExpand values,\n// otherwise step value is 2 to skip over Left and Right\nincludeWidth=includeWidth?1:0;for(;i<4;i+=2-includeWidth){which=cssExpand[i];attrs[\"margin\"+which]=attrs[\"padding\"+which]=type;}if(includeWidth){attrs.opacity=attrs.width=type;}return attrs;}function createTween(value,prop,animation){var tween,collection=(Animation.tweeners[prop]||[]).concat(Animation.tweeners[\"*\"]),index=0,length=collection.length;for(;index<length;index++){if(tween=collection[index].call(animation,prop,value)){// We're done with this property\nreturn tween;}}}function defaultPrefilter(elem,props,opts){var prop,value,toggle,hooks,oldfire,propTween,restoreDisplay,display,isBox=\"width\"in props||\"height\"in props,anim=this,orig={},style=elem.style,hidden=elem.nodeType&&isHiddenWithinTree(elem),dataShow=dataPriv.get(elem,\"fxshow\");// Queue-skipping animations hijack the fx hooks\nif(!opts.queue){hooks=jQuery._queueHooks(elem,\"fx\");if(hooks.unqueued==null){hooks.unqueued=0;oldfire=hooks.empty.fire;hooks.empty.fire=function(){if(!hooks.unqueued){oldfire();}};}hooks.unqueued++;anim.always(function(){// Ensure the complete handler is called before this completes\nanim.always(function(){hooks.unqueued--;if(!jQuery.queue(elem,\"fx\").length){hooks.empty.fire();}});});}// Detect show/hide animations\nfor(prop in props){value=props[prop];if(rfxtypes.test(value)){delete props[prop];toggle=toggle||value===\"toggle\";if(value===(hidden?\"hide\":\"show\")){// Pretend to be hidden if this is a \"show\" and\n// there is still data from a stopped show/hide\nif(value===\"show\"&&dataShow&&dataShow[prop]!==undefined){hidden=true;// Ignore all other no-op show/hide data\n}else{continue;}}orig[prop]=dataShow&&dataShow[prop]||jQuery.style(elem,prop);}}// Bail out if this is a no-op like .hide().hide()\npropTween=!jQuery.isEmptyObject(props);if(!propTween&&jQuery.isEmptyObject(orig)){return;}// Restrict \"overflow\" and \"display\" styles during box animations\nif(isBox&&elem.nodeType===1){// Support: IE <=9 - 11, Edge 12 - 15\n// Record all 3 overflow attributes because IE does not infer the shorthand\n// from identically-valued overflowX and overflowY and Edge just mirrors\n// the overflowX value there.\nopts.overflow=[style.overflow,style.overflowX,style.overflowY];// Identify a display type, preferring old show/hide data over the CSS cascade\nrestoreDisplay=dataShow&&dataShow.display;if(restoreDisplay==null){restoreDisplay=dataPriv.get(elem,\"display\");}display=jQuery.css(elem,\"display\");if(display===\"none\"){if(restoreDisplay){display=restoreDisplay;}else{// Get nonempty value(s) by temporarily forcing visibility\nshowHide([elem],true);restoreDisplay=elem.style.display||restoreDisplay;display=jQuery.css(elem,\"display\");showHide([elem]);}}// Animate inline elements as inline-block\nif(display===\"inline\"||display===\"inline-block\"&&restoreDisplay!=null){if(jQuery.css(elem,\"float\")===\"none\"){// Restore the original display value at the end of pure show/hide animations\nif(!propTween){anim.done(function(){style.display=restoreDisplay;});if(restoreDisplay==null){display=style.display;restoreDisplay=display===\"none\"?\"\":display;}}style.display=\"inline-block\";}}}if(opts.overflow){style.overflow=\"hidden\";anim.always(function(){style.overflow=opts.overflow[0];style.overflowX=opts.overflow[1];style.overflowY=opts.overflow[2];});}// Implement show/hide animations\npropTween=false;for(prop in orig){// General show/hide setup for this element animation\nif(!propTween){if(dataShow){if(\"hidden\"in dataShow){hidden=dataShow.hidden;}}else{dataShow=dataPriv.access(elem,\"fxshow\",{display:restoreDisplay});}// Store hidden/visible for toggle so `.stop().toggle()` \"reverses\"\nif(toggle){dataShow.hidden=!hidden;}// Show elements before animating them\nif(hidden){showHide([elem],true);}/* eslint-disable no-loop-func */anim.done(function(){/* eslint-enable no-loop-func */ // The final step of a \"hide\" animation is actually hiding the element\nif(!hidden){showHide([elem]);}dataPriv.remove(elem,\"fxshow\");for(prop in orig){jQuery.style(elem,prop,orig[prop]);}});}// Per-property setup\npropTween=createTween(hidden?dataShow[prop]:0,prop,anim);if(!(prop in dataShow)){dataShow[prop]=propTween.start;if(hidden){propTween.end=propTween.start;propTween.start=0;}}}}function propFilter(props,specialEasing){var index,name,easing,value,hooks;// camelCase, specialEasing and expand cssHook pass\nfor(index in props){name=camelCase(index);easing=specialEasing[name];value=props[index];if(Array.isArray(value)){easing=value[1];value=props[index]=value[0];}if(index!==name){props[name]=value;delete props[index];}hooks=jQuery.cssHooks[name];if(hooks&&\"expand\"in hooks){value=hooks.expand(value);delete props[name];// Not quite $.extend, this won't overwrite existing keys.\n// Reusing 'index' because we have the correct \"name\"\nfor(index in value){if(!(index in props)){props[index]=value[index];specialEasing[index]=easing;}}}else{specialEasing[name]=easing;}}}function Animation(elem,properties,options){var result,stopped,index=0,length=Animation.prefilters.length,deferred=jQuery.Deferred().always(function(){// Don't match elem in the :animated selector\ndelete tick.elem;}),tick=function tick(){if(stopped){return false;}var currentTime=fxNow||createFxNow(),remaining=Math.max(0,animation.startTime+animation.duration-currentTime),// Support: Android 2.3 only\n// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)\ntemp=remaining/animation.duration||0,percent=1-temp,index=0,length=animation.tweens.length;for(;index<length;index++){animation.tweens[index].run(percent);}deferred.notifyWith(elem,[animation,percent,remaining]);// If there's more to do, yield\nif(percent<1&&length){return remaining;}// If this was an empty animation, synthesize a final progress notification\nif(!length){deferred.notifyWith(elem,[animation,1,0]);}// Resolve the animation and report its conclusion\ndeferred.resolveWith(elem,[animation]);return false;},animation=deferred.promise({elem:elem,props:jQuery.extend({},properties),opts:jQuery.extend(true,{specialEasing:{},easing:jQuery.easing._default},options),originalProperties:properties,originalOptions:options,startTime:fxNow||createFxNow(),duration:options.duration,tweens:[],createTween:function(prop,end){var tween=jQuery.Tween(elem,animation.opts,prop,end,animation.opts.specialEasing[prop]||animation.opts.easing);animation.tweens.push(tween);return tween;},stop:function(gotoEnd){var index=0,// If we are going to the end, we want to run all the tweens\n// otherwise we skip this part\nlength=gotoEnd?animation.tweens.length:0;if(stopped){return this;}stopped=true;for(;index<length;index++){animation.tweens[index].run(1);}// Resolve when we played the last frame; otherwise, reject\nif(gotoEnd){deferred.notifyWith(elem,[animation,1,0]);deferred.resolveWith(elem,[animation,gotoEnd]);}else{deferred.rejectWith(elem,[animation,gotoEnd]);}return this;}}),props=animation.props;propFilter(props,animation.opts.specialEasing);for(;index<length;index++){result=Animation.prefilters[index].call(animation,elem,props,animation.opts);if(result){if(isFunction(result.stop)){jQuery._queueHooks(animation.elem,animation.opts.queue).stop=result.stop.bind(result);}return result;}}jQuery.map(props,createTween,animation);if(isFunction(animation.opts.start)){animation.opts.start.call(elem,animation);}// Attach callbacks from options\nanimation.progress(animation.opts.progress).done(animation.opts.done,animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);jQuery.fx.timer(jQuery.extend(tick,{elem:elem,anim:animation,queue:animation.opts.queue}));return animation;}jQuery.Animation=jQuery.extend(Animation,{tweeners:{\"*\":[function(prop,value){var tween=this.createTween(prop,value);adjustCSS(tween.elem,prop,rcssNum.exec(value),tween);return tween;}]},tweener:function(props,callback){if(isFunction(props)){callback=props;props=[\"*\"];}else{props=props.match(rnothtmlwhite);}var prop,index=0,length=props.length;for(;index<length;index++){prop=props[index];Animation.tweeners[prop]=Animation.tweeners[prop]||[];Animation.tweeners[prop].unshift(callback);}},prefilters:[defaultPrefilter],prefilter:function(callback,prepend){if(prepend){Animation.prefilters.unshift(callback);}else{Animation.prefilters.push(callback);}}});jQuery.speed=function(speed,easing,fn){var opt=speed&&typeof speed===\"object\"?jQuery.extend({},speed):{complete:fn||!fn&&easing||isFunction(speed)&&speed,duration:speed,easing:fn&&easing||easing&&!isFunction(easing)&&easing};// Go to the end state if fx are off\nif(jQuery.fx.off){opt.duration=0;}else{if(typeof opt.duration!==\"number\"){if(opt.duration in jQuery.fx.speeds){opt.duration=jQuery.fx.speeds[opt.duration];}else{opt.duration=jQuery.fx.speeds._default;}}}// Normalize opt.queue - true/undefined/null -> \"fx\"\nif(opt.queue==null||opt.queue===true){opt.queue=\"fx\";}// Queueing\nopt.old=opt.complete;opt.complete=function(){if(isFunction(opt.old)){opt.old.call(this);}if(opt.queue){jQuery.dequeue(this,opt.queue);}};return opt;};jQuery.fn.extend({fadeTo:function(speed,to,easing,callback){// Show any hidden elements after setting opacity to 0\nreturn this.filter(isHiddenWithinTree).css(\"opacity\",0).show()// Animate to the value specified\n.end().animate({opacity:to},speed,easing,callback);},animate:function(prop,speed,easing,callback){var empty=jQuery.isEmptyObject(prop),optall=jQuery.speed(speed,easing,callback),doAnimation=function doAnimation(){// Operate on a copy of prop so per-property easing won't be lost\nvar anim=Animation(this,jQuery.extend({},prop),optall);// Empty animations, or finishing resolves immediately\nif(empty||dataPriv.get(this,\"finish\")){anim.stop(true);}};doAnimation.finish=doAnimation;return empty||optall.queue===false?this.each(doAnimation):this.queue(optall.queue,doAnimation);},stop:function(type,clearQueue,gotoEnd){var stopQueue=function stopQueue(hooks){var stop=hooks.stop;delete hooks.stop;stop(gotoEnd);};if(typeof type!==\"string\"){gotoEnd=clearQueue;clearQueue=type;type=undefined;}if(clearQueue){this.queue(type||\"fx\",[]);}return this.each(function(){var dequeue=true,index=type!=null&&type+\"queueHooks\",timers=jQuery.timers,data=dataPriv.get(this);if(index){if(data[index]&&data[index].stop){stopQueue(data[index]);}}else{for(index in data){if(data[index]&&data[index].stop&&rrun.test(index)){stopQueue(data[index]);}}}for(index=timers.length;index--;){if(timers[index].elem===this&&(type==null||timers[index].queue===type)){timers[index].anim.stop(gotoEnd);dequeue=false;timers.splice(index,1);}}// Start the next in the queue if the last step wasn't forced.\n// Timers currently will call their complete callbacks, which\n// will dequeue but only if they were gotoEnd.\nif(dequeue||!gotoEnd){jQuery.dequeue(this,type);}});},finish:function(type){if(type!==false){type=type||\"fx\";}return this.each(function(){var index,data=dataPriv.get(this),queue=data[type+\"queue\"],hooks=data[type+\"queueHooks\"],timers=jQuery.timers,length=queue?queue.length:0;// Enable finishing flag on private data\ndata.finish=true;// Empty the queue first\njQuery.queue(this,type,[]);if(hooks&&hooks.stop){hooks.stop.call(this,true);}// Look for any active animations, and finish them\nfor(index=timers.length;index--;){if(timers[index].elem===this&&timers[index].queue===type){timers[index].anim.stop(true);timers.splice(index,1);}}// Look for any animations in the old queue and finish them\nfor(index=0;index<length;index++){if(queue[index]&&queue[index].finish){queue[index].finish.call(this);}}// Turn off finishing flag\ndelete data.finish;});}});jQuery.each([\"toggle\",\"show\",\"hide\"],function(_i,name){var cssFn=jQuery.fn[name];jQuery.fn[name]=function(speed,easing,callback){return speed==null||typeof speed===\"boolean\"?cssFn.apply(this,arguments):this.animate(genFx(name,true),speed,easing,callback);};});// Generate shortcuts for custom animations\njQuery.each({slideDown:genFx(\"show\"),slideUp:genFx(\"hide\"),slideToggle:genFx(\"toggle\"),fadeIn:{opacity:\"show\"},fadeOut:{opacity:\"hide\"},fadeToggle:{opacity:\"toggle\"}},function(name,props){jQuery.fn[name]=function(speed,easing,callback){return this.animate(props,speed,easing,callback);};});jQuery.timers=[];jQuery.fx.tick=function(){var timer,i=0,timers=jQuery.timers;fxNow=Date.now();for(;i<timers.length;i++){timer=timers[i];// Run the timer and safely remove it when done (allowing for external removal)\nif(!timer()&&timers[i]===timer){timers.splice(i--,1);}}if(!timers.length){jQuery.fx.stop();}fxNow=undefined;};jQuery.fx.timer=function(timer){jQuery.timers.push(timer);jQuery.fx.start();};jQuery.fx.interval=13;jQuery.fx.start=function(){if(inProgress){return;}inProgress=true;schedule();};jQuery.fx.stop=function(){inProgress=null;};jQuery.fx.speeds={slow:600,fast:200,// Default speed\n_default:400};// Based off of the plugin by Clint Helfers, with permission.\n// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/\njQuery.fn.delay=function(time,type){time=jQuery.fx?jQuery.fx.speeds[time]||time:time;type=type||\"fx\";return this.queue(type,function(next,hooks){var timeout=window.setTimeout(next,time);hooks.stop=function(){window.clearTimeout(timeout);};});};(function(){var input=document.createElement(\"input\"),select=document.createElement(\"select\"),opt=select.appendChild(document.createElement(\"option\"));input.type=\"checkbox\";// Support: Android <=4.3 only\n// Default value for a checkbox should be \"on\"\nsupport.checkOn=input.value!==\"\";// Support: IE <=11 only\n// Must access selectedIndex to make default options select\nsupport.optSelected=opt.selected;// Support: IE <=11 only\n// An input loses its value after becoming a radio\ninput=document.createElement(\"input\");input.value=\"t\";input.type=\"radio\";support.radioValue=input.value===\"t\";})();var boolHook,attrHandle=jQuery.expr.attrHandle;jQuery.fn.extend({attr:function(name,value){return access(this,jQuery.attr,name,value,arguments.length>1);},removeAttr:function(name){return this.each(function(){jQuery.removeAttr(this,name);});}});jQuery.extend({attr:function(elem,name,value){var ret,hooks,nType=elem.nodeType;// Don't get/set attributes on text, comment and attribute nodes\nif(nType===3||nType===8||nType===2){return;}// Fallback to prop when attributes are not supported\nif(typeof elem.getAttribute===\"undefined\"){return jQuery.prop(elem,name,value);}// Attribute hooks are determined by the lowercase version\n// Grab necessary hook if one is defined\nif(nType!==1||!jQuery.isXMLDoc(elem)){hooks=jQuery.attrHooks[name.toLowerCase()]||(jQuery.expr.match.bool.test(name)?boolHook:undefined);}if(value!==undefined){if(value===null){jQuery.removeAttr(elem,name);return;}if(hooks&&\"set\"in hooks&&(ret=hooks.set(elem,value,name))!==undefined){return ret;}elem.setAttribute(name,value+\"\");return value;}if(hooks&&\"get\"in hooks&&(ret=hooks.get(elem,name))!==null){return ret;}ret=jQuery.find.attr(elem,name);// Non-existent attributes return null, we normalize to undefined\nreturn ret==null?undefined:ret;},attrHooks:{type:{set:function(elem,value){if(!support.radioValue&&value===\"radio\"&&nodeName(elem,\"input\")){var val=elem.value;elem.setAttribute(\"type\",value);if(val){elem.value=val;}return value;}}}},removeAttr:function(elem,value){var name,i=0,// Attribute names can contain non-HTML whitespace characters\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\nattrNames=value&&value.match(rnothtmlwhite);if(attrNames&&elem.nodeType===1){while(name=attrNames[i++]){elem.removeAttribute(name);}}}});// Hooks for boolean attributes\nboolHook={set:function(elem,value,name){if(value===false){// Remove boolean attributes when set to false\njQuery.removeAttr(elem,name);}else{elem.setAttribute(name,name);}return name;}};jQuery.each(jQuery.expr.match.bool.source.match(/\\w+/g),function(_i,name){var getter=attrHandle[name]||jQuery.find.attr;attrHandle[name]=function(elem,name,isXML){var ret,handle,lowercaseName=name.toLowerCase();if(!isXML){// Avoid an infinite loop by temporarily removing this function from the getter\nhandle=attrHandle[lowercaseName];attrHandle[lowercaseName]=ret;ret=getter(elem,name,isXML)!=null?lowercaseName:null;attrHandle[lowercaseName]=handle;}return ret;};});var rfocusable=/^(?:input|select|textarea|button)$/i,rclickable=/^(?:a|area)$/i;jQuery.fn.extend({prop:function(name,value){return access(this,jQuery.prop,name,value,arguments.length>1);},removeProp:function(name){return this.each(function(){delete this[jQuery.propFix[name]||name];});}});jQuery.extend({prop:function(elem,name,value){var ret,hooks,nType=elem.nodeType;// Don't get/set properties on text, comment and attribute nodes\nif(nType===3||nType===8||nType===2){return;}if(nType!==1||!jQuery.isXMLDoc(elem)){// Fix name and attach hooks\nname=jQuery.propFix[name]||name;hooks=jQuery.propHooks[name];}if(value!==undefined){if(hooks&&\"set\"in hooks&&(ret=hooks.set(elem,value,name))!==undefined){return ret;}return elem[name]=value;}if(hooks&&\"get\"in hooks&&(ret=hooks.get(elem,name))!==null){return ret;}return elem[name];},propHooks:{tabIndex:{get:function(elem){// Support: IE <=9 - 11 only\n// elem.tabIndex doesn't always return the\n// correct value when it hasn't been explicitly set\n// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n// Use proper attribute retrieval(#12072)\nvar tabindex=jQuery.find.attr(elem,\"tabindex\");if(tabindex){return parseInt(tabindex,10);}if(rfocusable.test(elem.nodeName)||rclickable.test(elem.nodeName)&&elem.href){return 0;}return-1;}}},propFix:{\"for\":\"htmlFor\",\"class\":\"className\"}});// Support: IE <=11 only\n// Accessing the selectedIndex property\n// forces the browser to respect setting selected\n// on the option\n// The getter ensures a default option is selected\n// when in an optgroup\n// eslint rule \"no-unused-expressions\" is disabled for this code\n// since it considers such accessions noop\nif(!support.optSelected){jQuery.propHooks.selected={get:function(elem){/* eslint no-unused-expressions: \"off\" */var parent=elem.parentNode;if(parent&&parent.parentNode){parent.parentNode.selectedIndex;}return null;},set:function(elem){/* eslint no-unused-expressions: \"off\" */var parent=elem.parentNode;if(parent){parent.selectedIndex;if(parent.parentNode){parent.parentNode.selectedIndex;}}}};}jQuery.each([\"tabIndex\",\"readOnly\",\"maxLength\",\"cellSpacing\",\"cellPadding\",\"rowSpan\",\"colSpan\",\"useMap\",\"frameBorder\",\"contentEditable\"],function(){jQuery.propFix[this.toLowerCase()]=this;});// Strip and collapse whitespace according to HTML spec\n// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace\nfunction stripAndCollapse(value){var tokens=value.match(rnothtmlwhite)||[];return tokens.join(\" \");}function getClass(elem){return elem.getAttribute&&elem.getAttribute(\"class\")||\"\";}function classesToArray(value){if(Array.isArray(value)){return value;}if(typeof value===\"string\"){return value.match(rnothtmlwhite)||[];}return[];}jQuery.fn.extend({addClass:function(value){var classes,elem,cur,curValue,clazz,j,finalValue,i=0;if(isFunction(value)){return this.each(function(j){jQuery(this).addClass(value.call(this,j,getClass(this)));});}classes=classesToArray(value);if(classes.length){while(elem=this[i++]){curValue=getClass(elem);cur=elem.nodeType===1&&\" \"+stripAndCollapse(curValue)+\" \";if(cur){j=0;while(clazz=classes[j++]){if(cur.indexOf(\" \"+clazz+\" \")<0){cur+=clazz+\" \";}}// Only assign if different to avoid unneeded rendering.\nfinalValue=stripAndCollapse(cur);if(curValue!==finalValue){elem.setAttribute(\"class\",finalValue);}}}}return this;},removeClass:function(value){var classes,elem,cur,curValue,clazz,j,finalValue,i=0;if(isFunction(value)){return this.each(function(j){jQuery(this).removeClass(value.call(this,j,getClass(this)));});}if(!arguments.length){return this.attr(\"class\",\"\");}classes=classesToArray(value);if(classes.length){while(elem=this[i++]){curValue=getClass(elem);// This expression is here for better compressibility (see addClass)\ncur=elem.nodeType===1&&\" \"+stripAndCollapse(curValue)+\" \";if(cur){j=0;while(clazz=classes[j++]){// Remove *all* instances\nwhile(cur.indexOf(\" \"+clazz+\" \")>-1){cur=cur.replace(\" \"+clazz+\" \",\" \");}}// Only assign if different to avoid unneeded rendering.\nfinalValue=stripAndCollapse(cur);if(curValue!==finalValue){elem.setAttribute(\"class\",finalValue);}}}}return this;},toggleClass:function(value,stateVal){var type=typeof value,isValidValue=type===\"string\"||Array.isArray(value);if(typeof stateVal===\"boolean\"&&isValidValue){return stateVal?this.addClass(value):this.removeClass(value);}if(isFunction(value)){return this.each(function(i){jQuery(this).toggleClass(value.call(this,i,getClass(this),stateVal),stateVal);});}return this.each(function(){var className,i,self,classNames;if(isValidValue){// Toggle individual class names\ni=0;self=jQuery(this);classNames=classesToArray(value);while(className=classNames[i++]){// Check each className given, space separated list\nif(self.hasClass(className)){self.removeClass(className);}else{self.addClass(className);}}// Toggle whole class name\n}else if(value===undefined||type===\"boolean\"){className=getClass(this);if(className){// Store className if set\ndataPriv.set(this,\"__className__\",className);}// If the element has a class name or if we're passed `false`,\n// then remove the whole classname (if there was one, the above saved it).\n// Otherwise bring back whatever was previously saved (if anything),\n// falling back to the empty string if nothing was stored.\nif(this.setAttribute){this.setAttribute(\"class\",className||value===false?\"\":dataPriv.get(this,\"__className__\")||\"\");}}});},hasClass:function(selector){var className,elem,i=0;className=\" \"+selector+\" \";while(elem=this[i++]){if(elem.nodeType===1&&(\" \"+stripAndCollapse(getClass(elem))+\" \").indexOf(className)>-1){return true;}}return false;}});var rreturn=/\\r/g;jQuery.fn.extend({val:function(value){var hooks,ret,valueIsFunction,elem=this[0];if(!arguments.length){if(elem){hooks=jQuery.valHooks[elem.type]||jQuery.valHooks[elem.nodeName.toLowerCase()];if(hooks&&\"get\"in hooks&&(ret=hooks.get(elem,\"value\"))!==undefined){return ret;}ret=elem.value;// Handle most common string cases\nif(typeof ret===\"string\"){return ret.replace(rreturn,\"\");}// Handle cases where value is null/undef or number\nreturn ret==null?\"\":ret;}return;}valueIsFunction=isFunction(value);return this.each(function(i){var val;if(this.nodeType!==1){return;}if(valueIsFunction){val=value.call(this,i,jQuery(this).val());}else{val=value;}// Treat null/undefined as \"\"; convert numbers to string\nif(val==null){val=\"\";}else if(typeof val===\"number\"){val+=\"\";}else if(Array.isArray(val)){val=jQuery.map(val,function(value){return value==null?\"\":value+\"\";});}hooks=jQuery.valHooks[this.type]||jQuery.valHooks[this.nodeName.toLowerCase()];// If set returns undefined, fall back to normal setting\nif(!hooks||!(\"set\"in hooks)||hooks.set(this,val,\"value\")===undefined){this.value=val;}});}});jQuery.extend({valHooks:{option:{get:function(elem){var val=jQuery.find.attr(elem,\"value\");return val!=null?val:// Support: IE <=10 - 11 only\n// option.text throws exceptions (#14686, #14858)\n// Strip and collapse whitespace\n// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\nstripAndCollapse(jQuery.text(elem));}},select:{get:function(elem){var value,option,i,options=elem.options,index=elem.selectedIndex,one=elem.type===\"select-one\",values=one?null:[],max=one?index+1:options.length;if(index<0){i=max;}else{i=one?index:0;}// Loop through all the selected options\nfor(;i<max;i++){option=options[i];// Support: IE <=9 only\n// IE8-9 doesn't update selected after form reset (#2551)\nif((option.selected||i===index)&&// Don't return options that are disabled or in a disabled optgroup\n!option.disabled&&(!option.parentNode.disabled||!nodeName(option.parentNode,\"optgroup\"))){// Get the specific value for the option\nvalue=jQuery(option).val();// We don't need an array for one selects\nif(one){return value;}// Multi-Selects return an array\nvalues.push(value);}}return values;},set:function(elem,value){var optionSet,option,options=elem.options,values=jQuery.makeArray(value),i=options.length;while(i--){option=options[i];/* eslint-disable no-cond-assign */if(option.selected=jQuery.inArray(jQuery.valHooks.option.get(option),values)>-1){optionSet=true;}/* eslint-enable no-cond-assign */}// Force browsers to behave consistently when non-matching value is set\nif(!optionSet){elem.selectedIndex=-1;}return values;}}}});// Radios and checkboxes getter/setter\njQuery.each([\"radio\",\"checkbox\"],function(){jQuery.valHooks[this]={set:function(elem,value){if(Array.isArray(value)){return elem.checked=jQuery.inArray(jQuery(elem).val(),value)>-1;}}};if(!support.checkOn){jQuery.valHooks[this].get=function(elem){return elem.getAttribute(\"value\")===null?\"on\":elem.value;};}});// Return jQuery for attributes-only inclusion\nsupport.focusin=\"onfocusin\"in window;var rfocusMorph=/^(?:focusinfocus|focusoutblur)$/,stopPropagationCallback=function stopPropagationCallback(e){e.stopPropagation();};jQuery.extend(jQuery.event,{trigger:function(event,data,elem,onlyHandlers){var i,cur,tmp,bubbleType,ontype,handle,special,lastElement,eventPath=[elem||document],type=hasOwn.call(event,\"type\")?event.type:event,namespaces=hasOwn.call(event,\"namespace\")?event.namespace.split(\".\"):[];cur=lastElement=tmp=elem=elem||document;// Don't do events on text and comment nodes\nif(elem.nodeType===3||elem.nodeType===8){return;}// focus/blur morphs to focusin/out; ensure we're not firing them right now\nif(rfocusMorph.test(type+jQuery.event.triggered)){return;}if(type.indexOf(\".\")>-1){// Namespaced trigger; create a regexp to match event type in handle()\nnamespaces=type.split(\".\");type=namespaces.shift();namespaces.sort();}ontype=type.indexOf(\":\")<0&&\"on\"+type;// Caller can pass in a jQuery.Event object, Object, or just an event type string\nevent=event[jQuery.expando]?event:new jQuery.Event(type,typeof event===\"object\"&&event);// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\nevent.isTrigger=onlyHandlers?2:3;event.namespace=namespaces.join(\".\");event.rnamespace=event.namespace?new RegExp(\"(^|\\\\.)\"+namespaces.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"):null;// Clean up the event in case it is being reused\nevent.result=undefined;if(!event.target){event.target=elem;}// Clone any incoming data and prepend the event, creating the handler arg list\ndata=data==null?[event]:jQuery.makeArray(data,[event]);// Allow special events to draw outside the lines\nspecial=jQuery.event.special[type]||{};if(!onlyHandlers&&special.trigger&&special.trigger.apply(elem,data)===false){return;}// Determine event propagation path in advance, per W3C events spec (#9951)\n// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\nif(!onlyHandlers&&!special.noBubble&&!isWindow(elem)){bubbleType=special.delegateType||type;if(!rfocusMorph.test(bubbleType+type)){cur=cur.parentNode;}for(;cur;cur=cur.parentNode){eventPath.push(cur);tmp=cur;}// Only add window if we got to document (e.g., not plain obj or detached DOM)\nif(tmp===(elem.ownerDocument||document)){eventPath.push(tmp.defaultView||tmp.parentWindow||window);}}// Fire handlers on the event path\ni=0;while((cur=eventPath[i++])&&!event.isPropagationStopped()){lastElement=cur;event.type=i>1?bubbleType:special.bindType||type;// jQuery handler\nhandle=(dataPriv.get(cur,\"events\")||Object.create(null))[event.type]&&dataPriv.get(cur,\"handle\");if(handle){handle.apply(cur,data);}// Native handler\nhandle=ontype&&cur[ontype];if(handle&&handle.apply&&acceptData(cur)){event.result=handle.apply(cur,data);if(event.result===false){event.preventDefault();}}}event.type=type;// If nobody prevented the default action, do it now\nif(!onlyHandlers&&!event.isDefaultPrevented()){if((!special._default||special._default.apply(eventPath.pop(),data)===false)&&acceptData(elem)){// Call a native DOM method on the target with the same name as the event.\n// Don't do default actions on window, that's where global variables be (#6170)\nif(ontype&&isFunction(elem[type])&&!isWindow(elem)){// Don't re-trigger an onFOO event when we call its FOO() method\ntmp=elem[ontype];if(tmp){elem[ontype]=null;}// Prevent re-triggering of the same event, since we already bubbled it above\njQuery.event.triggered=type;if(event.isPropagationStopped()){lastElement.addEventListener(type,stopPropagationCallback);}elem[type]();if(event.isPropagationStopped()){lastElement.removeEventListener(type,stopPropagationCallback);}jQuery.event.triggered=undefined;if(tmp){elem[ontype]=tmp;}}}}return event.result;},// Piggyback on a donor event to simulate a different one\n// Used only for `focus(in | out)` events\nsimulate:function(type,elem,event){var e=jQuery.extend(new jQuery.Event(),event,{type:type,isSimulated:true});jQuery.event.trigger(e,null,elem);}});jQuery.fn.extend({trigger:function(type,data){return this.each(function(){jQuery.event.trigger(type,data,this);});},triggerHandler:function(type,data){var elem=this[0];if(elem){return jQuery.event.trigger(type,data,elem,true);}}});// Support: Firefox <=44\n// Firefox doesn't have focus(in | out) events\n// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n//\n// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1\n// focus(in | out) events fire after focus & blur events,\n// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857\nif(!support.focusin){jQuery.each({focus:\"focusin\",blur:\"focusout\"},function(orig,fix){// Attach a single capturing handler on the document while someone wants focusin/focusout\nvar handler=function handler(event){jQuery.event.simulate(fix,event.target,jQuery.event.fix(event));};jQuery.event.special[fix]={setup:function(){// Handle: regular nodes (via `this.ownerDocument`), window\n// (via `this.document`) & document (via `this`).\nvar doc=this.ownerDocument||this.document||this,attaches=dataPriv.access(doc,fix);if(!attaches){doc.addEventListener(orig,handler,true);}dataPriv.access(doc,fix,(attaches||0)+1);},teardown:function(){var doc=this.ownerDocument||this.document||this,attaches=dataPriv.access(doc,fix)-1;if(!attaches){doc.removeEventListener(orig,handler,true);dataPriv.remove(doc,fix);}else{dataPriv.access(doc,fix,attaches);}}};});}var location=window.location;var nonce={guid:Date.now()};var rquery=/\\?/;// Cross-browser xml parsing\njQuery.parseXML=function(data){var xml,parserErrorElem;if(!data||typeof data!==\"string\"){return null;}// Support: IE 9 - 11 only\n// IE throws on parseFromString with invalid input.\ntry{xml=new window.DOMParser().parseFromString(data,\"text/xml\");}catch(e){}parserErrorElem=xml&&xml.getElementsByTagName(\"parsererror\")[0];if(!xml||parserErrorElem){jQuery.error(\"Invalid XML: \"+(parserErrorElem?jQuery.map(parserErrorElem.childNodes,function(el){return el.textContent;}).join(\"\\n\"):data));}return xml;};var rbracket=/\\[\\]$/,rCRLF=/\\r?\\n/g,rsubmitterTypes=/^(?:submit|button|image|reset|file)$/i,rsubmittable=/^(?:input|select|textarea|keygen)/i;function buildParams(prefix,obj,traditional,add){var name;if(Array.isArray(obj)){// Serialize array item.\njQuery.each(obj,function(i,v){if(traditional||rbracket.test(prefix)){// Treat each array item as a scalar.\nadd(prefix,v);}else{// Item is non-scalar (array or object), encode its numeric index.\nbuildParams(prefix+\"[\"+(typeof v===\"object\"&&v!=null?i:\"\")+\"]\",v,traditional,add);}});}else if(!traditional&&toType(obj)===\"object\"){// Serialize object item.\nfor(name in obj){buildParams(prefix+\"[\"+name+\"]\",obj[name],traditional,add);}}else{// Serialize scalar item.\nadd(prefix,obj);}}// Serialize an array of form elements or a set of\n// key/values into a query string\njQuery.param=function(a,traditional){var prefix,s=[],add=function add(key,valueOrFunction){// If value is a function, invoke it and use its return value\nvar value=isFunction(valueOrFunction)?valueOrFunction():valueOrFunction;s[s.length]=encodeURIComponent(key)+\"=\"+encodeURIComponent(value==null?\"\":value);};if(a==null){return\"\";}// If an array was passed in, assume that it is an array of form elements.\nif(Array.isArray(a)||a.jquery&&!jQuery.isPlainObject(a)){// Serialize the form elements\njQuery.each(a,function(){add(this.name,this.value);});}else{// If traditional, encode the \"old\" way (the way 1.3.2 or older\n// did it), otherwise encode params recursively.\nfor(prefix in a){buildParams(prefix,a[prefix],traditional,add);}}// Return the resulting serialization\nreturn s.join(\"&\");};jQuery.fn.extend({serialize:function(){return jQuery.param(this.serializeArray());},serializeArray:function(){return this.map(function(){// Can add propHook for \"elements\" to filter or add form elements\nvar elements=jQuery.prop(this,\"elements\");return elements?jQuery.makeArray(elements):this;}).filter(function(){var type=this.type;// Use .is( \":disabled\" ) so that fieldset[disabled] works\nreturn this.name&&!jQuery(this).is(\":disabled\")&&rsubmittable.test(this.nodeName)&&!rsubmitterTypes.test(type)&&(this.checked||!rcheckableType.test(type));}).map(function(_i,elem){var val=jQuery(this).val();if(val==null){return null;}if(Array.isArray(val)){return jQuery.map(val,function(val){return{name:elem.name,value:val.replace(rCRLF,\"\\r\\n\")};});}return{name:elem.name,value:val.replace(rCRLF,\"\\r\\n\")};}).get();}});var r20=/%20/g,rhash=/#.*$/,rantiCache=/([?&])_=[^&]*/,rheaders=/^(.*?):[ \\t]*([^\\r\\n]*)$/mg,// #7653, #8125, #8152: local protocol detection\nrlocalProtocol=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,rnoContent=/^(?:GET|HEAD)$/,rprotocol=/^\\/\\//,/* Prefilters\n\t * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n\t * 2) These are called:\n\t *    - BEFORE asking for a transport\n\t *    - AFTER param serialization (s.data is a string if s.processData is true)\n\t * 3) key is the dataType\n\t * 4) the catchall symbol \"*\" can be used\n\t * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n\t */prefilters={},/* Transports bindings\n\t * 1) key is the dataType\n\t * 2) the catchall symbol \"*\" can be used\n\t * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n\t */transports={},// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\nallTypes=\"*/\".concat(\"*\"),// Anchor tag for parsing the document origin\noriginAnchor=document.createElement(\"a\");originAnchor.href=location.href;// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\nfunction addToPrefiltersOrTransports(structure){// dataTypeExpression is optional and defaults to \"*\"\nreturn function(dataTypeExpression,func){if(typeof dataTypeExpression!==\"string\"){func=dataTypeExpression;dataTypeExpression=\"*\";}var dataType,i=0,dataTypes=dataTypeExpression.toLowerCase().match(rnothtmlwhite)||[];if(isFunction(func)){// For each dataType in the dataTypeExpression\nwhile(dataType=dataTypes[i++]){// Prepend if requested\nif(dataType[0]===\"+\"){dataType=dataType.slice(1)||\"*\";(structure[dataType]=structure[dataType]||[]).unshift(func);// Otherwise append\n}else{(structure[dataType]=structure[dataType]||[]).push(func);}}}};}// Base inspection function for prefilters and transports\nfunction inspectPrefiltersOrTransports(structure,options,originalOptions,jqXHR){var inspected={},seekingTransport=structure===transports;function inspect(dataType){var selected;inspected[dataType]=true;jQuery.each(structure[dataType]||[],function(_,prefilterOrFactory){var dataTypeOrTransport=prefilterOrFactory(options,originalOptions,jqXHR);if(typeof dataTypeOrTransport===\"string\"&&!seekingTransport&&!inspected[dataTypeOrTransport]){options.dataTypes.unshift(dataTypeOrTransport);inspect(dataTypeOrTransport);return false;}else if(seekingTransport){return!(selected=dataTypeOrTransport);}});return selected;}return inspect(options.dataTypes[0])||!inspected[\"*\"]&&inspect(\"*\");}// A special extend for ajax options\n// that takes \"flat\" options (not to be deep extended)\n// Fixes #9887\nfunction ajaxExtend(target,src){var key,deep,flatOptions=jQuery.ajaxSettings.flatOptions||{};for(key in src){if(src[key]!==undefined){(flatOptions[key]?target:deep||(deep={}))[key]=src[key];}}if(deep){jQuery.extend(true,target,deep);}return target;}/* Handles responses to an ajax request:\n * - finds the right dataType (mediates between content-type and expected dataType)\n * - returns the corresponding response\n */function ajaxHandleResponses(s,jqXHR,responses){var ct,type,finalDataType,firstDataType,contents=s.contents,dataTypes=s.dataTypes;// Remove auto dataType and get content-type in the process\nwhile(dataTypes[0]===\"*\"){dataTypes.shift();if(ct===undefined){ct=s.mimeType||jqXHR.getResponseHeader(\"Content-Type\");}}// Check if we're dealing with a known content-type\nif(ct){for(type in contents){if(contents[type]&&contents[type].test(ct)){dataTypes.unshift(type);break;}}}// Check to see if we have a response for the expected dataType\nif(dataTypes[0]in responses){finalDataType=dataTypes[0];}else{// Try convertible dataTypes\nfor(type in responses){if(!dataTypes[0]||s.converters[type+\" \"+dataTypes[0]]){finalDataType=type;break;}if(!firstDataType){firstDataType=type;}}// Or just use first one\nfinalDataType=finalDataType||firstDataType;}// If we found a dataType\n// We add the dataType to the list if needed\n// and return the corresponding response\nif(finalDataType){if(finalDataType!==dataTypes[0]){dataTypes.unshift(finalDataType);}return responses[finalDataType];}}/* Chain conversions given the request and the original response\n * Also sets the responseXXX fields on the jqXHR instance\n */function ajaxConvert(s,response,jqXHR,isSuccess){var conv2,current,conv,tmp,prev,converters={},// Work with a copy of dataTypes in case we need to modify it for conversion\ndataTypes=s.dataTypes.slice();// Create converters map with lowercased keys\nif(dataTypes[1]){for(conv in s.converters){converters[conv.toLowerCase()]=s.converters[conv];}}current=dataTypes.shift();// Convert to each sequential dataType\nwhile(current){if(s.responseFields[current]){jqXHR[s.responseFields[current]]=response;}// Apply the dataFilter if provided\nif(!prev&&isSuccess&&s.dataFilter){response=s.dataFilter(response,s.dataType);}prev=current;current=dataTypes.shift();if(current){// There's only work to do if current dataType is non-auto\nif(current===\"*\"){current=prev;// Convert response if prev dataType is non-auto and differs from current\n}else if(prev!==\"*\"&&prev!==current){// Seek a direct converter\nconv=converters[prev+\" \"+current]||converters[\"* \"+current];// If none found, seek a pair\nif(!conv){for(conv2 in converters){// If conv2 outputs current\ntmp=conv2.split(\" \");if(tmp[1]===current){// If prev can be converted to accepted input\nconv=converters[prev+\" \"+tmp[0]]||converters[\"* \"+tmp[0]];if(conv){// Condense equivalence converters\nif(conv===true){conv=converters[conv2];// Otherwise, insert the intermediate dataType\n}else if(converters[conv2]!==true){current=tmp[0];dataTypes.unshift(tmp[1]);}break;}}}}// Apply converter (if not an equivalence)\nif(conv!==true){// Unless errors are allowed to bubble, catch and return them\nif(conv&&s.throws){response=conv(response);}else{try{response=conv(response);}catch(e){return{state:\"parsererror\",error:conv?e:\"No conversion from \"+prev+\" to \"+current};}}}}}}return{state:\"success\",data:response};}jQuery.extend({// Counter for holding the number of active queries\nactive:0,// Last-Modified header cache for next request\nlastModified:{},etag:{},ajaxSettings:{url:location.href,type:\"GET\",isLocal:rlocalProtocol.test(location.protocol),global:true,processData:true,async:true,contentType:\"application/x-www-form-urlencoded; charset=UTF-8\",/*\n\t\ttimeout: 0,\n\t\tdata: null,\n\t\tdataType: null,\n\t\tusername: null,\n\t\tpassword: null,\n\t\tcache: null,\n\t\tthrows: false,\n\t\ttraditional: false,\n\t\theaders: {},\n\t\t*/accepts:{\"*\":allTypes,text:\"text/plain\",html:\"text/html\",xml:\"application/xml, text/xml\",json:\"application/json, text/javascript\"},contents:{xml:/\\bxml\\b/,html:/\\bhtml/,json:/\\bjson\\b/},responseFields:{xml:\"responseXML\",text:\"responseText\",json:\"responseJSON\"},// Data converters\n// Keys separate source (or catchall \"*\") and destination types with a single space\nconverters:{// Convert anything to text\n\"* text\":String,// Text to html (true = no transformation)\n\"text html\":true,// Evaluate text as a json expression\n\"text json\":JSON.parse,// Parse text as xml\n\"text xml\":jQuery.parseXML},// For options that shouldn't be deep extended:\n// you can add your own custom options here if\n// and when you create one that shouldn't be\n// deep extended (see ajaxExtend)\nflatOptions:{url:true,context:true}},// Creates a full fledged settings object into target\n// with both ajaxSettings and settings fields.\n// If target is omitted, writes into ajaxSettings.\najaxSetup:function(target,settings){return settings?// Building a settings object\najaxExtend(ajaxExtend(target,jQuery.ajaxSettings),settings):// Extending ajaxSettings\najaxExtend(jQuery.ajaxSettings,target);},ajaxPrefilter:addToPrefiltersOrTransports(prefilters),ajaxTransport:addToPrefiltersOrTransports(transports),// Main method\najax:function(url,options){// If url is an object, simulate pre-1.5 signature\nif(typeof url===\"object\"){options=url;url=undefined;}// Force options to be an object\noptions=options||{};var transport,// URL without anti-cache param\ncacheURL,// Response headers\nresponseHeadersString,responseHeaders,// timeout handle\ntimeoutTimer,// Url cleanup var\nurlAnchor,// Request state (becomes false upon send and true upon completion)\ncompleted,// To know if global events are to be dispatched\nfireGlobals,// Loop variable\ni,// uncached part of the url\nuncached,// Create the final options object\ns=jQuery.ajaxSetup({},options),// Callbacks context\ncallbackContext=s.context||s,// Context for global events is callbackContext if it is a DOM node or jQuery collection\nglobalEventContext=s.context&&(callbackContext.nodeType||callbackContext.jquery)?jQuery(callbackContext):jQuery.event,// Deferreds\ndeferred=jQuery.Deferred(),completeDeferred=jQuery.Callbacks(\"once memory\"),// Status-dependent callbacks\nstatusCode=s.statusCode||{},// Headers (they are sent all at once)\nrequestHeaders={},requestHeadersNames={},// Default abort message\nstrAbort=\"canceled\",// Fake xhr\njqXHR={readyState:0,// Builds headers hashtable if needed\ngetResponseHeader:function(key){var match;if(completed){if(!responseHeaders){responseHeaders={};while(match=rheaders.exec(responseHeadersString)){responseHeaders[match[1].toLowerCase()+\" \"]=(responseHeaders[match[1].toLowerCase()+\" \"]||[]).concat(match[2]);}}match=responseHeaders[key.toLowerCase()+\" \"];}return match==null?null:match.join(\", \");},// Raw string\ngetAllResponseHeaders:function(){return completed?responseHeadersString:null;},// Caches the header\nsetRequestHeader:function(name,value){if(completed==null){name=requestHeadersNames[name.toLowerCase()]=requestHeadersNames[name.toLowerCase()]||name;requestHeaders[name]=value;}return this;},// Overrides response content-type header\noverrideMimeType:function(type){if(completed==null){s.mimeType=type;}return this;},// Status-dependent callbacks\nstatusCode:function(map){var code;if(map){if(completed){// Execute the appropriate callbacks\njqXHR.always(map[jqXHR.status]);}else{// Lazy-add the new callbacks in a way that preserves old ones\nfor(code in map){statusCode[code]=[statusCode[code],map[code]];}}}return this;},// Cancel the request\nabort:function(statusText){var finalText=statusText||strAbort;if(transport){transport.abort(finalText);}done(0,finalText);return this;}};// Attach deferreds\ndeferred.promise(jqXHR);// Add protocol if not provided (prefilters might expect it)\n// Handle falsy url in the settings object (#10093: consistency with old signature)\n// We also use the url parameter if available\ns.url=((url||s.url||location.href)+\"\").replace(rprotocol,location.protocol+\"//\");// Alias method option to type as per ticket #12004\ns.type=options.method||options.type||s.method||s.type;// Extract dataTypes list\ns.dataTypes=(s.dataType||\"*\").toLowerCase().match(rnothtmlwhite)||[\"\"];// A cross-domain request is in order when the origin doesn't match the current origin.\nif(s.crossDomain==null){urlAnchor=document.createElement(\"a\");// Support: IE <=8 - 11, Edge 12 - 15\n// IE throws exception on accessing the href property if url is malformed,\n// e.g. http://example.com:80x/\ntry{urlAnchor.href=s.url;// Support: IE <=8 - 11 only\n// Anchor's host property isn't correctly set when s.url is relative\nurlAnchor.href=urlAnchor.href;s.crossDomain=originAnchor.protocol+\"//\"+originAnchor.host!==urlAnchor.protocol+\"//\"+urlAnchor.host;}catch(e){// If there is an error parsing the URL, assume it is crossDomain,\n// it can be rejected by the transport if it is invalid\ns.crossDomain=true;}}// Convert data if not already a string\nif(s.data&&s.processData&&typeof s.data!==\"string\"){s.data=jQuery.param(s.data,s.traditional);}// Apply prefilters\ninspectPrefiltersOrTransports(prefilters,s,options,jqXHR);// If request was aborted inside a prefilter, stop there\nif(completed){return jqXHR;}// We can fire global events as of now if asked to\n// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\nfireGlobals=jQuery.event&&s.global;// Watch for a new set of requests\nif(fireGlobals&&jQuery.active++===0){jQuery.event.trigger(\"ajaxStart\");}// Uppercase the type\ns.type=s.type.toUpperCase();// Determine if request has content\ns.hasContent=!rnoContent.test(s.type);// Save the URL in case we're toying with the If-Modified-Since\n// and/or If-None-Match header later on\n// Remove hash to simplify url manipulation\ncacheURL=s.url.replace(rhash,\"\");// More options handling for requests with no content\nif(!s.hasContent){// Remember the hash so we can put it back\nuncached=s.url.slice(cacheURL.length);// If data is available and should be processed, append data to url\nif(s.data&&(s.processData||typeof s.data===\"string\")){cacheURL+=(rquery.test(cacheURL)?\"&\":\"?\")+s.data;// #9682: remove data so that it's not used in an eventual retry\ndelete s.data;}// Add or update anti-cache param if needed\nif(s.cache===false){cacheURL=cacheURL.replace(rantiCache,\"$1\");uncached=(rquery.test(cacheURL)?\"&\":\"?\")+\"_=\"+nonce.guid++ +uncached;}// Put hash and anti-cache on the URL that will be requested (gh-1732)\ns.url=cacheURL+uncached;// Change '%20' to '+' if this is encoded form body content (gh-2658)\n}else if(s.data&&s.processData&&(s.contentType||\"\").indexOf(\"application/x-www-form-urlencoded\")===0){s.data=s.data.replace(r20,\"+\");}// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\nif(s.ifModified){if(jQuery.lastModified[cacheURL]){jqXHR.setRequestHeader(\"If-Modified-Since\",jQuery.lastModified[cacheURL]);}if(jQuery.etag[cacheURL]){jqXHR.setRequestHeader(\"If-None-Match\",jQuery.etag[cacheURL]);}}// Set the correct header, if data is being sent\nif(s.data&&s.hasContent&&s.contentType!==false||options.contentType){jqXHR.setRequestHeader(\"Content-Type\",s.contentType);}// Set the Accepts header for the server, depending on the dataType\njqXHR.setRequestHeader(\"Accept\",s.dataTypes[0]&&s.accepts[s.dataTypes[0]]?s.accepts[s.dataTypes[0]]+(s.dataTypes[0]!==\"*\"?\", \"+allTypes+\"; q=0.01\":\"\"):s.accepts[\"*\"]);// Check for headers option\nfor(i in s.headers){jqXHR.setRequestHeader(i,s.headers[i]);}// Allow custom headers/mimetypes and early abort\nif(s.beforeSend&&(s.beforeSend.call(callbackContext,jqXHR,s)===false||completed)){// Abort if not done already and return\nreturn jqXHR.abort();}// Aborting is no longer a cancellation\nstrAbort=\"abort\";// Install callbacks on deferreds\ncompleteDeferred.add(s.complete);jqXHR.done(s.success);jqXHR.fail(s.error);// Get transport\ntransport=inspectPrefiltersOrTransports(transports,s,options,jqXHR);// If no transport, we auto-abort\nif(!transport){done(-1,\"No Transport\");}else{jqXHR.readyState=1;// Send global event\nif(fireGlobals){globalEventContext.trigger(\"ajaxSend\",[jqXHR,s]);}// If request was aborted inside ajaxSend, stop there\nif(completed){return jqXHR;}// Timeout\nif(s.async&&s.timeout>0){timeoutTimer=window.setTimeout(function(){jqXHR.abort(\"timeout\");},s.timeout);}try{completed=false;transport.send(requestHeaders,done);}catch(e){// Rethrow post-completion exceptions\nif(completed){throw e;}// Propagate others as results\ndone(-1,e);}}// Callback for when everything is done\nfunction done(status,nativeStatusText,responses,headers){var isSuccess,success,error,response,modified,statusText=nativeStatusText;// Ignore repeat invocations\nif(completed){return;}completed=true;// Clear timeout if it exists\nif(timeoutTimer){window.clearTimeout(timeoutTimer);}// Dereference transport for early garbage collection\n// (no matter how long the jqXHR object will be used)\ntransport=undefined;// Cache response headers\nresponseHeadersString=headers||\"\";// Set readyState\njqXHR.readyState=status>0?4:0;// Determine if successful\nisSuccess=status>=200&&status<300||status===304;// Get response data\nif(responses){response=ajaxHandleResponses(s,jqXHR,responses);}// Use a noop converter for missing script but not if jsonp\nif(!isSuccess&&jQuery.inArray(\"script\",s.dataTypes)>-1&&jQuery.inArray(\"json\",s.dataTypes)<0){s.converters[\"text script\"]=function(){};}// Convert no matter what (that way responseXXX fields are always set)\nresponse=ajaxConvert(s,response,jqXHR,isSuccess);// If successful, handle type chaining\nif(isSuccess){// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\nif(s.ifModified){modified=jqXHR.getResponseHeader(\"Last-Modified\");if(modified){jQuery.lastModified[cacheURL]=modified;}modified=jqXHR.getResponseHeader(\"etag\");if(modified){jQuery.etag[cacheURL]=modified;}}// if no content\nif(status===204||s.type===\"HEAD\"){statusText=\"nocontent\";// if not modified\n}else if(status===304){statusText=\"notmodified\";// If we have data, let's convert it\n}else{statusText=response.state;success=response.data;error=response.error;isSuccess=!error;}}else{// Extract error from statusText and normalize for non-aborts\nerror=statusText;if(status||!statusText){statusText=\"error\";if(status<0){status=0;}}}// Set data for the fake xhr object\njqXHR.status=status;jqXHR.statusText=(nativeStatusText||statusText)+\"\";// Success/Error\nif(isSuccess){deferred.resolveWith(callbackContext,[success,statusText,jqXHR]);}else{deferred.rejectWith(callbackContext,[jqXHR,statusText,error]);}// Status-dependent callbacks\njqXHR.statusCode(statusCode);statusCode=undefined;if(fireGlobals){globalEventContext.trigger(isSuccess?\"ajaxSuccess\":\"ajaxError\",[jqXHR,s,isSuccess?success:error]);}// Complete\ncompleteDeferred.fireWith(callbackContext,[jqXHR,statusText]);if(fireGlobals){globalEventContext.trigger(\"ajaxComplete\",[jqXHR,s]);// Handle the global AJAX counter\nif(! --jQuery.active){jQuery.event.trigger(\"ajaxStop\");}}}return jqXHR;},getJSON:function(url,data,callback){return jQuery.get(url,data,callback,\"json\");},getScript:function(url,callback){return jQuery.get(url,undefined,callback,\"script\");}});jQuery.each([\"get\",\"post\"],function(_i,method){jQuery[method]=function(url,data,callback,type){// Shift arguments if data argument was omitted\nif(isFunction(data)){type=type||callback;callback=data;data=undefined;}// The url can be an options object (which then must have .url)\nreturn jQuery.ajax(jQuery.extend({url:url,type:method,dataType:type,data:data,success:callback},jQuery.isPlainObject(url)&&url));};});jQuery.ajaxPrefilter(function(s){var i;for(i in s.headers){if(i.toLowerCase()===\"content-type\"){s.contentType=s.headers[i]||\"\";}}});jQuery._evalUrl=function(url,options,doc){return jQuery.ajax({url:url,// Make this explicit, since user can override this through ajaxSetup (#11264)\ntype:\"GET\",dataType:\"script\",cache:true,async:false,global:false,// Only evaluate the response if it is successful (gh-4126)\n// dataFilter is not invoked for failure responses, so using it instead\n// of the default converter is kludgy but it works.\nconverters:{\"text script\":function(){}},dataFilter:function(response){jQuery.globalEval(response,options,doc);}});};jQuery.fn.extend({wrapAll:function(html){var wrap;if(this[0]){if(isFunction(html)){html=html.call(this[0]);}// The elements to wrap the target around\nwrap=jQuery(html,this[0].ownerDocument).eq(0).clone(true);if(this[0].parentNode){wrap.insertBefore(this[0]);}wrap.map(function(){var elem=this;while(elem.firstElementChild){elem=elem.firstElementChild;}return elem;}).append(this);}return this;},wrapInner:function(html){if(isFunction(html)){return this.each(function(i){jQuery(this).wrapInner(html.call(this,i));});}return this.each(function(){var self=jQuery(this),contents=self.contents();if(contents.length){contents.wrapAll(html);}else{self.append(html);}});},wrap:function(html){var htmlIsFunction=isFunction(html);return this.each(function(i){jQuery(this).wrapAll(htmlIsFunction?html.call(this,i):html);});},unwrap:function(selector){this.parent(selector).not(\"body\").each(function(){jQuery(this).replaceWith(this.childNodes);});return this;}});jQuery.expr.pseudos.hidden=function(elem){return!jQuery.expr.pseudos.visible(elem);};jQuery.expr.pseudos.visible=function(elem){return!!(elem.offsetWidth||elem.offsetHeight||elem.getClientRects().length);};jQuery.ajaxSettings.xhr=function(){try{return new window.XMLHttpRequest();}catch(e){}};var xhrSuccessStatus={// File protocol always yields status code 0, assume 200\n0:200,// Support: IE <=9 only\n// #1450: sometimes IE returns 1223 when it should be 204\n1223:204},xhrSupported=jQuery.ajaxSettings.xhr();support.cors=!!xhrSupported&&\"withCredentials\"in xhrSupported;support.ajax=xhrSupported=!!xhrSupported;jQuery.ajaxTransport(function(options){var callback,errorCallback;// Cross domain only allowed if supported through XMLHttpRequest\nif(support.cors||xhrSupported&&!options.crossDomain){return{send:function(headers,complete){var i,xhr=options.xhr();xhr.open(options.type,options.url,options.async,options.username,options.password);// Apply custom fields if provided\nif(options.xhrFields){for(i in options.xhrFields){xhr[i]=options.xhrFields[i];}}// Override mime type if needed\nif(options.mimeType&&xhr.overrideMimeType){xhr.overrideMimeType(options.mimeType);}// X-Requested-With header\n// For cross-domain requests, seeing as conditions for a preflight are\n// akin to a jigsaw puzzle, we simply never set it to be sure.\n// (it can always be set on a per-request basis or even using ajaxSetup)\n// For same-domain requests, won't change header if already provided.\nif(!options.crossDomain&&!headers[\"X-Requested-With\"]){headers[\"X-Requested-With\"]=\"XMLHttpRequest\";}// Set headers\nfor(i in headers){xhr.setRequestHeader(i,headers[i]);}// Callback\ncallback=function(type){return function(){if(callback){callback=errorCallback=xhr.onload=xhr.onerror=xhr.onabort=xhr.ontimeout=xhr.onreadystatechange=null;if(type===\"abort\"){xhr.abort();}else if(type===\"error\"){// Support: IE <=9 only\n// On a manual native abort, IE9 throws\n// errors on any property access that is not readyState\nif(typeof xhr.status!==\"number\"){complete(0,\"error\");}else{complete(// File: protocol always yields status 0; see #8605, #14207\nxhr.status,xhr.statusText);}}else{complete(xhrSuccessStatus[xhr.status]||xhr.status,xhr.statusText,// Support: IE <=9 only\n// IE9 has no XHR2 but throws on binary (trac-11426)\n// For XHR2 non-text, let the caller handle it (gh-2498)\n(xhr.responseType||\"text\")!==\"text\"||typeof xhr.responseText!==\"string\"?{binary:xhr.response}:{text:xhr.responseText},xhr.getAllResponseHeaders());}}};};// Listen to events\nxhr.onload=callback();errorCallback=xhr.onerror=xhr.ontimeout=callback(\"error\");// Support: IE 9 only\n// Use onreadystatechange to replace onabort\n// to handle uncaught aborts\nif(xhr.onabort!==undefined){xhr.onabort=errorCallback;}else{xhr.onreadystatechange=function(){// Check readyState before timeout as it changes\nif(xhr.readyState===4){// Allow onerror to be called first,\n// but that will not handle a native abort\n// Also, save errorCallback to a variable\n// as xhr.onerror cannot be accessed\nwindow.setTimeout(function(){if(callback){errorCallback();}});}};}// Create the abort callback\ncallback=callback(\"abort\");try{// Do send the request (this may raise an exception)\nxhr.send(options.hasContent&&options.data||null);}catch(e){// #14683: Only rethrow if this hasn't been notified as an error yet\nif(callback){throw e;}}},abort:function(){if(callback){callback();}}};}});// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)\njQuery.ajaxPrefilter(function(s){if(s.crossDomain){s.contents.script=false;}});// Install script dataType\njQuery.ajaxSetup({accepts:{script:\"text/javascript, application/javascript, \"+\"application/ecmascript, application/x-ecmascript\"},contents:{script:/\\b(?:java|ecma)script\\b/},converters:{\"text script\":function(text){jQuery.globalEval(text);return text;}}});// Handle cache's special case and crossDomain\njQuery.ajaxPrefilter(\"script\",function(s){if(s.cache===undefined){s.cache=false;}if(s.crossDomain){s.type=\"GET\";}});// Bind script tag hack transport\njQuery.ajaxTransport(\"script\",function(s){// This transport only deals with cross domain or forced-by-attrs requests\nif(s.crossDomain||s.scriptAttrs){var script,callback;return{send:function(_,complete){script=jQuery(\"<script>\").attr(s.scriptAttrs||{}).prop({charset:s.scriptCharset,src:s.url}).on(\"load error\",callback=function(evt){script.remove();callback=null;if(evt){complete(evt.type===\"error\"?404:200,evt.type);}});// Use native DOM manipulation to avoid our domManip AJAX trickery\ndocument.head.appendChild(script[0]);},abort:function(){if(callback){callback();}}};}});var oldCallbacks=[],rjsonp=/(=)\\?(?=&|$)|\\?\\?/;// Default jsonp settings\njQuery.ajaxSetup({jsonp:\"callback\",jsonpCallback:function(){var callback=oldCallbacks.pop()||jQuery.expando+\"_\"+nonce.guid++;this[callback]=true;return callback;}});// Detect, normalize options and install callbacks for jsonp requests\njQuery.ajaxPrefilter(\"json jsonp\",function(s,originalSettings,jqXHR){var callbackName,overwritten,responseContainer,jsonProp=s.jsonp!==false&&(rjsonp.test(s.url)?\"url\":typeof s.data===\"string\"&&(s.contentType||\"\").indexOf(\"application/x-www-form-urlencoded\")===0&&rjsonp.test(s.data)&&\"data\");// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\nif(jsonProp||s.dataTypes[0]===\"jsonp\"){// Get callback name, remembering preexisting value associated with it\ncallbackName=s.jsonpCallback=isFunction(s.jsonpCallback)?s.jsonpCallback():s.jsonpCallback;// Insert callback into url or form data\nif(jsonProp){s[jsonProp]=s[jsonProp].replace(rjsonp,\"$1\"+callbackName);}else if(s.jsonp!==false){s.url+=(rquery.test(s.url)?\"&\":\"?\")+s.jsonp+\"=\"+callbackName;}// Use data converter to retrieve json after script execution\ns.converters[\"script json\"]=function(){if(!responseContainer){jQuery.error(callbackName+\" was not called\");}return responseContainer[0];};// Force json dataType\ns.dataTypes[0]=\"json\";// Install callback\noverwritten=window[callbackName];window[callbackName]=function(){responseContainer=arguments;};// Clean-up function (fires after converters)\njqXHR.always(function(){// If previous value didn't exist - remove it\nif(overwritten===undefined){jQuery(window).removeProp(callbackName);// Otherwise restore preexisting value\n}else{window[callbackName]=overwritten;}// Save back as free\nif(s[callbackName]){// Make sure that re-using the options doesn't screw things around\ns.jsonpCallback=originalSettings.jsonpCallback;// Save the callback name for future use\noldCallbacks.push(callbackName);}// Call if it was a function and we have a response\nif(responseContainer&&isFunction(overwritten)){overwritten(responseContainer[0]);}responseContainer=overwritten=undefined;});// Delegate to script\nreturn\"script\";}});// Support: Safari 8 only\n// In Safari 8 documents created via document.implementation.createHTMLDocument\n// collapse sibling forms: the second one becomes a child of the first one.\n// Because of that, this security measure has to be disabled in Safari 8.\n// https://bugs.webkit.org/show_bug.cgi?id=137337\nsupport.createHTMLDocument=function(){var body=document.implementation.createHTMLDocument(\"\").body;body.innerHTML=\"<form></form><form></form>\";return body.childNodes.length===2;}();// Argument \"data\" should be string of html\n// context (optional): If specified, the fragment will be created in this context,\n// defaults to document\n// keepScripts (optional): If true, will include scripts passed in the html string\njQuery.parseHTML=function(data,context,keepScripts){if(typeof data!==\"string\"){return[];}if(typeof context===\"boolean\"){keepScripts=context;context=false;}var base,parsed,scripts;if(!context){// Stop scripts or inline event handlers from being executed immediately\n// by using document.implementation\nif(support.createHTMLDocument){context=document.implementation.createHTMLDocument(\"\");// Set the base href for the created document\n// so any parsed elements with URLs\n// are based on the document's URL (gh-2965)\nbase=context.createElement(\"base\");base.href=document.location.href;context.head.appendChild(base);}else{context=document;}}parsed=rsingleTag.exec(data);scripts=!keepScripts&&[];// Single tag\nif(parsed){return[context.createElement(parsed[1])];}parsed=buildFragment([data],context,scripts);if(scripts&&scripts.length){jQuery(scripts).remove();}return jQuery.merge([],parsed.childNodes);};/**\n * Load a url into a page\n */jQuery.fn.load=function(url,params,callback){var selector,type,response,self=this,off=url.indexOf(\" \");if(off>-1){selector=stripAndCollapse(url.slice(off));url=url.slice(0,off);}// If it's a function\nif(isFunction(params)){// We assume that it's the callback\ncallback=params;params=undefined;// Otherwise, build a param string\n}else if(params&&typeof params===\"object\"){type=\"POST\";}// If we have elements to modify, make the request\nif(self.length>0){jQuery.ajax({url:url,// If \"type\" variable is undefined, then \"GET\" method will be used.\n// Make value of this field explicit since\n// user can override it through ajaxSetup method\ntype:type||\"GET\",dataType:\"html\",data:params}).done(function(responseText){// Save response for use in complete callback\nresponse=arguments;self.html(selector?// If a selector was specified, locate the right elements in a dummy div\n// Exclude scripts to avoid IE 'Permission Denied' errors\njQuery(\"<div>\").append(jQuery.parseHTML(responseText)).find(selector):// Otherwise use the full result\nresponseText);// If the request succeeds, this function gets \"data\", \"status\", \"jqXHR\"\n// but they are ignored because response was set above.\n// If it fails, this function gets \"jqXHR\", \"status\", \"error\"\n}).always(callback&&function(jqXHR,status){self.each(function(){callback.apply(this,response||[jqXHR.responseText,status,jqXHR]);});});}return this;};jQuery.expr.pseudos.animated=function(elem){return jQuery.grep(jQuery.timers,function(fn){return elem===fn.elem;}).length;};jQuery.offset={setOffset:function(elem,options,i){var curPosition,curLeft,curCSSTop,curTop,curOffset,curCSSLeft,calculatePosition,position=jQuery.css(elem,\"position\"),curElem=jQuery(elem),props={};// Set position first, in-case top/left are set even on static elem\nif(position===\"static\"){elem.style.position=\"relative\";}curOffset=curElem.offset();curCSSTop=jQuery.css(elem,\"top\");curCSSLeft=jQuery.css(elem,\"left\");calculatePosition=(position===\"absolute\"||position===\"fixed\")&&(curCSSTop+curCSSLeft).indexOf(\"auto\")>-1;// Need to be able to calculate position if either\n// top or left is auto and position is either absolute or fixed\nif(calculatePosition){curPosition=curElem.position();curTop=curPosition.top;curLeft=curPosition.left;}else{curTop=parseFloat(curCSSTop)||0;curLeft=parseFloat(curCSSLeft)||0;}if(isFunction(options)){// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\noptions=options.call(elem,i,jQuery.extend({},curOffset));}if(options.top!=null){props.top=options.top-curOffset.top+curTop;}if(options.left!=null){props.left=options.left-curOffset.left+curLeft;}if(\"using\"in options){options.using.call(elem,props);}else{curElem.css(props);}}};jQuery.fn.extend({// offset() relates an element's border box to the document origin\noffset:function(options){// Preserve chaining for setter\nif(arguments.length){return options===undefined?this:this.each(function(i){jQuery.offset.setOffset(this,options,i);});}var rect,win,elem=this[0];if(!elem){return;}// Return zeros for disconnected and hidden (display: none) elements (gh-2310)\n// Support: IE <=11 only\n// Running getBoundingClientRect on a\n// disconnected node in IE throws an error\nif(!elem.getClientRects().length){return{top:0,left:0};}// Get document-relative position by adding viewport scroll to viewport-relative gBCR\nrect=elem.getBoundingClientRect();win=elem.ownerDocument.defaultView;return{top:rect.top+win.pageYOffset,left:rect.left+win.pageXOffset};},// position() relates an element's margin box to its offset parent's padding box\n// This corresponds to the behavior of CSS absolute positioning\nposition:function(){if(!this[0]){return;}var offsetParent,offset,doc,elem=this[0],parentOffset={top:0,left:0};// position:fixed elements are offset from the viewport, which itself always has zero offset\nif(jQuery.css(elem,\"position\")===\"fixed\"){// Assume position:fixed implies availability of getBoundingClientRect\noffset=elem.getBoundingClientRect();}else{offset=this.offset();// Account for the *real* offset parent, which can be the document or its root element\n// when a statically positioned element is identified\ndoc=elem.ownerDocument;offsetParent=elem.offsetParent||doc.documentElement;while(offsetParent&&(offsetParent===doc.body||offsetParent===doc.documentElement)&&jQuery.css(offsetParent,\"position\")===\"static\"){offsetParent=offsetParent.parentNode;}if(offsetParent&&offsetParent!==elem&&offsetParent.nodeType===1){// Incorporate borders into its offset, since they are outside its content origin\nparentOffset=jQuery(offsetParent).offset();parentOffset.top+=jQuery.css(offsetParent,\"borderTopWidth\",true);parentOffset.left+=jQuery.css(offsetParent,\"borderLeftWidth\",true);}}// Subtract parent offsets and element margins\nreturn{top:offset.top-parentOffset.top-jQuery.css(elem,\"marginTop\",true),left:offset.left-parentOffset.left-jQuery.css(elem,\"marginLeft\",true)};},// This method will return documentElement in the following cases:\n// 1) For the element inside the iframe without offsetParent, this method will return\n//    documentElement of the parent window\n// 2) For the hidden or detached element\n// 3) For body or html element, i.e. in case of the html node - it will return itself\n//\n// but those exceptions were never presented as a real life use-cases\n// and might be considered as more preferable results.\n//\n// This logic, however, is not guaranteed and can change at any point in the future\noffsetParent:function(){return this.map(function(){var offsetParent=this.offsetParent;while(offsetParent&&jQuery.css(offsetParent,\"position\")===\"static\"){offsetParent=offsetParent.offsetParent;}return offsetParent||documentElement;});}});// Create scrollLeft and scrollTop methods\njQuery.each({scrollLeft:\"pageXOffset\",scrollTop:\"pageYOffset\"},function(method,prop){var top=\"pageYOffset\"===prop;jQuery.fn[method]=function(val){return access(this,function(elem,method,val){// Coalesce documents and windows\nvar win;if(isWindow(elem)){win=elem;}else if(elem.nodeType===9){win=elem.defaultView;}if(val===undefined){return win?win[prop]:elem[method];}if(win){win.scrollTo(!top?val:win.pageXOffset,top?val:win.pageYOffset);}else{elem[method]=val;}},method,val,arguments.length);};});// Support: Safari <=7 - 9.1, Chrome <=37 - 49\n// Add the top/left cssHooks using jQuery.fn.position\n// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347\n// getComputedStyle returns percent when specified for top/left/bottom/right;\n// rather than make the css module depend on the offset module, just check for it here\njQuery.each([\"top\",\"left\"],function(_i,prop){jQuery.cssHooks[prop]=addGetHookIf(support.pixelPosition,function(elem,computed){if(computed){computed=curCSS(elem,prop);// If curCSS returns percentage, fallback to offset\nreturn rnumnonpx.test(computed)?jQuery(elem).position()[prop]+\"px\":computed;}});});// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\njQuery.each({Height:\"height\",Width:\"width\"},function(name,type){jQuery.each({padding:\"inner\"+name,content:type,\"\":\"outer\"+name},function(defaultExtra,funcName){// Margin is only for outerHeight, outerWidth\njQuery.fn[funcName]=function(margin,value){var chainable=arguments.length&&(defaultExtra||typeof margin!==\"boolean\"),extra=defaultExtra||(margin===true||value===true?\"margin\":\"border\");return access(this,function(elem,type,value){var doc;if(isWindow(elem)){// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)\nreturn funcName.indexOf(\"outer\")===0?elem[\"inner\"+name]:elem.document.documentElement[\"client\"+name];}// Get document width or height\nif(elem.nodeType===9){doc=elem.documentElement;// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n// whichever is greatest\nreturn Math.max(elem.body[\"scroll\"+name],doc[\"scroll\"+name],elem.body[\"offset\"+name],doc[\"offset\"+name],doc[\"client\"+name]);}return value===undefined?// Get width or height on the element, requesting but not forcing parseFloat\njQuery.css(elem,type,extra):// Set width or height on the element\njQuery.style(elem,type,value,extra);},type,chainable?margin:undefined,chainable);};});});jQuery.each([\"ajaxStart\",\"ajaxStop\",\"ajaxComplete\",\"ajaxError\",\"ajaxSuccess\",\"ajaxSend\"],function(_i,type){jQuery.fn[type]=function(fn){return this.on(type,fn);};});jQuery.fn.extend({bind:function(types,data,fn){return this.on(types,null,data,fn);},unbind:function(types,fn){return this.off(types,null,fn);},delegate:function(selector,types,data,fn){return this.on(types,selector,data,fn);},undelegate:function(selector,types,fn){// ( namespace ) or ( selector, types [, fn] )\nreturn arguments.length===1?this.off(selector,\"**\"):this.off(types,selector||\"**\",fn);},hover:function(fnOver,fnOut){return this.mouseenter(fnOver).mouseleave(fnOut||fnOver);}});jQuery.each((\"blur focus focusin focusout resize scroll click dblclick \"+\"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \"+\"change select submit keydown keypress keyup contextmenu\").split(\" \"),function(_i,name){// Handle event binding\njQuery.fn[name]=function(data,fn){return arguments.length>0?this.on(name,null,data,fn):this.trigger(name);};});// Support: Android <=4.0 only\n// Make sure we trim BOM and NBSP\nvar rtrim=/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;// Bind a function to a context, optionally partially applying any\n// arguments.\n// jQuery.proxy is deprecated to promote standards (specifically Function#bind)\n// However, it is not slated for removal any time soon\njQuery.proxy=function(fn,context){var tmp,args,proxy;if(typeof context===\"string\"){tmp=fn[context];context=fn;fn=tmp;}// Quick check to determine if target is callable, in the spec\n// this throws a TypeError, but we will just return undefined.\nif(!isFunction(fn)){return undefined;}// Simulated bind\nargs=slice.call(arguments,2);proxy=function(){return fn.apply(context||this,args.concat(slice.call(arguments)));};// Set the guid of unique handler to the same of original handler, so it can be removed\nproxy.guid=fn.guid=fn.guid||jQuery.guid++;return proxy;};jQuery.holdReady=function(hold){if(hold){jQuery.readyWait++;}else{jQuery.ready(true);}};jQuery.isArray=Array.isArray;jQuery.parseJSON=JSON.parse;jQuery.nodeName=nodeName;jQuery.isFunction=isFunction;jQuery.isWindow=isWindow;jQuery.camelCase=camelCase;jQuery.type=toType;jQuery.now=Date.now;jQuery.isNumeric=function(obj){// As of jQuery 3.0, isNumeric is limited to\n// strings and numbers (primitives or objects)\n// that can be coerced to finite numbers (gh-2662)\nvar type=jQuery.type(obj);return(type===\"number\"||type===\"string\")&&// parseFloat NaNs numeric-cast false positives (\"\")\n// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n// subtraction forces infinities to NaN\n!isNaN(obj-parseFloat(obj));};jQuery.trim=function(text){return text==null?\"\":(text+\"\").replace(rtrim,\"\");};// Register as a named AMD module, since jQuery can be concatenated with other\n// files that may use define, but not via a proper concatenation script that\n// understands anonymous AMD modules. A named AMD is safest and most robust\n// way to register. Lowercase jquery is used because AMD module names are\n// derived from file names, and jQuery is normally delivered in a lowercase\n// file name. Do this after creating the global so that if an AMD module wants\n// to call noConflict to hide this version of jQuery, it will work.\n// Note that for maximum portability, libraries that are not jQuery should\n// declare themselves as anonymous modules, and avoid setting a global if an\n// AMD loader is present. jQuery is a special case. For more information, see\n// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\nif(true){!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function(){return jQuery;}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));}var// Map over jQuery in case of overwrite\n_jQuery=window.jQuery,// Map over the $ in case of overwrite\n_$=window.$;jQuery.noConflict=function(deep){if(window.$===jQuery){window.$=_$;}if(deep&&window.jQuery===jQuery){window.jQuery=_jQuery;}return jQuery;};// Expose jQuery and $ identifiers, even in AMD\n// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\n// and CommonJS for browser emulators (#13566)\nif(typeof noGlobal===\"undefined\"){window.jQuery=window.$=jQuery;}return jQuery;});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/jquery/dist/jquery.js\n");

/***/ }),

/***/ "./packages/twentytwenty-theme/src/components/index.js":
/*!*************************************************************!*\
  !*** ./packages/twentytwenty-theme/src/components/index.js ***!
  \*************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _icons_robot_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./icons/robot.js */ \"./packages/twentytwenty-theme/src/components/icons/robot.js\");\n/* harmony import */ var _frontity_components_switch__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @frontity/components/switch */ \"./node_modules/@frontity/components/switch.tsx\");\n/* harmony import */ var _footer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./footer */ \"./packages/twentytwenty-theme/src/components/footer.js\");\n/* harmony import */ var _styles_global_styles__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./styles/global-styles */ \"./packages/twentytwenty-theme/src/components/styles/global-styles.js\");\n/* harmony import */ var _styles_font_faces__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./styles/font-faces */ \"./packages/twentytwenty-theme/src/components/styles/font-faces.js\");\n/* harmony import */ var _header__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./header */ \"./packages/twentytwenty-theme/src/components/header.js\");\n/* harmony import */ var _archive__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./archive */ \"./packages/twentytwenty-theme/src/components/archive/index.js\");\n/* harmony import */ var _portfolio__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./portfolio */ \"./packages/twentytwenty-theme/src/components/portfolio/index.js\");\n/* harmony import */ var _loading__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./loading */ \"./packages/twentytwenty-theme/src/components/loading.js\");\n/* harmony import */ var _post__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./post */ \"./packages/twentytwenty-theme/src/components/post/index.js\");\n/* harmony import */ var _page__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./page */ \"./packages/twentytwenty-theme/src/components/page/index.js\");\n/* harmony import */ var _home__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./home */ \"./packages/twentytwenty-theme/src/components/home/index.js\");\n/* harmony import */ var _search_search_results__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./search/search-results */ \"./packages/twentytwenty-theme/src/components/search/search-results.js\");\n/* harmony import */ var _styles_skip_link__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./styles/skip-link */ \"./packages/twentytwenty-theme/src/components/styles/skip-link.js\");\n/* harmony import */ var _page_meta_title__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./page-meta-title */ \"./packages/twentytwenty-theme/src/components/page-meta-title.js\");\n/* harmony import */ var _page_error__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./page-error */ \"./packages/twentytwenty-theme/src/components/page-error.js\");\n/* harmony import */ var _js_jcw__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../js/jcw */ \"./packages/twentytwenty-theme/src/js/jcw.js\");\n/* harmony import */ var _js_jcw_css__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../js/jcw_css */ \"./packages/twentytwenty-theme/src/js/jcw_css.js\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}/**\n * Theme is the root React component of our theme. The one we will export\n * in roots.\n */const Theme=({state})=>{// Get information about the current URL.\nconst data=state.source.get(state.router.link);return Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"Fragment\"],{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(Loader,{className:\"loader\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_icons_robot_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"],{})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(frontity__WEBPACK_IMPORTED_MODULE_1__[\"Global\"],{styles:Object(_styles_global_styles__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(state.theme.colors)}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_styles_font_faces__WEBPACK_IMPORTED_MODULE_6__[\"default\"],{}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_js_jcw_css__WEBPACK_IMPORTED_MODULE_19__[\"default\"],{}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_page_meta_title__WEBPACK_IMPORTED_MODULE_16__[\"default\"],{}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_js_jcw__WEBPACK_IMPORTED_MODULE_18__[\"default\"],{}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(frontity__WEBPACK_IMPORTED_MODULE_1__[\"Head\"],{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(\"meta\",{name:\"description\",content:state.frontity.description}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(\"html\",{lang:\"en\"})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_styles_skip_link__WEBPACK_IMPORTED_MODULE_15__[\"default\"],{as:\"a\",href:\"#main\",children:\"Skip to main content\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(\"div\",{style:{minHeight:\"calc(100vh - 190px)\"},children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_header__WEBPACK_IMPORTED_MODULE_7__[\"default\"],{}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(Main,{id:\"main\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(_frontity_components_switch__WEBPACK_IMPORTED_MODULE_3__[\"default\"],{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_loading__WEBPACK_IMPORTED_MODULE_10__[\"default\"],{when:data.isFetching}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_search_search_results__WEBPACK_IMPORTED_MODULE_14__[\"default\"],{when:data.isSearch}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_home__WEBPACK_IMPORTED_MODULE_13__[\"default\"],{when:data.isHome}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_portfolio__WEBPACK_IMPORTED_MODULE_9__[\"default\"],{when:data.isArchive}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_archive__WEBPACK_IMPORTED_MODULE_8__[\"default\"],{when:data.isPostArchive}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_page__WEBPACK_IMPORTED_MODULE_12__[\"default\"],{when:data.isPage}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_post__WEBPACK_IMPORTED_MODULE_11__[\"default\"],{when:data.isPostType}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_page_error__WEBPACK_IMPORTED_MODULE_17__[\"default\"],{when:data.isError})]})})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_footer__WEBPACK_IMPORTED_MODULE_4__[\"default\"],{})]});};/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"connect\"])(Theme));const Main=Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(\"main\", false?undefined:{target:\"ezegosl1\",label:\"Main\"})( false?undefined:{name:\"qohk7d\",styles:\"display:flex;flex-direction:column;max-width:93rem;margin:0 auto\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2pjd3JldGxpbmQvd2Vic2l0ZS9qY3dfd2Vic2l0ZS9qY3cvcGFja2FnZXMvdHdlbnR5dHdlbnR5LXRoZW1lL3NyYy9jb21wb25lbnRzL2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQThFd0IiLCJmaWxlIjoiL2hvbWUvamN3cmV0bGluZC93ZWJzaXRlL2pjd193ZWJzaXRlL2pjdy9wYWNrYWdlcy90d2VudHl0d2VudHktdGhlbWUvc3JjL2NvbXBvbmVudHMvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb25uZWN0LCBHbG9iYWwsIEhlYWQsIHN0eWxlZCB9IGZyb20gXCJmcm9udGl0eVwiO1xuaW1wb3J0IFJvYm90SWNvbiBmcm9tIFwiLi9pY29ucy9yb2JvdC5qc1wiXG5pbXBvcnQgU3dpdGNoIGZyb20gXCJAZnJvbnRpdHkvY29tcG9uZW50cy9zd2l0Y2hcIjtcbmltcG9ydCBGb290ZXIgZnJvbSBcIi4vZm9vdGVyXCI7XG5pbXBvcnQgZ2xvYmFsU3R5bGVzIGZyb20gXCIuL3N0eWxlcy9nbG9iYWwtc3R5bGVzXCI7XG5pbXBvcnQgRm9udEZhY2VzIGZyb20gXCIuL3N0eWxlcy9mb250LWZhY2VzXCI7XG5pbXBvcnQgSGVhZGVyIGZyb20gXCIuL2hlYWRlclwiO1xuaW1wb3J0IEFyY2hpdmUgZnJvbSBcIi4vYXJjaGl2ZVwiO1xuaW1wb3J0IFBvcnRmb2xpbyBmcm9tIFwiLi9wb3J0Zm9saW9cIjtcbmltcG9ydCBMb2FkaW5nIGZyb20gXCIuL2xvYWRpbmdcIjtcbmltcG9ydCBQb3N0IGZyb20gXCIuL3Bvc3RcIjtcbmltcG9ydCBQYWdlIGZyb20gXCIuL3BhZ2VcIjtcbmltcG9ydCBIb21lUGFnZSBmcm9tIFwiLi9ob21lXCI7XG5pbXBvcnQgU2VhcmNoUmVzdWx0cyBmcm9tIFwiLi9zZWFyY2gvc2VhcmNoLXJlc3VsdHNcIjtcbmltcG9ydCBTa2lwTGluayBmcm9tIFwiLi9zdHlsZXMvc2tpcC1saW5rXCI7XG5pbXBvcnQgTWV0YVRpdGxlIGZyb20gXCIuL3BhZ2UtbWV0YS10aXRsZVwiO1xuaW1wb3J0IFBhZ2VFcnJvciBmcm9tIFwiLi9wYWdlLWVycm9yXCI7XG5pbXBvcnQgSkNXIGZyb20gXCIuLi9qcy9qY3dcIjtcbmltcG9ydCBKY3dTdHlsZSBmcm9tIFwiLi4vanMvamN3X2Nzc1wiO1xuXG4vKipcbiAqIFRoZW1lIGlzIHRoZSByb290IFJlYWN0IGNvbXBvbmVudCBvZiBvdXIgdGhlbWUuIFRoZSBvbmUgd2Ugd2lsbCBleHBvcnRcbiAqIGluIHJvb3RzLlxuICovXG5jb25zdCBUaGVtZSA9ICh7IHN0YXRlIH0pID0+IHtcbiAgLy8gR2V0IGluZm9ybWF0aW9uIGFib3V0IHRoZSBjdXJyZW50IFVSTC5cbiAgY29uc3QgZGF0YSA9IHN0YXRlLnNvdXJjZS5nZXQoc3RhdGUucm91dGVyLmxpbmspO1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIHsvKiBBZGQgZ2xvYmFsIHN0eWxlcyBmb3IgdGhlIHdob2xlIHNpdGUsIGxpa2UgYm9keSBvciBhJ3Mgb3IgZm9udC1mYWNlcy5cbiAgICAgICAgTm90IGNsYXNzZXMgaGVyZSBiZWNhdXNlIHdlIHVzZSBDU1MtaW4tSlMuIE9ubHkgZ2xvYmFsIEhUTUwgdGFncy4gKi99XG4gICAgICA8TG9hZGVyIGNsYXNzTmFtZT1cImxvYWRlclwiPlxuICAgICAgICA8Um9ib3RJY29uIC8+XG4gICAgICA8L0xvYWRlcj5cbiAgICAgIDxHbG9iYWwgc3R5bGVzPXtnbG9iYWxTdHlsZXMoc3RhdGUudGhlbWUuY29sb3JzKX0gLz5cbiAgICAgIDxGb250RmFjZXMgLz5cbiAgICAgIDxKY3dTdHlsZSAvPlxuXG4gICAgICB7LyogQWRkIHNvbWUgbWV0YXRhZ3MgdG8gdGhlIDxoZWFkPiBvZiB0aGUgSFRNTC4gKi99XG4gICAgICA8TWV0YVRpdGxlIC8+XG4gICAgICA8SkNXIC8+XG4gICAgICA8SGVhZD5cbiAgICAgICAgPG1ldGEgbmFtZT1cImRlc2NyaXB0aW9uXCIgY29udGVudD17c3RhdGUuZnJvbnRpdHkuZGVzY3JpcHRpb259IC8+XG4gICAgICAgIDxodG1sIGxhbmc9XCJlblwiIC8+XG4gICAgICA8L0hlYWQ+XG4gICAgICB7LyogQWNjZXNzaWJpbGl0eTogUHJvdmlkZXMgYWJpbGl0eSB0byBza2lwIHRvIG1haW4gY29udGVudCAqL31cbiAgICAgIDxTa2lwTGluayBhcz1cImFcIiBocmVmPVwiI21haW5cIj5cbiAgICAgICAgU2tpcCB0byBtYWluIGNvbnRlbnRcbiAgICAgIDwvU2tpcExpbms+XG5cbiAgICAgIDxkaXYgc3R5bGU9e3sgbWluSGVpZ2h0OiBcImNhbGMoMTAwdmggLSAxOTBweClcIiB9fT5cbiAgICAgICAgey8qIEFkZCB0aGUgaGVhZGVyIG9mIHRoZSBzaXRlLiAqL31cbiAgICAgICAgPEhlYWRlciAvPlxuXG4gICAgICAgIHsvKiBBZGQgdGhlIG1haW4gc2VjdGlvbi4gSXQgcmVuZGVycyBhIGRpZmZlcmVudCBjb21wb25lbnQgZGVwZW5kaW5nXG4gICAgICAgIG9uIHRoZSB0eXBlIG9mIFVSTCB3ZSBhcmUgaW4uICovfVxuICAgICAgICA8TWFpbiBpZD1cIm1haW5cIj5cbiAgICAgICAgICA8U3dpdGNoPlxuICAgICAgICAgICAgPExvYWRpbmcgd2hlbj17ZGF0YS5pc0ZldGNoaW5nfSAvPlxuICAgICAgICAgICAgPFNlYXJjaFJlc3VsdHMgd2hlbj17ZGF0YS5pc1NlYXJjaH0gLz5cbiAgICAgICAgICAgIDxIb21lUGFnZSB3aGVuPXtkYXRhLmlzSG9tZX0gLz5cbiAgICAgICAgICAgIDxQb3J0Zm9saW8gd2hlbj17ZGF0YS5pc0FyY2hpdmV9IC8+XG4gICAgICAgICAgICA8QXJjaGl2ZSB3aGVuPXtkYXRhLmlzUG9zdEFyY2hpdmV9IC8+XG4gICAgICAgICAgICA8UGFnZSB3aGVuPXtkYXRhLmlzUGFnZX0gLz5cbiAgICAgICAgICAgIDxQb3N0IHdoZW49e2RhdGEuaXNQb3N0VHlwZX0gLz5cbiAgICAgICAgICAgIDxQYWdlRXJyb3Igd2hlbj17ZGF0YS5pc0Vycm9yfSAvPlxuICAgICAgICAgIDwvU3dpdGNoPlxuICAgICAgICA8L01haW4+XG4gICAgICA8L2Rpdj5cblxuICAgICAgPEZvb3RlciAvPlxuICAgIDwvPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChUaGVtZSk7XG5cbmNvbnN0IE1haW4gPSBzdHlsZWQubWFpbmBcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgbWF4LXdpZHRoOiA5M3JlbTtcbiAgbWFyZ2luOiAwIGF1dG87XG5gO1xuXG5cbmNvbnN0IExvYWRlciA9IHN0eWxlZC5kaXZgXG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgd2lkdGg6IDEwMHZ3O1xuICBoZWlnaHQ6IDEwMHZoO1xuICBjb250ZW50OiBcIiBcIjtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzIyMjtcbiAgei1pbmRleDogMTAwO1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbmA7XG4iXX0= */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Loader=Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(\"div\", false?undefined:{target:\"ezegosl0\",label:\"Loader\"})( false?undefined:{name:\"bzp2js\",styles:\"position:fixed;width:100vw;height:100vh;content:\\\" \\\";background-color:#222;z-index:100;display:flex;justify-content:center\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2pjd3JldGxpbmQvd2Vic2l0ZS9qY3dfd2Vic2l0ZS9qY3cvcGFja2FnZXMvdHdlbnR5dHdlbnR5LXRoZW1lL3NyYy9jb21wb25lbnRzL2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXNGeUIiLCJmaWxlIjoiL2hvbWUvamN3cmV0bGluZC93ZWJzaXRlL2pjd193ZWJzaXRlL2pjdy9wYWNrYWdlcy90d2VudHl0d2VudHktdGhlbWUvc3JjL2NvbXBvbmVudHMvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb25uZWN0LCBHbG9iYWwsIEhlYWQsIHN0eWxlZCB9IGZyb20gXCJmcm9udGl0eVwiO1xuaW1wb3J0IFJvYm90SWNvbiBmcm9tIFwiLi9pY29ucy9yb2JvdC5qc1wiXG5pbXBvcnQgU3dpdGNoIGZyb20gXCJAZnJvbnRpdHkvY29tcG9uZW50cy9zd2l0Y2hcIjtcbmltcG9ydCBGb290ZXIgZnJvbSBcIi4vZm9vdGVyXCI7XG5pbXBvcnQgZ2xvYmFsU3R5bGVzIGZyb20gXCIuL3N0eWxlcy9nbG9iYWwtc3R5bGVzXCI7XG5pbXBvcnQgRm9udEZhY2VzIGZyb20gXCIuL3N0eWxlcy9mb250LWZhY2VzXCI7XG5pbXBvcnQgSGVhZGVyIGZyb20gXCIuL2hlYWRlclwiO1xuaW1wb3J0IEFyY2hpdmUgZnJvbSBcIi4vYXJjaGl2ZVwiO1xuaW1wb3J0IFBvcnRmb2xpbyBmcm9tIFwiLi9wb3J0Zm9saW9cIjtcbmltcG9ydCBMb2FkaW5nIGZyb20gXCIuL2xvYWRpbmdcIjtcbmltcG9ydCBQb3N0IGZyb20gXCIuL3Bvc3RcIjtcbmltcG9ydCBQYWdlIGZyb20gXCIuL3BhZ2VcIjtcbmltcG9ydCBIb21lUGFnZSBmcm9tIFwiLi9ob21lXCI7XG5pbXBvcnQgU2VhcmNoUmVzdWx0cyBmcm9tIFwiLi9zZWFyY2gvc2VhcmNoLXJlc3VsdHNcIjtcbmltcG9ydCBTa2lwTGluayBmcm9tIFwiLi9zdHlsZXMvc2tpcC1saW5rXCI7XG5pbXBvcnQgTWV0YVRpdGxlIGZyb20gXCIuL3BhZ2UtbWV0YS10aXRsZVwiO1xuaW1wb3J0IFBhZ2VFcnJvciBmcm9tIFwiLi9wYWdlLWVycm9yXCI7XG5pbXBvcnQgSkNXIGZyb20gXCIuLi9qcy9qY3dcIjtcbmltcG9ydCBKY3dTdHlsZSBmcm9tIFwiLi4vanMvamN3X2Nzc1wiO1xuXG4vKipcbiAqIFRoZW1lIGlzIHRoZSByb290IFJlYWN0IGNvbXBvbmVudCBvZiBvdXIgdGhlbWUuIFRoZSBvbmUgd2Ugd2lsbCBleHBvcnRcbiAqIGluIHJvb3RzLlxuICovXG5jb25zdCBUaGVtZSA9ICh7IHN0YXRlIH0pID0+IHtcbiAgLy8gR2V0IGluZm9ybWF0aW9uIGFib3V0IHRoZSBjdXJyZW50IFVSTC5cbiAgY29uc3QgZGF0YSA9IHN0YXRlLnNvdXJjZS5nZXQoc3RhdGUucm91dGVyLmxpbmspO1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIHsvKiBBZGQgZ2xvYmFsIHN0eWxlcyBmb3IgdGhlIHdob2xlIHNpdGUsIGxpa2UgYm9keSBvciBhJ3Mgb3IgZm9udC1mYWNlcy5cbiAgICAgICAgTm90IGNsYXNzZXMgaGVyZSBiZWNhdXNlIHdlIHVzZSBDU1MtaW4tSlMuIE9ubHkgZ2xvYmFsIEhUTUwgdGFncy4gKi99XG4gICAgICA8TG9hZGVyIGNsYXNzTmFtZT1cImxvYWRlclwiPlxuICAgICAgICA8Um9ib3RJY29uIC8+XG4gICAgICA8L0xvYWRlcj5cbiAgICAgIDxHbG9iYWwgc3R5bGVzPXtnbG9iYWxTdHlsZXMoc3RhdGUudGhlbWUuY29sb3JzKX0gLz5cbiAgICAgIDxGb250RmFjZXMgLz5cbiAgICAgIDxKY3dTdHlsZSAvPlxuXG4gICAgICB7LyogQWRkIHNvbWUgbWV0YXRhZ3MgdG8gdGhlIDxoZWFkPiBvZiB0aGUgSFRNTC4gKi99XG4gICAgICA8TWV0YVRpdGxlIC8+XG4gICAgICA8SkNXIC8+XG4gICAgICA8SGVhZD5cbiAgICAgICAgPG1ldGEgbmFtZT1cImRlc2NyaXB0aW9uXCIgY29udGVudD17c3RhdGUuZnJvbnRpdHkuZGVzY3JpcHRpb259IC8+XG4gICAgICAgIDxodG1sIGxhbmc9XCJlblwiIC8+XG4gICAgICA8L0hlYWQ+XG4gICAgICB7LyogQWNjZXNzaWJpbGl0eTogUHJvdmlkZXMgYWJpbGl0eSB0byBza2lwIHRvIG1haW4gY29udGVudCAqL31cbiAgICAgIDxTa2lwTGluayBhcz1cImFcIiBocmVmPVwiI21haW5cIj5cbiAgICAgICAgU2tpcCB0byBtYWluIGNvbnRlbnRcbiAgICAgIDwvU2tpcExpbms+XG5cbiAgICAgIDxkaXYgc3R5bGU9e3sgbWluSGVpZ2h0OiBcImNhbGMoMTAwdmggLSAxOTBweClcIiB9fT5cbiAgICAgICAgey8qIEFkZCB0aGUgaGVhZGVyIG9mIHRoZSBzaXRlLiAqL31cbiAgICAgICAgPEhlYWRlciAvPlxuXG4gICAgICAgIHsvKiBBZGQgdGhlIG1haW4gc2VjdGlvbi4gSXQgcmVuZGVycyBhIGRpZmZlcmVudCBjb21wb25lbnQgZGVwZW5kaW5nXG4gICAgICAgIG9uIHRoZSB0eXBlIG9mIFVSTCB3ZSBhcmUgaW4uICovfVxuICAgICAgICA8TWFpbiBpZD1cIm1haW5cIj5cbiAgICAgICAgICA8U3dpdGNoPlxuICAgICAgICAgICAgPExvYWRpbmcgd2hlbj17ZGF0YS5pc0ZldGNoaW5nfSAvPlxuICAgICAgICAgICAgPFNlYXJjaFJlc3VsdHMgd2hlbj17ZGF0YS5pc1NlYXJjaH0gLz5cbiAgICAgICAgICAgIDxIb21lUGFnZSB3aGVuPXtkYXRhLmlzSG9tZX0gLz5cbiAgICAgICAgICAgIDxQb3J0Zm9saW8gd2hlbj17ZGF0YS5pc0FyY2hpdmV9IC8+XG4gICAgICAgICAgICA8QXJjaGl2ZSB3aGVuPXtkYXRhLmlzUG9zdEFyY2hpdmV9IC8+XG4gICAgICAgICAgICA8UGFnZSB3aGVuPXtkYXRhLmlzUGFnZX0gLz5cbiAgICAgICAgICAgIDxQb3N0IHdoZW49e2RhdGEuaXNQb3N0VHlwZX0gLz5cbiAgICAgICAgICAgIDxQYWdlRXJyb3Igd2hlbj17ZGF0YS5pc0Vycm9yfSAvPlxuICAgICAgICAgIDwvU3dpdGNoPlxuICAgICAgICA8L01haW4+XG4gICAgICA8L2Rpdj5cblxuICAgICAgPEZvb3RlciAvPlxuICAgIDwvPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChUaGVtZSk7XG5cbmNvbnN0IE1haW4gPSBzdHlsZWQubWFpbmBcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgbWF4LXdpZHRoOiA5M3JlbTtcbiAgbWFyZ2luOiAwIGF1dG87XG5gO1xuXG5cbmNvbnN0IExvYWRlciA9IHN0eWxlZC5kaXZgXG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgd2lkdGg6IDEwMHZ3O1xuICBoZWlnaHQ6IDEwMHZoO1xuICBjb250ZW50OiBcIiBcIjtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzIyMjtcbiAgei1pbmRleDogMTAwO1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbmA7XG4iXX0= */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy90d2VudHl0d2VudHktdGhlbWUvc3JjL2NvbXBvbmVudHMvaW5kZXguanM/NWVmZSJdLCJuYW1lcyI6WyJUaGVtZSIsInN0YXRlIiwiZGF0YSIsInNvdXJjZSIsImdldCIsInJvdXRlciIsImxpbmsiLCJnbG9iYWxTdHlsZXMiLCJ0aGVtZSIsImNvbG9ycyIsImZyb250aXR5IiwiZGVzY3JpcHRpb24iLCJtaW5IZWlnaHQiLCJpc0ZldGNoaW5nIiwiaXNTZWFyY2giLCJpc0hvbWUiLCJpc0FyY2hpdmUiLCJpc1Bvc3RBcmNoaXZlIiwiaXNQYWdlIiwiaXNQb3N0VHlwZSIsImlzRXJyb3IiLCJjb25uZWN0IiwiTWFpbiIsIkxvYWRlciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3FSQW9CQTtBQUNBO0FBQ0E7QUFDQSxHQUNBLEtBQU1BLE1BQUssQ0FBRyxDQUFDLENBQUVDLEtBQUYsQ0FBRCxHQUFlLENBQzNCO0FBQ0EsS0FBTUMsS0FBSSxDQUFHRCxLQUFLLENBQUNFLE1BQU4sQ0FBYUMsR0FBYixDQUFpQkgsS0FBSyxDQUFDSSxNQUFOLENBQWFDLElBQTlCLENBQWIsQ0FFQSxNQUNFLDBKQUdFLHdFQUFDLE1BQUQsRUFBUSxTQUFTLENBQUMsUUFBbEIsVUFDRSx3RUFBQyx1REFBRCxJQURGLEVBSEYsQ0FNRSx3RUFBQywrQ0FBRCxFQUFRLE1BQU0sQ0FBRUMscUVBQVksQ0FBQ04sS0FBSyxDQUFDTyxLQUFOLENBQVlDLE1BQWIsQ0FBNUIsRUFORixDQU9FLHdFQUFDLDBEQUFELElBUEYsQ0FRRSx3RUFBQyxvREFBRCxJQVJGLENBV0Usd0VBQUMseURBQUQsSUFYRixDQVlFLHdFQUFDLGdEQUFELElBWkYsQ0FhRSx5RUFBQyw2Q0FBRCxZQUNFLGdGQUFNLElBQUksQ0FBQyxhQUFYLENBQXlCLE9BQU8sQ0FBRVIsS0FBSyxDQUFDUyxRQUFOLENBQWVDLFdBQWpELEVBREYsQ0FFRSxnRkFBTSxJQUFJLENBQUMsSUFBWCxFQUZGLEdBYkYsQ0FrQkUsd0VBQUMsMERBQUQsRUFBVSxFQUFFLENBQUMsR0FBYixDQUFpQixJQUFJLENBQUMsT0FBdEIsa0NBbEJGLENBc0JFLGdGQUFLLEtBQUssQ0FBRSxDQUFFQyxTQUFTLENBQUUscUJBQWIsQ0FBWixXQUVFLHdFQUFDLCtDQUFELElBRkYsQ0FNRSx3RUFBQyxJQUFELEVBQU0sRUFBRSxDQUFDLE1BQVQsVUFDRSx5RUFBQyxtRUFBRCxZQUNFLHdFQUFDLGlEQUFELEVBQVMsSUFBSSxDQUFFVixJQUFJLENBQUNXLFVBQXBCLEVBREYsQ0FFRSx3RUFBQywrREFBRCxFQUFlLElBQUksQ0FBRVgsSUFBSSxDQUFDWSxRQUExQixFQUZGLENBR0Usd0VBQUMsOENBQUQsRUFBVSxJQUFJLENBQUVaLElBQUksQ0FBQ2EsTUFBckIsRUFIRixDQUlFLHdFQUFDLGtEQUFELEVBQVcsSUFBSSxDQUFFYixJQUFJLENBQUNjLFNBQXRCLEVBSkYsQ0FLRSx3RUFBQyxnREFBRCxFQUFTLElBQUksQ0FBRWQsSUFBSSxDQUFDZSxhQUFwQixFQUxGLENBTUUsd0VBQUMsOENBQUQsRUFBTSxJQUFJLENBQUVmLElBQUksQ0FBQ2dCLE1BQWpCLEVBTkYsQ0FPRSx3RUFBQyw4Q0FBRCxFQUFNLElBQUksQ0FBRWhCLElBQUksQ0FBQ2lCLFVBQWpCLEVBUEYsQ0FRRSx3RUFBQyxvREFBRCxFQUFXLElBQUksQ0FBRWpCLElBQUksQ0FBQ2tCLE9BQXRCLEVBUkYsR0FERixFQU5GLEdBdEJGLENBMENFLHdFQUFDLCtDQUFELElBMUNGLEdBREYsQ0E4Q0QsQ0FsREQsQ0FvRGVDLHVIQUFPLENBQUNyQixLQUFELENBQXRCLEVBRUEsS0FBTXNCLEtBQUksODlJQUFWLENBUUEsS0FBTUMsT0FBTSwwaEpBQVoiLCJmaWxlIjoiLi9wYWNrYWdlcy90d2VudHl0d2VudHktdGhlbWUvc3JjL2NvbXBvbmVudHMvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb25uZWN0LCBHbG9iYWwsIEhlYWQsIHN0eWxlZCB9IGZyb20gXCJmcm9udGl0eVwiO1xuaW1wb3J0IFJvYm90SWNvbiBmcm9tIFwiLi9pY29ucy9yb2JvdC5qc1wiXG5pbXBvcnQgU3dpdGNoIGZyb20gXCJAZnJvbnRpdHkvY29tcG9uZW50cy9zd2l0Y2hcIjtcbmltcG9ydCBGb290ZXIgZnJvbSBcIi4vZm9vdGVyXCI7XG5pbXBvcnQgZ2xvYmFsU3R5bGVzIGZyb20gXCIuL3N0eWxlcy9nbG9iYWwtc3R5bGVzXCI7XG5pbXBvcnQgRm9udEZhY2VzIGZyb20gXCIuL3N0eWxlcy9mb250LWZhY2VzXCI7XG5pbXBvcnQgSGVhZGVyIGZyb20gXCIuL2hlYWRlclwiO1xuaW1wb3J0IEFyY2hpdmUgZnJvbSBcIi4vYXJjaGl2ZVwiO1xuaW1wb3J0IFBvcnRmb2xpbyBmcm9tIFwiLi9wb3J0Zm9saW9cIjtcbmltcG9ydCBMb2FkaW5nIGZyb20gXCIuL2xvYWRpbmdcIjtcbmltcG9ydCBQb3N0IGZyb20gXCIuL3Bvc3RcIjtcbmltcG9ydCBQYWdlIGZyb20gXCIuL3BhZ2VcIjtcbmltcG9ydCBIb21lUGFnZSBmcm9tIFwiLi9ob21lXCI7XG5pbXBvcnQgU2VhcmNoUmVzdWx0cyBmcm9tIFwiLi9zZWFyY2gvc2VhcmNoLXJlc3VsdHNcIjtcbmltcG9ydCBTa2lwTGluayBmcm9tIFwiLi9zdHlsZXMvc2tpcC1saW5rXCI7XG5pbXBvcnQgTWV0YVRpdGxlIGZyb20gXCIuL3BhZ2UtbWV0YS10aXRsZVwiO1xuaW1wb3J0IFBhZ2VFcnJvciBmcm9tIFwiLi9wYWdlLWVycm9yXCI7XG5pbXBvcnQgSkNXIGZyb20gXCIuLi9qcy9qY3dcIjtcbmltcG9ydCBKY3dTdHlsZSBmcm9tIFwiLi4vanMvamN3X2Nzc1wiO1xuXG4vKipcbiAqIFRoZW1lIGlzIHRoZSByb290IFJlYWN0IGNvbXBvbmVudCBvZiBvdXIgdGhlbWUuIFRoZSBvbmUgd2Ugd2lsbCBleHBvcnRcbiAqIGluIHJvb3RzLlxuICovXG5jb25zdCBUaGVtZSA9ICh7IHN0YXRlIH0pID0+IHtcbiAgLy8gR2V0IGluZm9ybWF0aW9uIGFib3V0IHRoZSBjdXJyZW50IFVSTC5cbiAgY29uc3QgZGF0YSA9IHN0YXRlLnNvdXJjZS5nZXQoc3RhdGUucm91dGVyLmxpbmspO1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIHsvKiBBZGQgZ2xvYmFsIHN0eWxlcyBmb3IgdGhlIHdob2xlIHNpdGUsIGxpa2UgYm9keSBvciBhJ3Mgb3IgZm9udC1mYWNlcy5cbiAgICAgICAgTm90IGNsYXNzZXMgaGVyZSBiZWNhdXNlIHdlIHVzZSBDU1MtaW4tSlMuIE9ubHkgZ2xvYmFsIEhUTUwgdGFncy4gKi99XG4gICAgICA8TG9hZGVyIGNsYXNzTmFtZT1cImxvYWRlclwiPlxuICAgICAgICA8Um9ib3RJY29uIC8+XG4gICAgICA8L0xvYWRlcj5cbiAgICAgIDxHbG9iYWwgc3R5bGVzPXtnbG9iYWxTdHlsZXMoc3RhdGUudGhlbWUuY29sb3JzKX0gLz5cbiAgICAgIDxGb250RmFjZXMgLz5cbiAgICAgIDxKY3dTdHlsZSAvPlxuXG4gICAgICB7LyogQWRkIHNvbWUgbWV0YXRhZ3MgdG8gdGhlIDxoZWFkPiBvZiB0aGUgSFRNTC4gKi99XG4gICAgICA8TWV0YVRpdGxlIC8+XG4gICAgICA8SkNXIC8+XG4gICAgICA8SGVhZD5cbiAgICAgICAgPG1ldGEgbmFtZT1cImRlc2NyaXB0aW9uXCIgY29udGVudD17c3RhdGUuZnJvbnRpdHkuZGVzY3JpcHRpb259IC8+XG4gICAgICAgIDxodG1sIGxhbmc9XCJlblwiIC8+XG4gICAgICA8L0hlYWQ+XG4gICAgICB7LyogQWNjZXNzaWJpbGl0eTogUHJvdmlkZXMgYWJpbGl0eSB0byBza2lwIHRvIG1haW4gY29udGVudCAqL31cbiAgICAgIDxTa2lwTGluayBhcz1cImFcIiBocmVmPVwiI21haW5cIj5cbiAgICAgICAgU2tpcCB0byBtYWluIGNvbnRlbnRcbiAgICAgIDwvU2tpcExpbms+XG5cbiAgICAgIDxkaXYgc3R5bGU9e3sgbWluSGVpZ2h0OiBcImNhbGMoMTAwdmggLSAxOTBweClcIiB9fT5cbiAgICAgICAgey8qIEFkZCB0aGUgaGVhZGVyIG9mIHRoZSBzaXRlLiAqL31cbiAgICAgICAgPEhlYWRlciAvPlxuXG4gICAgICAgIHsvKiBBZGQgdGhlIG1haW4gc2VjdGlvbi4gSXQgcmVuZGVycyBhIGRpZmZlcmVudCBjb21wb25lbnQgZGVwZW5kaW5nXG4gICAgICAgIG9uIHRoZSB0eXBlIG9mIFVSTCB3ZSBhcmUgaW4uICovfVxuICAgICAgICA8TWFpbiBpZD1cIm1haW5cIj5cbiAgICAgICAgICA8U3dpdGNoPlxuICAgICAgICAgICAgPExvYWRpbmcgd2hlbj17ZGF0YS5pc0ZldGNoaW5nfSAvPlxuICAgICAgICAgICAgPFNlYXJjaFJlc3VsdHMgd2hlbj17ZGF0YS5pc1NlYXJjaH0gLz5cbiAgICAgICAgICAgIDxIb21lUGFnZSB3aGVuPXtkYXRhLmlzSG9tZX0gLz5cbiAgICAgICAgICAgIDxQb3J0Zm9saW8gd2hlbj17ZGF0YS5pc0FyY2hpdmV9IC8+XG4gICAgICAgICAgICA8QXJjaGl2ZSB3aGVuPXtkYXRhLmlzUG9zdEFyY2hpdmV9IC8+XG4gICAgICAgICAgICA8UGFnZSB3aGVuPXtkYXRhLmlzUGFnZX0gLz5cbiAgICAgICAgICAgIDxQb3N0IHdoZW49e2RhdGEuaXNQb3N0VHlwZX0gLz5cbiAgICAgICAgICAgIDxQYWdlRXJyb3Igd2hlbj17ZGF0YS5pc0Vycm9yfSAvPlxuICAgICAgICAgIDwvU3dpdGNoPlxuICAgICAgICA8L01haW4+XG4gICAgICA8L2Rpdj5cblxuICAgICAgPEZvb3RlciAvPlxuICAgIDwvPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChUaGVtZSk7XG5cbmNvbnN0IE1haW4gPSBzdHlsZWQubWFpbmBcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgbWF4LXdpZHRoOiA5M3JlbTtcbiAgbWFyZ2luOiAwIGF1dG87XG5gO1xuXG5cbmNvbnN0IExvYWRlciA9IHN0eWxlZC5kaXZgXG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgd2lkdGg6IDEwMHZ3O1xuICBoZWlnaHQ6IDEwMHZoO1xuICBjb250ZW50OiBcIiBcIjtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzIyMjtcbiAgei1pbmRleDogMTAwO1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbmA7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./packages/twentytwenty-theme/src/components/index.js\n");

/***/ }),

/***/ "./packages/twentytwenty-theme/src/js/jcw.js":
/*!***************************************************!*\
  !*** ./packages/twentytwenty-theme/src/js/jcw.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\n/*  CUSTOM JAVASCRIPT LOADER */const JCW=({state})=>{react__WEBPACK_IMPORTED_MODULE_0___default.a.useEffect(()=>{jquery__WEBPACK_IMPORTED_MODULE_1___default()(document).ready(function(){console.log(\"jcw.js jQuery loaded.\");// Home Page Animations\nvar wordList=[\"winners\",\"makers\",\"doers\",\"lovers\",\"carpenters\",\"roofers\",\"painters\",\"builders\",\"plumbers\",\"janitors\",\"doctors\",\"lawyers\",\"rock-n-rollers\",\"bakers\",\"gamers\",\"developers\",\"realtors\",\"contractors\",\"movers\",\"shakers\",\"humans\"];var head=jquery__WEBPACK_IMPORTED_MODULE_1___default()('h1[class*=\"HomePageTitle\"]');var word=jquery__WEBPACK_IMPORTED_MODULE_1___default()('#HomeAnimatedHead');var mark=jquery__WEBPACK_IMPORTED_MODULE_1___default()('#Mark');var n=-1;const headAnim=setInterval(function(){n++;if(n>=wordList.length-1){word.addClass('last');mark.addClass('period').text('.');}if(n>=wordList.length){clearInterval(headAnim);return true;}var w=wordList[n];word.hide();word.html(\"<div>\"+w+\"</div>\");if(n>=wordList.length-1){word.fadeIn(3000);}else{word.fadeIn();}},800);function addPageType(){// Add page type to main element\nif(jquery__WEBPACK_IMPORTED_MODULE_1___default()('article').length){jquery__WEBPACK_IMPORTED_MODULE_1___default()('#root').removeClass().addClass('archive');}else{jquery__WEBPACK_IMPORTED_MODULE_1___default()('#root').removeClass().addClass('page');}jquery__WEBPACK_IMPORTED_MODULE_1___default()('main').ready(function(){if(jquery__WEBPACK_IMPORTED_MODULE_1___default()('content').attr('data-ishome')){jquery__WEBPACK_IMPORTED_MODULE_1___default()('#root').addClass('home');}if(jquery__WEBPACK_IMPORTED_MODULE_1___default()('main > div').attr('data-isportfolio')){jquery__WEBPACK_IMPORTED_MODULE_1___default()('#root').addClass('portfolio');}if(jquery__WEBPACK_IMPORTED_MODULE_1___default()('main > div').attr('data-isblog')){jquery__WEBPACK_IMPORTED_MODULE_1___default()('#root').addClass('blog');}});};addPageType();function addArrowAction(){//for portfolio and sliders\nvar idx=0;var numArticles=jquery__WEBPACK_IMPORTED_MODULE_1___default()('article').length;jquery__WEBPACK_IMPORTED_MODULE_1___default()('.arrow.right').click(function(){jquery__WEBPACK_IMPORTED_MODULE_1___default()('article').removeClass('active');idx++;if(idx>=numArticles)idx=0;jquery__WEBPACK_IMPORTED_MODULE_1___default()('.idx-'+idx).addClass('active');});jquery__WEBPACK_IMPORTED_MODULE_1___default()('.arrow.left').click(function(){jquery__WEBPACK_IMPORTED_MODULE_1___default()('article').removeClass('active');idx--;if(idx<=0)idx=numArticles-1;jquery__WEBPACK_IMPORTED_MODULE_1___default()('.idx-'+idx).addClass('active');});};addArrowAction();// set the first blog or portfolio item to active\njquery__WEBPACK_IMPORTED_MODULE_1___default()('.idx-0').addClass('active');//portfolio slider observer\nlet observer=new MutationObserver(checkArticles=>{var idx=0,numArticles=jquery__WEBPACK_IMPORTED_MODULE_1___default()('article').length;jquery__WEBPACK_IMPORTED_MODULE_1___default()('.idx-'+idx).addClass('active');if(jquery__WEBPACK_IMPORTED_MODULE_1___default()('content').attr('data-ishome')){jquery__WEBPACK_IMPORTED_MODULE_1___default()('#root').addClass('home');};jquery__WEBPACK_IMPORTED_MODULE_1___default()('img').ready(function(){jquery__WEBPACK_IMPORTED_MODULE_1___default()('figure').addClass(\"loaded\").fadeIn();});addPageType();addArrowAction();console.log(\"Number of Articles: \",numArticles);});observer.observe(main,{childList:true,characterDataOldValue:true// pass old data to callback\n});// Scroll effects\njquery__WEBPACK_IMPORTED_MODULE_1___default()(document).scroll(function(){if(jquery__WEBPACK_IMPORTED_MODULE_1___default()(this).scrollTop()>80||jquery__WEBPACK_IMPORTED_MODULE_1___default()('#root').hasClass('portfolio')){jquery__WEBPACK_IMPORTED_MODULE_1___default()('#site-header').addClass(\"scroll\");}else{jquery__WEBPACK_IMPORTED_MODULE_1___default()('#site-header').removeClass(\"scroll\");};});});//document.ready\njquery__WEBPACK_IMPORTED_MODULE_1___default()(window).ready(function(){//stuff to do when everything is loaded\njquery__WEBPACK_IMPORTED_MODULE_1___default()('img').ready(function(){jquery__WEBPACK_IMPORTED_MODULE_1___default()('figure').addClass(\"loaded\").fadeIn();});jquery__WEBPACK_IMPORTED_MODULE_1___default()('.loader *').ready(function(){setTimeout(function(){console.log(\"Page Loaded!\");jquery__WEBPACK_IMPORTED_MODULE_1___default()('.loader').fadeOut();},1000);});// PAGE adjustments and modifications\njquery__WEBPACK_IMPORTED_MODULE_1___default()('div[class*=\"EntryContent\"]').addClass('entry-content');});//window.ready\n});return Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__[\"jsx\"])(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__[\"Fragment\"],{});};/* harmony default export */ __webpack_exports__[\"default\"] = (JCW);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/twentytwenty-theme/src/js/jcw.js\n");

/***/ })

})