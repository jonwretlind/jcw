webpackHotUpdate("portfolio",{

/***/ "./packages/twentytwenty-theme/src/components/portfolio/portfolio-item.js":
/*!********************************************************************************!*\
  !*** ./packages/twentytwenty-theme/src/components/portfolio/portfolio-item.js ***!
  \********************************************************************************/
/*! exports provided: default, Post, PostContainer, PostHeader, SectionContainer, PostTitle, PostInner, EntryContent, LeftArrow, RightArrow */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Post\", function() { return Post; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PostContainer\", function() { return PostContainer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PostHeader\", function() { return PostHeader; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SectionContainer\", function() { return SectionContainer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PostTitle\", function() { return PostTitle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PostInner\", function() { return PostInner; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EntryContent\", function() { return EntryContent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LeftArrow\", function() { return LeftArrow; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RightArrow\", function() { return RightArrow; });\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _link__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../link */ \"./packages/twentytwenty-theme/src/components/link.js\");\n/* harmony import */ var _common_portfolio_media__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/portfolio-media */ \"./packages/twentytwenty-theme/src/components/common/portfolio-media.js\");\n/* harmony import */ var _post_post_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../post/post-meta */ \"./packages/twentytwenty-theme/src/components/post/post-meta.js\");\n/* harmony import */ var _post_post_categories__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../post/post-categories */ \"./packages/twentytwenty-theme/src/components/post/post-categories.js\");\n/* harmony import */ var _post_post_tags__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../post/post-tags */ \"./packages/twentytwenty-theme/src/components/post/post-tags.js\");\n/* harmony import */ var _icons_chevron_left__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../icons/chevron-left */ \"./packages/twentytwenty-theme/src/components/icons/chevron-left.js\");\n/* harmony import */ var _icons_chevron_right__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../icons/chevron-right */ \"./packages/twentytwenty-theme/src/components/icons/chevron-right.js\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}/**\n * Article Component\n *\n * It renders the preview of a blog post. Each blog post contains\n * - Title: clickable title of the post\n * - Author: name of author and published date\n * - FeaturedMedia: the featured image/video of the post\n */const PortfolioItem=({state,item,libraries,showExcerpt,showMedia:_showMedia=true,index})=>{// Get all categories\nconst allCategories=state.source.category;/**\n   * The item's categories is an array of each category id\n   * So, we'll look up the details of each category in allCategories\n   */const categories=item.categories&&item.categories.map(catId=>allCategories[catId]);// Get all tags\nconst allTags=state.source.tag;/**\n   * The item's categories is an array of each tag id\n   * So, we'll look up the details of each tag in allTags\n   */const tags=item.tags&&item.tags.map(tagId=>allTags[tagId]);const content=showExcerpt?item.excerpt:item.content;const{Component:Html2React}=libraries.html2react;return Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(Post,{id:\"post-\"+item.id,className:\"idx-\"+index,size:\"thin\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(LeftArrow,{className:\"arrow left\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(_icons_chevron_left__WEBPACK_IMPORTED_MODULE_6__[\"default\"],{className:\"icon\"})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(PostContainer,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(PostHeader,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(SectionContainer,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(_post_post_categories__WEBPACK_IMPORTED_MODULE_4__[\"default\"],{categories:categories}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(PostLink,{link:item.link,children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(PostTitle,{className:\"heading-size-1\",dangerouslySetInnerHTML:{__html:item.title.rendered}})}),content&&Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(PostInner,{size:\"thin\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(EntryContent,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(Html2React,{html:content.rendered})}),item.tags&&Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(_post_post_tags__WEBPACK_IMPORTED_MODULE_5__[\"default\"],{tags:tags})]})]})})}),state.theme.featuredMedia.showOnArchive&&_showMedia&&Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(_common_portfolio_media__WEBPACK_IMPORTED_MODULE_2__[\"default\"],{id:item.featured_media}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(RightArrow,{className:\"arrow right\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(_icons_chevron_right__WEBPACK_IMPORTED_MODULE_7__[\"default\"],{className:\"icon\"})})]});};// Connect the Item to gain access to `state` as a prop\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"connect\"])(PortfolioItem));// All styles :)\nconst Post=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"article\", false?undefined:{target:\"e89s449\",label:\"Post\"})( false?undefined:{name:\"1l03r0o\",styles:\"display:flex;flex-wrap:nowrap;flex-direction:row;align-items:flex-start;text-align:left;justify-content:space-between;border:1px solid #eee;box-shadow:3px 3px 3px #ccc;background-color:white;margin:0 auto 2em auto;width:100%;z-index:10;overflow:hidden;height:85vh;&:not(.active){display:none;}@media (max-width: 1000px){flex-direction:column-reverse;align-items:center;justify-content:start;}@media (max-width: 700px){height:90vh;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const PostContainer=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e89s448\",label:\"PostContainer\"})( false?undefined:{name:\"1aozbc0\",styles:\"animation-name:shutter;animation-duration:.5s;animation-timing-function:ease-in;animation-delay:.5s;animation-fill-mode:forwards;opacity:0;margin-left:80px;@keyframes shutter{0%{opacity:0;}100%{opacity:1;}}@media (max-width: 1000px){width:80%;margin-left:unset;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const PostHeader=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"header\", false?undefined:{target:\"e89s447\",label:\"PostHeader\"})( false?undefined:{name:\"1h37rkf\",styles:\"text-align:left;padding:2em;width:100%\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});// Header sizes bases on style.css\nconst maxWidths={thin:\"58rem\",small:\"80rem\",medium:\"100rem\"};const getMaxWidth=props=>maxWidths[props.size]||maxWidths[\"medium\"];const SectionContainer=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e89s446\",label:\"SectionContainer\"})( false?undefined:{name:\"mljmlv\",styles:\"margin-left:auto;margin-right:auto;width:100%;text-align:left;-webkit-transition:all 0.15s linear;transition:all 0.15s linear;@media (max-width: 1200px){@media screen and (orientation: landscape){display:grid;grid-template-columns:repeat(auto-fill, minmax(100px, 50%));& a{grid-column:1/2;& h1{margin:unset;}}}}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const PostTitle=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"h1\", false?undefined:{target:\"e89s445\",label:\"PostTitle\"})( false?undefined:{name:\"1xlvaq7\",styles:\"font-size:2rem!important;@media (max-width: 700px){font-size:3rem!important;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const PostLink=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(_link__WEBPACK_IMPORTED_MODULE_1__[\"default\"], false?undefined:{target:\"e89s444\",label:\"PostLink\"})( false?undefined:{name:\"6un5p1\",styles:\"color:#000000;text-decoration:none;display:inline-block;&:hover{text-decoration:underline;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const PostInner=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(SectionContainer, false?undefined:{target:\"e89s443\",label:\"PostInner\"})( false?undefined:{name:\"5ovxwm\",styles:\"text-align:left;-webkit-transition:all 0.15s linear;transition:all 0.15s linear;@media (max-width: 1200px){@media screen and (orientation: landscape){display:unset;}}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const EntryContent=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e89s442\",label:\"EntryContent\"})( false?undefined:{name:\"t15kz2\",styles:\"line-height:1.5;max-width:58rem;font-family:inherit;letter-spacing:normal;max-width:350px;@media (min-width: 700px){font-size:1.2rem;}@media (max-width: 700px){font-size:1.2rem;p{font-size:2em;}}>*:first-of-type{margin-top:0;}figure{max-width:100%;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const LeftArrow=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e89s441\",label:\"LeftArrow\"})( false?undefined:{name:\"1d0u2wt\",styles:\"position:absolute;left:0px;width:40px;border:1px solid #ddd;border-right:3px solid #6d6d6d;background-color:#efefef;display:flex;justify-content:center;align-items:center;z-index:1;height:85vh;.icon{opacity:.3;color:#222;}&:hover{background-color:#ddd;.icon{opacity:.8;}}@media (max-width: 700px){height:90vh;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const RightArrow=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e89s440\",label:\"RightArrow\"})( false?undefined:{name:\"3nfoyd\",styles:\"position:absolute;right:0px;width:40px;border:1px solid #ddd;border-left:3px solid #6d6d6d;background-color:#efefef;display:flex;justify-content:center;align-items:center;z-index:1;height:85vh;.icon{opacity:.3;color:#222;}&:hover{background-color:#ddd;.icon{opacity:.8;}}@media (max-width: 700px){height:90vh;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/twentytwenty-theme/src/components/portfolio/portfolio-item.js\n");

/***/ })

})