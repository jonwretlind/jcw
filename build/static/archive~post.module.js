(window["__LOADABLE_LOADED_CHUNKS__"] = window["__LOADABLE_LOADED_CHUNKS__"] || []).push([["archive~post"],{

/***/ "./packages/twentytwenty-theme/src/components/post/post-featured-media.js":
/*!********************************************************************************!*\
  !*** ./packages/twentytwenty-theme/src/components/post/post-featured-media.js ***!
  \********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var core_js_modules_es_array_reduce_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.reduce.js */ \"./node_modules/core-js/modules/es.array.reduce.js\");\n/* harmony import */ var core_js_modules_es_array_reduce_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_reduce_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _frontity_components_image__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @frontity/components/image */ \"./node_modules/@frontity/components/image.tsx\");\n/* harmony import */ var _styles_section_container__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../styles/section-container */ \"./packages/twentytwenty-theme/src/components/styles/section-container.js\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}/**\n * The featured image/video of the post.\n *\n * @param props -\n * - `state`: The Frontity state\n * - `id`: The ID of the featured image/video.\n * - `className`: Required in order to wrap the component with `styled()`.\n * @returns React element.\n */const PostFeaturedMedia=({state,id,className})=>{const media=state.source.attachment[id];if(!media)return null;const srcset=Object.values(media.media_details.sizes)// Get the url and width of each size.\n.map(item=>[item.source_url,item.width])// Recude them to a string with the format required by `srcset`.\n.reduce((final,current,index,array)=>final.concat(`${current.join(\" \")}w${index!==array.length-1?\", \":\"\"}`),\"\")||null;return Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(Figure,{id:\"image\",className:className,children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(_styles_section_container__WEBPACK_IMPORTED_MODULE_3__[\"default\"],{size:\"medium\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(Image,{alt:media.title.rendered,src:media.source_url,srcSet:srcset,rel:\"preload\"})})});};/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"connect\"])(PostFeaturedMedia));const Figure=Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(\"figure\", false?undefined:{target:\"e1smdpbj1\",label:\"Figure\"})( false?undefined:{name:\"rh3qoa\",styles:\"position:relative;border-left:1px solid #eee;background:linear-gradient(120deg, #ddd, #fff);width:calc(50% + 80px);animation:fadein;animation-duration:0.5s;animation-timing-function:ease-in;right:0px;height:80vh;display:flex;align-items:center;padding-bottom:15%;padding-right:37px;@keyframes fadein{from{opacity:0;width:0%;}to{opacity:1;width:80%;}}@media (max-width: 1000px){width:100%;height:40vh;padding-bottom:unset;padding-right:unset;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2pjd3JldGxpbmQvd2Vic2l0ZS9qY3dfd2Vic2l0ZS9qY3cvcGFja2FnZXMvdHdlbnR5dHdlbnR5LXRoZW1lL3NyYy9jb21wb25lbnRzL3Bvc3QvcG9zdC1mZWF0dXJlZC1tZWRpYS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE4QzRCIiwiZmlsZSI6Ii9ob21lL2pjd3JldGxpbmQvd2Vic2l0ZS9qY3dfd2Vic2l0ZS9qY3cvcGFja2FnZXMvdHdlbnR5dHdlbnR5LXRoZW1lL3NyYy9jb21wb25lbnRzL3Bvc3QvcG9zdC1mZWF0dXJlZC1tZWRpYS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvbm5lY3QsIHN0eWxlZCB9IGZyb20gXCJmcm9udGl0eVwiO1xuaW1wb3J0IEltZyBmcm9tIFwiQGZyb250aXR5L2NvbXBvbmVudHMvaW1hZ2VcIjtcbmltcG9ydCBTZWN0aW9uQ29udGFpbmVyIGZyb20gXCIuLi9zdHlsZXMvc2VjdGlvbi1jb250YWluZXJcIjtcblxuLyoqXG4gKiBUaGUgZmVhdHVyZWQgaW1hZ2UvdmlkZW8gb2YgdGhlIHBvc3QuXG4gKlxuICogQHBhcmFtIHByb3BzIC1cbiAqIC0gYHN0YXRlYDogVGhlIEZyb250aXR5IHN0YXRlXG4gKiAtIGBpZGA6IFRoZSBJRCBvZiB0aGUgZmVhdHVyZWQgaW1hZ2UvdmlkZW8uXG4gKiAtIGBjbGFzc05hbWVgOiBSZXF1aXJlZCBpbiBvcmRlciB0byB3cmFwIHRoZSBjb21wb25lbnQgd2l0aCBgc3R5bGVkKClgLlxuICogQHJldHVybnMgUmVhY3QgZWxlbWVudC5cbiAqL1xuY29uc3QgUG9zdEZlYXR1cmVkTWVkaWEgPSAoeyBzdGF0ZSwgaWQsIGNsYXNzTmFtZSB9KSA9PiB7XG4gIGNvbnN0IG1lZGlhID0gc3RhdGUuc291cmNlLmF0dGFjaG1lbnRbaWRdO1xuXG4gIGlmICghbWVkaWEpIHJldHVybiBudWxsO1xuXG4gIGNvbnN0IHNyY3NldCA9XG4gICAgT2JqZWN0LnZhbHVlcyhtZWRpYS5tZWRpYV9kZXRhaWxzLnNpemVzKVxuICAgICAgLy8gR2V0IHRoZSB1cmwgYW5kIHdpZHRoIG9mIGVhY2ggc2l6ZS5cbiAgICAgIC5tYXAoKGl0ZW0pID0+IFtpdGVtLnNvdXJjZV91cmwsIGl0ZW0ud2lkdGhdKVxuICAgICAgLy8gUmVjdWRlIHRoZW0gdG8gYSBzdHJpbmcgd2l0aCB0aGUgZm9ybWF0IHJlcXVpcmVkIGJ5IGBzcmNzZXRgLlxuICAgICAgLnJlZHVjZShcbiAgICAgICAgKGZpbmFsLCBjdXJyZW50LCBpbmRleCwgYXJyYXkpID0+XG4gICAgICAgICAgZmluYWwuY29uY2F0KFxuICAgICAgICAgICAgYCR7Y3VycmVudC5qb2luKFwiIFwiKX13JHtpbmRleCAhPT0gYXJyYXkubGVuZ3RoIC0gMSA/IFwiLCBcIiA6IFwiXCJ9YFxuICAgICAgICAgICksXG4gICAgICAgIFwiXCJcbiAgICAgICkgfHwgbnVsbDtcbiAgcmV0dXJuIChcbiAgICA8RmlndXJlIGlkPVwiaW1hZ2VcIiBjbGFzc05hbWU9e2NsYXNzTmFtZX0+XG4gICAgICA8U2VjdGlvbkNvbnRhaW5lciBzaXplPVwibWVkaXVtXCI+XG4gICAgICAgIDxJbWFnZVxuICAgICAgICAgIGFsdD17bWVkaWEudGl0bGUucmVuZGVyZWR9XG4gICAgICAgICAgc3JjPXttZWRpYS5zb3VyY2VfdXJsfVxuICAgICAgICAgIHNyY1NldD17c3Jjc2V0fVxuICAgICAgICAgIHJlbD1cInByZWxvYWRcIlxuICAgICAgICAvPlxuICAgICAgPC9TZWN0aW9uQ29udGFpbmVyPlxuICAgIDwvRmlndXJlPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChQb3N0RmVhdHVyZWRNZWRpYSk7XG5cbmNvbnN0IEZpZ3VyZSA9IHN0eWxlZC5maWd1cmVgXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAjZWVlO1xuICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMTIwZGVnLCAjZGRkLCAjZmZmKTtcbiAgd2lkdGg6IGNhbGMoNTAlICsgODBweCk7XG4gIGFuaW1hdGlvbjogZmFkZWluO1xuICBhbmltYXRpb24tZHVyYXRpb246IDAuNXM7XG4gIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGVhc2UtaW47XG4gIHJpZ2h0OiAwcHg7XG4gIGhlaWdodDogODB2aDtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgcGFkZGluZy1ib3R0b206IDE1JTtcbiAgcGFkZGluZy1yaWdodDogMzdweDtcblxuICBAa2V5ZnJhbWVzIGZhZGVpbiB7XG4gICAgZnJvbSAgIHsgb3BhY2l0eTogMDsgd2lkdGg6IDAlOyB9XG4gICAgdG8gICAgIHsgb3BhY2l0eTogMTsgd2lkdGg6IDgwJTsgfVxuICB9XG4gIEBtZWRpYSAobWF4LXdpZHRoOiAxMDAwcHgpIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDQwdmg7XG4gICAgcGFkZGluZy1ib3R0b206IHVuc2V0O1xuICAgIHBhZGRpbmctcmlnaHQ6IHVuc2V0O1xuICB9XG5gO1xuXG5jb25zdCBJbWFnZSA9IHN0eWxlZChJbWcpYFxuICBtYXJnaW46IDAgYXV0bztcbiAgZGlzcGxheTogYmxvY2s7XG4gIGhlaWdodDogNDB2aDtcbiAgbWF4LXdpZHRoOiA5MCU7XG4gIG9iamVjdC1maXQ6IGNvbnRhaW47XG4gIHdpZHRoOiBhdXRvO1xuXG4gIEBtZWRpYSAobWF4LXdpZHRoOiAxMDAwcHgpIHtcbiAgICBoZWlnaHQ6IDI1MHB4O1xuICB9XG5gO1xuIl19 */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Image=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(_frontity_components_image__WEBPACK_IMPORTED_MODULE_2__[\"default\"], false?undefined:{target:\"e1smdpbj0\",label:\"Image\"})( false?undefined:{name:\"wtr9hn\",styles:\"margin:0 auto;display:block;height:40vh;max-width:90%;object-fit:contain;width:auto;@media (max-width: 1000px){height:250px;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2pjd3JldGxpbmQvd2Vic2l0ZS9qY3dfd2Vic2l0ZS9qY3cvcGFja2FnZXMvdHdlbnR5dHdlbnR5LXRoZW1lL3NyYy9jb21wb25lbnRzL3Bvc3QvcG9zdC1mZWF0dXJlZC1tZWRpYS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF5RXlCIiwiZmlsZSI6Ii9ob21lL2pjd3JldGxpbmQvd2Vic2l0ZS9qY3dfd2Vic2l0ZS9qY3cvcGFja2FnZXMvdHdlbnR5dHdlbnR5LXRoZW1lL3NyYy9jb21wb25lbnRzL3Bvc3QvcG9zdC1mZWF0dXJlZC1tZWRpYS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvbm5lY3QsIHN0eWxlZCB9IGZyb20gXCJmcm9udGl0eVwiO1xuaW1wb3J0IEltZyBmcm9tIFwiQGZyb250aXR5L2NvbXBvbmVudHMvaW1hZ2VcIjtcbmltcG9ydCBTZWN0aW9uQ29udGFpbmVyIGZyb20gXCIuLi9zdHlsZXMvc2VjdGlvbi1jb250YWluZXJcIjtcblxuLyoqXG4gKiBUaGUgZmVhdHVyZWQgaW1hZ2UvdmlkZW8gb2YgdGhlIHBvc3QuXG4gKlxuICogQHBhcmFtIHByb3BzIC1cbiAqIC0gYHN0YXRlYDogVGhlIEZyb250aXR5IHN0YXRlXG4gKiAtIGBpZGA6IFRoZSBJRCBvZiB0aGUgZmVhdHVyZWQgaW1hZ2UvdmlkZW8uXG4gKiAtIGBjbGFzc05hbWVgOiBSZXF1aXJlZCBpbiBvcmRlciB0byB3cmFwIHRoZSBjb21wb25lbnQgd2l0aCBgc3R5bGVkKClgLlxuICogQHJldHVybnMgUmVhY3QgZWxlbWVudC5cbiAqL1xuY29uc3QgUG9zdEZlYXR1cmVkTWVkaWEgPSAoeyBzdGF0ZSwgaWQsIGNsYXNzTmFtZSB9KSA9PiB7XG4gIGNvbnN0IG1lZGlhID0gc3RhdGUuc291cmNlLmF0dGFjaG1lbnRbaWRdO1xuXG4gIGlmICghbWVkaWEpIHJldHVybiBudWxsO1xuXG4gIGNvbnN0IHNyY3NldCA9XG4gICAgT2JqZWN0LnZhbHVlcyhtZWRpYS5tZWRpYV9kZXRhaWxzLnNpemVzKVxuICAgICAgLy8gR2V0IHRoZSB1cmwgYW5kIHdpZHRoIG9mIGVhY2ggc2l6ZS5cbiAgICAgIC5tYXAoKGl0ZW0pID0+IFtpdGVtLnNvdXJjZV91cmwsIGl0ZW0ud2lkdGhdKVxuICAgICAgLy8gUmVjdWRlIHRoZW0gdG8gYSBzdHJpbmcgd2l0aCB0aGUgZm9ybWF0IHJlcXVpcmVkIGJ5IGBzcmNzZXRgLlxuICAgICAgLnJlZHVjZShcbiAgICAgICAgKGZpbmFsLCBjdXJyZW50LCBpbmRleCwgYXJyYXkpID0+XG4gICAgICAgICAgZmluYWwuY29uY2F0KFxuICAgICAgICAgICAgYCR7Y3VycmVudC5qb2luKFwiIFwiKX13JHtpbmRleCAhPT0gYXJyYXkubGVuZ3RoIC0gMSA/IFwiLCBcIiA6IFwiXCJ9YFxuICAgICAgICAgICksXG4gICAgICAgIFwiXCJcbiAgICAgICkgfHwgbnVsbDtcbiAgcmV0dXJuIChcbiAgICA8RmlndXJlIGlkPVwiaW1hZ2VcIiBjbGFzc05hbWU9e2NsYXNzTmFtZX0+XG4gICAgICA8U2VjdGlvbkNvbnRhaW5lciBzaXplPVwibWVkaXVtXCI+XG4gICAgICAgIDxJbWFnZVxuICAgICAgICAgIGFsdD17bWVkaWEudGl0bGUucmVuZGVyZWR9XG4gICAgICAgICAgc3JjPXttZWRpYS5zb3VyY2VfdXJsfVxuICAgICAgICAgIHNyY1NldD17c3Jjc2V0fVxuICAgICAgICAgIHJlbD1cInByZWxvYWRcIlxuICAgICAgICAvPlxuICAgICAgPC9TZWN0aW9uQ29udGFpbmVyPlxuICAgIDwvRmlndXJlPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChQb3N0RmVhdHVyZWRNZWRpYSk7XG5cbmNvbnN0IEZpZ3VyZSA9IHN0eWxlZC5maWd1cmVgXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAjZWVlO1xuICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMTIwZGVnLCAjZGRkLCAjZmZmKTtcbiAgd2lkdGg6IGNhbGMoNTAlICsgODBweCk7XG4gIGFuaW1hdGlvbjogZmFkZWluO1xuICBhbmltYXRpb24tZHVyYXRpb246IDAuNXM7XG4gIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGVhc2UtaW47XG4gIHJpZ2h0OiAwcHg7XG4gIGhlaWdodDogODB2aDtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgcGFkZGluZy1ib3R0b206IDE1JTtcbiAgcGFkZGluZy1yaWdodDogMzdweDtcblxuICBAa2V5ZnJhbWVzIGZhZGVpbiB7XG4gICAgZnJvbSAgIHsgb3BhY2l0eTogMDsgd2lkdGg6IDAlOyB9XG4gICAgdG8gICAgIHsgb3BhY2l0eTogMTsgd2lkdGg6IDgwJTsgfVxuICB9XG4gIEBtZWRpYSAobWF4LXdpZHRoOiAxMDAwcHgpIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDQwdmg7XG4gICAgcGFkZGluZy1ib3R0b206IHVuc2V0O1xuICAgIHBhZGRpbmctcmlnaHQ6IHVuc2V0O1xuICB9XG5gO1xuXG5jb25zdCBJbWFnZSA9IHN0eWxlZChJbWcpYFxuICBtYXJnaW46IDAgYXV0bztcbiAgZGlzcGxheTogYmxvY2s7XG4gIGhlaWdodDogNDB2aDtcbiAgbWF4LXdpZHRoOiA5MCU7XG4gIG9iamVjdC1maXQ6IGNvbnRhaW47XG4gIHdpZHRoOiBhdXRvO1xuXG4gIEBtZWRpYSAobWF4LXdpZHRoOiAxMDAwcHgpIHtcbiAgICBoZWlnaHQ6IDI1MHB4O1xuICB9XG5gO1xuIl19 */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy90d2VudHl0d2VudHktdGhlbWUvc3JjL2NvbXBvbmVudHMvcG9zdC9wb3N0LWZlYXR1cmVkLW1lZGlhLmpzPzY3YjUiXSwibmFtZXMiOlsiUG9zdEZlYXR1cmVkTWVkaWEiLCJzdGF0ZSIsImlkIiwiY2xhc3NOYW1lIiwibWVkaWEiLCJzb3VyY2UiLCJhdHRhY2htZW50Iiwic3Jjc2V0IiwiT2JqZWN0IiwidmFsdWVzIiwibWVkaWFfZGV0YWlscyIsInNpemVzIiwibWFwIiwiaXRlbSIsInNvdXJjZV91cmwiLCJ3aWR0aCIsInJlZHVjZSIsImZpbmFsIiwiY3VycmVudCIsImluZGV4IiwiYXJyYXkiLCJjb25jYXQiLCJqb2luIiwibGVuZ3RoIiwidGl0bGUiLCJyZW5kZXJlZCIsImNvbm5lY3QiLCJGaWd1cmUiLCJJbWFnZSIsIkltZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7cVJBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQ0EsS0FBTUEsa0JBQWlCLENBQUcsQ0FBQyxDQUFFQyxLQUFGLENBQVNDLEVBQVQsQ0FBYUMsU0FBYixDQUFELEdBQThCLENBQ3RELEtBQU1DLE1BQUssQ0FBR0gsS0FBSyxDQUFDSSxNQUFOLENBQWFDLFVBQWIsQ0FBd0JKLEVBQXhCLENBQWQsQ0FFQSxHQUFJLENBQUNFLEtBQUwsQ0FBWSxNQUFPLEtBQVAsQ0FFWixLQUFNRyxPQUFNLENBQ1ZDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjTCxLQUFLLENBQUNNLGFBQU4sQ0FBb0JDLEtBQWxDLENBQ0U7QUFERixDQUVHQyxHQUZILENBRVFDLElBQUQsRUFBVSxDQUFDQSxJQUFJLENBQUNDLFVBQU4sQ0FBa0JELElBQUksQ0FBQ0UsS0FBdkIsQ0FGakIsQ0FHRTtBQUhGLENBSUdDLE1BSkgsQ0FLSSxDQUFDQyxLQUFELENBQVFDLE9BQVIsQ0FBaUJDLEtBQWpCLENBQXdCQyxLQUF4QixHQUNFSCxLQUFLLENBQUNJLE1BQU4sQ0FDRyxHQUFFSCxPQUFPLENBQUNJLElBQVIsQ0FBYSxHQUFiLENBQWtCLElBQUdILEtBQUssR0FBS0MsS0FBSyxDQUFDRyxNQUFOLENBQWUsQ0FBekIsQ0FBNkIsSUFBN0IsQ0FBb0MsRUFBRyxFQURqRSxDQU5OLENBU0ksRUFUSixHQVVPLElBWFQsQ0FZQSxNQUNFLHdFQUFDLE1BQUQsRUFBUSxFQUFFLENBQUMsT0FBWCxDQUFtQixTQUFTLENBQUVwQixTQUE5QixVQUNFLHVFQUFDLGlFQUFELEVBQWtCLElBQUksQ0FBQyxRQUF2QixVQUNFLHVFQUFDLEtBQUQsRUFDRSxHQUFHLENBQUVDLEtBQUssQ0FBQ29CLEtBQU4sQ0FBWUMsUUFEbkIsQ0FFRSxHQUFHLENBQUVyQixLQUFLLENBQUNVLFVBRmIsQ0FHRSxNQUFNLENBQUVQLE1BSFYsQ0FJRSxHQUFHLENBQUMsU0FKTixFQURGLEVBREYsRUFERixDQVlELENBN0JELENBK0JlbUIsdUhBQU8sQ0FBQzFCLGlCQUFELENBQXRCLEVBRUEsS0FBTTJCLE9BQU0sNjlIQUFaLENBMkJBLEtBQU1DLE1BQUssQ0FBRyxvRUFBTSxDQUFDQyxrRUFBUCxxREFBSCx5aUhBQVgiLCJmaWxlIjoiLi9wYWNrYWdlcy90d2VudHl0d2VudHktdGhlbWUvc3JjL2NvbXBvbmVudHMvcG9zdC9wb3N0LWZlYXR1cmVkLW1lZGlhLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29ubmVjdCwgc3R5bGVkIH0gZnJvbSBcImZyb250aXR5XCI7XG5pbXBvcnQgSW1nIGZyb20gXCJAZnJvbnRpdHkvY29tcG9uZW50cy9pbWFnZVwiO1xuaW1wb3J0IFNlY3Rpb25Db250YWluZXIgZnJvbSBcIi4uL3N0eWxlcy9zZWN0aW9uLWNvbnRhaW5lclwiO1xuXG4vKipcbiAqIFRoZSBmZWF0dXJlZCBpbWFnZS92aWRlbyBvZiB0aGUgcG9zdC5cbiAqXG4gKiBAcGFyYW0gcHJvcHMgLVxuICogLSBgc3RhdGVgOiBUaGUgRnJvbnRpdHkgc3RhdGVcbiAqIC0gYGlkYDogVGhlIElEIG9mIHRoZSBmZWF0dXJlZCBpbWFnZS92aWRlby5cbiAqIC0gYGNsYXNzTmFtZWA6IFJlcXVpcmVkIGluIG9yZGVyIHRvIHdyYXAgdGhlIGNvbXBvbmVudCB3aXRoIGBzdHlsZWQoKWAuXG4gKiBAcmV0dXJucyBSZWFjdCBlbGVtZW50LlxuICovXG5jb25zdCBQb3N0RmVhdHVyZWRNZWRpYSA9ICh7IHN0YXRlLCBpZCwgY2xhc3NOYW1lIH0pID0+IHtcbiAgY29uc3QgbWVkaWEgPSBzdGF0ZS5zb3VyY2UuYXR0YWNobWVudFtpZF07XG5cbiAgaWYgKCFtZWRpYSkgcmV0dXJuIG51bGw7XG5cbiAgY29uc3Qgc3Jjc2V0ID1cbiAgICBPYmplY3QudmFsdWVzKG1lZGlhLm1lZGlhX2RldGFpbHMuc2l6ZXMpXG4gICAgICAvLyBHZXQgdGhlIHVybCBhbmQgd2lkdGggb2YgZWFjaCBzaXplLlxuICAgICAgLm1hcCgoaXRlbSkgPT4gW2l0ZW0uc291cmNlX3VybCwgaXRlbS53aWR0aF0pXG4gICAgICAvLyBSZWN1ZGUgdGhlbSB0byBhIHN0cmluZyB3aXRoIHRoZSBmb3JtYXQgcmVxdWlyZWQgYnkgYHNyY3NldGAuXG4gICAgICAucmVkdWNlKFxuICAgICAgICAoZmluYWwsIGN1cnJlbnQsIGluZGV4LCBhcnJheSkgPT5cbiAgICAgICAgICBmaW5hbC5jb25jYXQoXG4gICAgICAgICAgICBgJHtjdXJyZW50LmpvaW4oXCIgXCIpfXcke2luZGV4ICE9PSBhcnJheS5sZW5ndGggLSAxID8gXCIsIFwiIDogXCJcIn1gXG4gICAgICAgICAgKSxcbiAgICAgICAgXCJcIlxuICAgICAgKSB8fCBudWxsO1xuICByZXR1cm4gKFxuICAgIDxGaWd1cmUgaWQ9XCJpbWFnZVwiIGNsYXNzTmFtZT17Y2xhc3NOYW1lfT5cbiAgICAgIDxTZWN0aW9uQ29udGFpbmVyIHNpemU9XCJtZWRpdW1cIj5cbiAgICAgICAgPEltYWdlXG4gICAgICAgICAgYWx0PXttZWRpYS50aXRsZS5yZW5kZXJlZH1cbiAgICAgICAgICBzcmM9e21lZGlhLnNvdXJjZV91cmx9XG4gICAgICAgICAgc3JjU2V0PXtzcmNzZXR9XG4gICAgICAgICAgcmVsPVwicHJlbG9hZFwiXG4gICAgICAgIC8+XG4gICAgICA8L1NlY3Rpb25Db250YWluZXI+XG4gICAgPC9GaWd1cmU+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KFBvc3RGZWF0dXJlZE1lZGlhKTtcblxuY29uc3QgRmlndXJlID0gc3R5bGVkLmZpZ3VyZWBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBib3JkZXItbGVmdDogMXB4IHNvbGlkICNlZWU7XG4gIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgxMjBkZWcsICNkZGQsICNmZmYpO1xuICB3aWR0aDogY2FsYyg1MCUgKyA4MHB4KTtcbiAgYW5pbWF0aW9uOiBmYWRlaW47XG4gIGFuaW1hdGlvbi1kdXJhdGlvbjogMC41cztcbiAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1pbjtcbiAgcmlnaHQ6IDBweDtcbiAgaGVpZ2h0OiA4MHZoO1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBwYWRkaW5nLWJvdHRvbTogMTUlO1xuICBwYWRkaW5nLXJpZ2h0OiAzN3B4O1xuXG4gIEBrZXlmcmFtZXMgZmFkZWluIHtcbiAgICBmcm9tICAgeyBvcGFjaXR5OiAwOyB3aWR0aDogMCU7IH1cbiAgICB0byAgICAgeyBvcGFjaXR5OiAxOyB3aWR0aDogODAlOyB9XG4gIH1cbiAgQG1lZGlhIChtYXgtd2lkdGg6IDEwMDBweCkge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogNDB2aDtcbiAgICBwYWRkaW5nLWJvdHRvbTogdW5zZXQ7XG4gICAgcGFkZGluZy1yaWdodDogdW5zZXQ7XG4gIH1cbmA7XG5cbmNvbnN0IEltYWdlID0gc3R5bGVkKEltZylgXG4gIG1hcmdpbjogMCBhdXRvO1xuICBkaXNwbGF5OiBibG9jaztcbiAgaGVpZ2h0OiA0MHZoO1xuICBtYXgtd2lkdGg6IDkwJTtcbiAgb2JqZWN0LWZpdDogY29udGFpbjtcbiAgd2lkdGg6IGF1dG87XG5cbiAgQG1lZGlhIChtYXgtd2lkdGg6IDEwMDBweCkge1xuICAgIGhlaWdodDogMjUwcHg7XG4gIH1cbmA7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./packages/twentytwenty-theme/src/components/post/post-featured-media.js\n");

/***/ }),

/***/ "./packages/twentytwenty-theme/src/components/post/post-item.js":
/*!**********************************************************************!*\
  !*** ./packages/twentytwenty-theme/src/components/post/post-item.js ***!
  \**********************************************************************/
/*! exports provided: default, Post, PostContainer, PostHeader, SectionContainer, PostTitle, PostInner, EntryContent, LeftArrow, RightArrow */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Post\", function() { return Post; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PostContainer\", function() { return PostContainer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PostHeader\", function() { return PostHeader; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SectionContainer\", function() { return SectionContainer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PostTitle\", function() { return PostTitle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PostInner\", function() { return PostInner; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EntryContent\", function() { return EntryContent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LeftArrow\", function() { return LeftArrow; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RightArrow\", function() { return RightArrow; });\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _link__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../link */ \"./packages/twentytwenty-theme/src/components/link.js\");\n/* harmony import */ var _post_featured_media__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./post-featured-media */ \"./packages/twentytwenty-theme/src/components/post/post-featured-media.js\");\n/* harmony import */ var _post_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./post-meta */ \"./packages/twentytwenty-theme/src/components/post/post-meta.js\");\n/* harmony import */ var _post_categories__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./post-categories */ \"./packages/twentytwenty-theme/src/components/post/post-categories.js\");\n/* harmony import */ var _post_tags__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./post-tags */ \"./packages/twentytwenty-theme/src/components/post/post-tags.js\");\n/* harmony import */ var _icons_chevron_left__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../icons/chevron-left */ \"./packages/twentytwenty-theme/src/components/icons/chevron-left.js\");\n/* harmony import */ var _icons_chevron_right__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../icons/chevron-right */ \"./packages/twentytwenty-theme/src/components/icons/chevron-right.js\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}/**\n * Article Component\n *\n * It renders the preview of a blog post. Each blog post contains\n * - Title: clickable title of the post\n * - Author: name of author and published date\n * - FeaturedMedia: the featured image/video of the post\n */const PostItem=({state,item,libraries,showExcerpt,showMedia:_showMedia=true,index})=>{// Get all categories\nconst allCategories=state.source.category;/**\n   * The item's categories is an array of each category id\n   * So, we'll look up the details of each category in allCategories\n   */const categories=item.categories&&item.categories.map(catId=>allCategories[catId]);// Get all tags\nconst allTags=state.source.tag;/**\n   * The item's categories is an array of each tag id\n   * So, we'll look up the details of each tag in allTags\n   */const tags=item.tags&&item.tags.map(tagId=>allTags[tagId]);const content=showExcerpt?item.excerpt:item.content;const{Component:Html2React}=libraries.html2react;return Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(Post,{id:\"post-\"+item.id,className:\"idx-\"+index,size:\"thin\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(LeftArrow,{className:\"arrow left\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(_icons_chevron_left__WEBPACK_IMPORTED_MODULE_6__[\"default\"],{className:\"icon\"})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(PostContainer,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(PostHeader,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(SectionContainer,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(_post_categories__WEBPACK_IMPORTED_MODULE_4__[\"default\"],{categories:categories}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(PostLink,{link:item.link,children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(PostTitle,{className:\"heading-size-1\",dangerouslySetInnerHTML:{__html:item.title.rendered}})}),content&&Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(PostInner,{size:\"thin\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(EntryContent,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(Html2React,{html:content.rendered})}),item.tags&&Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(_post_tags__WEBPACK_IMPORTED_MODULE_5__[\"default\"],{tags:tags})]})]})})}),state.theme.featuredMedia.showOnArchive&&_showMedia&&Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(PostFeaturedMedia,{id:item.featured_media}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(RightArrow,{className:\"arrow right\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(_icons_chevron_right__WEBPACK_IMPORTED_MODULE_7__[\"default\"],{className:\"icon\"})})]});};// Connect the Item to gain access to `state` as a prop\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"connect\"])(PostItem));// All styles :)\nconst Post=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"article\", false?undefined:{target:\"e7lz0qr9\",label:\"Post\"})( false?undefined:{name:\"qnpige\",styles:\"display:flex;flex-wrap:nowrap;flex-direction:row;align-items:flex-start;text-align:left;justify-content:space-between;border:1px solid #eee;box-shadow:3px 3px 3px #ccc;background-color:white;margin:0 auto 2em auto;width:100%;z-index:10;overflow:hidden;height:70vh;&:not(.active){display:none;}@media (max-width: 1000px){flex-direction:column-reverse;align-items:center;justify-content:start;}@media (max-width: 700px){height:80vh;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const PostContainer=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e7lz0qr8\",label:\"PostContainer\"})( false?undefined:{name:\"1aozbc0\",styles:\"animation-name:shutter;animation-duration:.5s;animation-timing-function:ease-in;animation-delay:.5s;animation-fill-mode:forwards;opacity:0;margin-left:80px;@keyframes shutter{0%{opacity:0;}100%{opacity:1;}}@media (max-width: 1000px){width:80%;margin-left:unset;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const PostHeader=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"header\", false?undefined:{target:\"e7lz0qr7\",label:\"PostHeader\"})( false?undefined:{name:\"1h37rkf\",styles:\"text-align:left;padding:2em;width:100%\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});// Header sizes bases on style.css\nconst maxWidths={thin:\"58rem\",small:\"80rem\",medium:\"100rem\"};const getMaxWidth=props=>maxWidths[props.size]||maxWidths[\"medium\"];const SectionContainer=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e7lz0qr6\",label:\"SectionContainer\"})( false?undefined:{name:\"1jnwdw\",styles:\"margin-left:auto;margin-right:auto;width:100%;text-align:left;-webkit-transition:all 0.15s linear;transition:all 0.15s linear\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const PostTitle=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"h1\", false?undefined:{target:\"e7lz0qr5\",label:\"PostTitle\"})( false?undefined:{name:\"3bllc6\",styles:\"font-size:2rem!important\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const PostLink=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(_link__WEBPACK_IMPORTED_MODULE_1__[\"default\"], false?undefined:{target:\"e7lz0qr4\",label:\"PostLink\"})( false?undefined:{name:\"6un5p1\",styles:\"color:#000000;text-decoration:none;display:inline-block;&:hover{text-decoration:underline;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const PostInner=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(SectionContainer, false?undefined:{target:\"e7lz0qr3\",label:\"PostInner\"})( false?undefined:{name:\"1aocde9\",styles:\"text-align:left;-webkit-transition:all 0.15s linear;transition:all 0.15s linear\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const EntryContent=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e7lz0qr2\",label:\"EntryContent\"})( false?undefined:{name:\"11rmm0t\",styles:\"line-height:1.5;max-width:58rem;font-family:inherit;letter-spacing:normal;max-width:350px;@media (min-width: 700px){font-size:1.2rem;}>*:first-of-type{margin-top:0;}figure{max-width:100%;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const LeftArrow=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e7lz0qr1\",label:\"LeftArrow\"})( false?undefined:{name:\"d9ekcs\",styles:\"position:absolute;left:0px;width:40px;border:1px solid #ddd;border-right:3px solid #6d6d6d;background-color:#efefef;display:flex;justify-content:center;align-items:center;z-index:1;height:70vh;.icon{opacity:.3;color:#222;}&:hover{background-color:#ddd;.icon{opacity:.8;}}@media (max-width: 700px){height:80vh;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const RightArrow=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e7lz0qr0\",label:\"RightArrow\"})( false?undefined:{name:\"905xge\",styles:\"position:absolute;right:0px;width:40px;border:1px solid #ddd;border-left:3px solid #6d6d6d;background-color:#efefef;display:flex;justify-content:center;align-items:center;z-index:1;height:70vh;.icon{opacity:.3;color:#222;}&:hover{background-color:#ddd;.icon{opacity:.8;}}@media (max-width: 700px){height:80vh;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/twentytwenty-theme/src/components/post/post-item.js\n");

/***/ })

}]);